import {
  getPaymentsFromOrder
} from "./chunk-UMVJJ5C6.js";
import {
  DEFAULT_FIELDS
} from "./chunk-YPD4RW2S.js";
import {
  formatCurrency
} from "./chunk-UTJBGVIO.js";
import "./chunk-CIFTBZLQ.js";
import {
  getLocaleAmount
} from "./chunk-MWKZ5MLM.js";
import {
  getCurrencySymbol
} from "./chunk-55MYIBGD.js";
import {
  RouteDrawer,
  useRouteModal
} from "./chunk-3P6F4Q7W.js";
import {
  useRefundReasons
} from "./chunk-E26TGYVV.js";
import "./chunk-BCDFWL4W.js";
import "./chunk-VOJT3GRC.js";
import "./chunk-4I3TSILH.js";
import "./chunk-P5R3EHIV.js";
import "./chunk-2TBOMIQA.js";
import "./chunk-7VADNSL7.js";
import "./chunk-AJ3DXG4K.js";
import "./chunk-FYV5O3WI.js";
import {
  useRefundPayment
} from "./chunk-ENW5Z6NU.js";
import "./chunk-MKU523AN.js";
import "./chunk-EFAG6P6Z.js";
import "./chunk-NJ7HRVAN.js";
import "./chunk-KNWZIBC3.js";
import "./chunk-5RUNMRCW.js";
import "./chunk-CFFZHLR2.js";
import "./chunk-YEEFU7KP.js";
import "./chunk-6MTGJSDM.js";
import "./chunk-Z34GYBFG.js";
import "./chunk-VN2HND4I.js";
import {
  useOrder
} from "./chunk-ACJP53PC.js";
import "./chunk-3AX2W3RD.js";
import "./chunk-ICPBA7GK.js";
import "./chunk-FREJU5EQ.js";
import "./chunk-4UBJQZN6.js";
import "./chunk-QSXBBOKN.js";
import "./chunk-IE22HJTV.js";
import "./chunk-3FGSU2DA.js";
import "./chunk-YUBPGLTM.js";
import "./chunk-ABZDCU5X.js";
import "./chunk-3VJMO5NN.js";
import "./chunk-IH74SCJ5.js";
import "./chunk-4UMAAWOP.js";
import "./chunk-Y5OEN2X7.js";
import {
  t
} from "./chunk-NMISSY3S.js";
import {
  numberType,
  objectType,
  stringType
} from "./chunk-D6YTPD33.js";
import {
  Form,
  useForm
} from "./chunk-TKBVWLOU.js";
import "./chunk-2ZDF4QRQ.js";
import "./chunk-QDFILGGU.js";
import "./chunk-ZSXFNTF6.js";
import {
  Button,
  CurrencyInput2 as CurrencyInput,
  Heading,
  Label,
  Select,
  Textarea,
  toast,
  useTranslation
} from "./chunk-ZUPX4YFG.js";
import {
  useNavigate,
  useParams,
  useSearchParams
} from "./chunk-HTGWU6KF.js";
import "./chunk-64MXM5QD.js";
import "./chunk-3VI6QF3M.js";
import {
  require_jsx_runtime
} from "./chunk-P6CFP5BP.js";
import {
  __toESM,
  require_react
} from "./chunk-H5NG3XTT.js";

// node_modules/@medusajs/dashboard/dist/order-create-refund-NQURUXNE.mjs
var import_react = __toESM(require_react(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var CreateRefundSchema = objectType({
  amount: numberType(),
  refund_reason_id: stringType().nullish(),
  note: stringType().optional()
});
var CreateRefundForm = ({
  order,
  refundReasons
}) => {
  const { t: t2 } = useTranslation();
  const { handleSuccess } = useRouteModal();
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  const paymentId = searchParams.get("paymentId");
  const payments = getPaymentsFromOrder(order);
  const payment = payments.find((p) => p.id === paymentId);
  const paymentAmount = (payment == null ? void 0 : payment.amount) || 0;
  const form = useForm({
    defaultValues: {
      amount: paymentAmount,
      note: ""
    },
    resolver: t(CreateRefundSchema)
  });
  (0, import_react.useEffect)(() => {
    const pendingDifference = order.summary.pending_difference;
    const paymentAmount2 = (payment == null ? void 0 : payment.amount) || 0;
    const pendingAmount = pendingDifference < 0 ? Math.min(pendingDifference, paymentAmount2) : paymentAmount2;
    const normalizedAmount = pendingAmount < 0 ? pendingAmount * -1 : pendingAmount;
    form.setValue("amount", normalizedAmount);
  }, [payment]);
  const { mutateAsync, isPending } = useRefundPayment(order.id, payment == null ? void 0 : payment.id);
  const handleSubmit = form.handleSubmit(async (data) => {
    await mutateAsync(
      {
        amount: data.amount,
        refund_reason_id: data.refund_reason_id,
        note: data.note
      },
      {
        onSuccess: () => {
          toast.success(
            t2("orders.payment.refundPaymentSuccess", {
              amount: formatCurrency(data.amount, payment == null ? void 0 : payment.currency_code)
            })
          );
          handleSuccess();
        },
        onError: (error) => {
          toast.error(error.message);
        }
      }
    );
  });
  return (0, import_jsx_runtime.jsx)(RouteDrawer.Form, { form, children: (0, import_jsx_runtime.jsxs)("form", { onSubmit: handleSubmit, className: "flex flex-1 flex-col", children: [
    (0, import_jsx_runtime.jsx)(RouteDrawer.Body, { children: (0, import_jsx_runtime.jsxs)("div", { className: "flex flex-col gap-y-4", children: [
      (0, import_jsx_runtime.jsxs)(
        Select,
        {
          value: payment == null ? void 0 : payment.id,
          onValueChange: (value) => {
            navigate(`/orders/${order.id}/refund?paymentId=${value}`, {
              replace: true
            });
          },
          children: [
            (0, import_jsx_runtime.jsx)(Label, { className: "font-sans txt-compact-small font-medium mb-[-6px]", children: t2("orders.payment.selectPaymentToRefund") }),
            (0, import_jsx_runtime.jsx)(Select.Trigger, { children: (0, import_jsx_runtime.jsx)(
              Select.Value,
              {
                placeholder: t2("orders.payment.selectPaymentToRefund")
              }
            ) }),
            (0, import_jsx_runtime.jsx)(Select.Content, { children: payments.map((payment2) => (0, import_jsx_runtime.jsxs)(Select.Item, { value: payment2.id, children: [
              (0, import_jsx_runtime.jsxs)("span", { children: [
                getLocaleAmount(
                  payment2.amount,
                  payment2.currency_code
                ),
                " - "
              ] }),
              (0, import_jsx_runtime.jsx)("span", { children: payment2.provider_id }),
              (0, import_jsx_runtime.jsxs)("span", { children: [
                " - (",
                payment2.id.replace("pay_", ""),
                ")"
              ] })
            ] }, payment2.id)) })
          ]
        }
      ),
      (0, import_jsx_runtime.jsx)(
        Form.Field,
        {
          control: form.control,
          name: "amount",
          rules: {
            required: true,
            min: 0,
            max: paymentAmount
          },
          render: ({ field: { onChange, ...field } }) => {
            return (0, import_jsx_runtime.jsxs)(Form.Item, { children: [
              (0, import_jsx_runtime.jsx)(Form.Label, { children: t2("fields.amount") }),
              (0, import_jsx_runtime.jsx)(Form.Control, { children: (0, import_jsx_runtime.jsx)(
                CurrencyInput,
                {
                  ...field,
                  min: 0,
                  onChange: (e) => {
                    const val = e.target.value === "" ? null : Number(e.target.value);
                    onChange(val);
                    if (val && !isNaN(val)) {
                      if (val < 0 || val > paymentAmount) {
                        form.setError(`amount`, {
                          type: "manual",
                          message: t2(
                            "orders.payment.createRefundWrongQuantity",
                            { number: paymentAmount }
                          )
                        });
                      } else {
                        form.clearErrors(`amount`);
                      }
                    }
                  },
                  code: order.currency_code,
                  symbol: getCurrencySymbol(order.currency_code),
                  value: field.value
                }
              ) }),
              (0, import_jsx_runtime.jsx)(Form.ErrorMessage, {})
            ] });
          }
        }
      ),
      (0, import_jsx_runtime.jsx)(
        Form.Field,
        {
          control: form.control,
          name: `note`,
          render: ({ field }) => {
            return (0, import_jsx_runtime.jsxs)(Form.Item, { children: [
              (0, import_jsx_runtime.jsx)(Form.Label, { children: t2("fields.note") }),
              (0, import_jsx_runtime.jsx)(Form.Control, { children: (0, import_jsx_runtime.jsx)(Textarea, { ...field }) }),
              (0, import_jsx_runtime.jsx)(Form.ErrorMessage, {})
            ] });
          }
        }
      )
    ] }) }),
    (0, import_jsx_runtime.jsx)(RouteDrawer.Footer, { children: (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center justify-end gap-x-2", children: [
      (0, import_jsx_runtime.jsx)(RouteDrawer.Close, { asChild: true, children: (0, import_jsx_runtime.jsx)(Button, { variant: "secondary", size: "small", children: t2("actions.cancel") }) }),
      (0, import_jsx_runtime.jsx)(
        Button,
        {
          isLoading: isPending,
          type: "submit",
          variant: "primary",
          size: "small",
          disabled: !!Object.keys(form.formState.errors || {}).length,
          children: t2("actions.save")
        }
      )
    ] }) })
  ] }) });
};
var OrderCreateRefund = () => {
  const { t: t2 } = useTranslation();
  const params = useParams();
  const { order } = useOrder(params.id, {
    fields: DEFAULT_FIELDS
  });
  const {
    refund_reasons: refundReasons,
    isLoading: isRefundReasonsLoading,
    isError: isRefundReasonsError,
    error: refundReasonsError
  } = useRefundReasons();
  if (isRefundReasonsError) {
    throw refundReasonsError;
  }
  return (0, import_jsx_runtime2.jsxs)(RouteDrawer, { children: [
    (0, import_jsx_runtime2.jsx)(RouteDrawer.Header, { children: (0, import_jsx_runtime2.jsx)(Heading, { children: t2("orders.payment.createRefund") }) }),
    order && !isRefundReasonsLoading && refundReasons && (0, import_jsx_runtime2.jsx)(CreateRefundForm, { order, refundReasons })
  ] });
};
export {
  OrderCreateRefund as Component
};
//# sourceMappingURL=order-create-refund-NQURUXNE-JI3UNYJP.js.map
