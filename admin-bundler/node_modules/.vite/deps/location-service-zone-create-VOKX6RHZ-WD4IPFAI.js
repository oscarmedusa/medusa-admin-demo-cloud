import {
  GeoZoneForm
} from "./chunk-ZUVK3HAI.js";
import "./chunk-6RW6WFUL.js";
import "./chunk-MD35TTE3.js";
import "./chunk-ULPN2T4G.js";
import {
  SplitView
} from "./chunk-EGRUNA7D.js";
import {
  InlineTip
} from "./chunk-M3Z2FM2U.js";
import "./chunk-EGRHWZRV.js";
import "./chunk-JH6E7Y6M.js";
import "./chunk-EIGZCZHJ.js";
import "./chunk-CEIAMOT7.js";
import "./chunk-EYAVSJ2J.js";
import "./chunk-TI6Y7EUW.js";
import "./chunk-JEFCFQ36.js";
import "./chunk-Z74QHE3B.js";
import "./chunk-6VC5CKXS.js";
import "./chunk-4HJQONUH.js";
import "./chunk-IANM7SMM.js";
import {
  RouteFocusModal,
  useRouteModal
} from "./chunk-3P6F4Q7W.js";
import "./chunk-7PAMQDEU.js";
import {
  useCreateFulfillmentSetServiceZone
} from "./chunk-AJ3DXG4K.js";
import "./chunk-YEEFU7KP.js";
import {
  useStockLocation
} from "./chunk-VN2HND4I.js";
import "./chunk-PCCLBZD7.js";
import "./chunk-YSLQHU2M.js";
import "./chunk-RLHQ5IGU.js";
import "./chunk-HZGR4LPF.js";
import "./chunk-3FGSU2DA.js";
import "./chunk-YUBPGLTM.js";
import "./chunk-K4BQKT4B.js";
import "./chunk-SWXOOP7W.js";
import "./chunk-ROURSU5C.js";
import "./chunk-4UMAAWOP.js";
import "./chunk-Y5OEN2X7.js";
import {
  t
} from "./chunk-NMISSY3S.js";
import {
  z
} from "./chunk-D6YTPD33.js";
import {
  Form,
  useForm
} from "./chunk-TKBVWLOU.js";
import "./chunk-QDFILGGU.js";
import "./chunk-ZSXFNTF6.js";
import {
  Button,
  Heading,
  Input,
  toast,
  useTranslation
} from "./chunk-ZUPX4YFG.js";
import {
  json,
  useParams
} from "./chunk-HTGWU6KF.js";
import "./chunk-64MXM5QD.js";
import "./chunk-3VI6QF3M.js";
import {
  require_jsx_runtime
} from "./chunk-P6CFP5BP.js";
import {
  __toESM,
  require_react
} from "./chunk-H5NG3XTT.js";

// node_modules/@medusajs/dashboard/dist/location-service-zone-create-VOKX6RHZ.mjs
var import_react = __toESM(require_react(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var CreateServiceZoneSchema = z.object({
  name: z.string().min(1),
  countries: z.array(z.object({ iso_2: z.string().min(2), display_name: z.string() })).min(1)
});
function CreateServiceZoneForm({
  fulfillmentSet,
  type,
  location
}) {
  const { t: t2 } = useTranslation();
  const { handleSuccess } = useRouteModal();
  const [open, setOpen] = (0, import_react.useState)(false);
  const form = useForm({
    defaultValues: {
      name: "",
      countries: []
    },
    resolver: t(CreateServiceZoneSchema)
  });
  const { mutateAsync, isPending } = useCreateFulfillmentSetServiceZone(
    fulfillmentSet.id
  );
  const handleSubmit = form.handleSubmit(async (data) => {
    await mutateAsync(
      {
        name: data.name,
        geo_zones: data.countries.map(({ iso_2 }) => ({
          country_code: iso_2,
          type: "country"
        }))
      },
      {
        onSuccess: () => {
          toast.success(
            t2("stockLocations.serviceZones.create.successToast", {
              name: data.name
            })
          );
          handleSuccess(`/settings/locations/${location.id}`);
        },
        onError: (e) => {
          toast.error(e.message);
        }
      }
    );
  });
  return (0, import_jsx_runtime.jsx)(RouteFocusModal.Form, { form, children: (0, import_jsx_runtime.jsxs)(
    "form",
    {
      className: "flex h-full flex-col overflow-hidden",
      onSubmit: handleSubmit,
      children: [
        (0, import_jsx_runtime.jsx)(RouteFocusModal.Header, { children: (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center justify-end gap-x-2", children: [
          (0, import_jsx_runtime.jsx)(RouteFocusModal.Close, { asChild: true, children: (0, import_jsx_runtime.jsx)(Button, { variant: "secondary", size: "small", children: t2("actions.cancel") }) }),
          (0, import_jsx_runtime.jsx)(Button, { type: "submit", size: "small", isLoading: isPending, children: t2("actions.save") })
        ] }) }),
        (0, import_jsx_runtime.jsx)(RouteFocusModal.Body, { className: "m-auto flex h-full w-full  flex-col items-center divide-y overflow-hidden", children: (0, import_jsx_runtime.jsxs)(SplitView, { open, onOpenChange: setOpen, children: [
          (0, import_jsx_runtime.jsx)(SplitView.Content, { children: (0, import_jsx_runtime.jsx)("div", { className: "flex flex-1 flex-col items-center overflow-y-auto", children: (0, import_jsx_runtime.jsxs)("div", { className: "flex w-full max-w-[720px] flex-col gap-y-8 px-2 py-16", children: [
            (0, import_jsx_runtime.jsx)(Heading, { children: type === "pickup" ? t2("stockLocations.serviceZones.create.headerPickup", {
              location: location.name
            }) : t2("stockLocations.serviceZones.create.headerShipping", {
              location: location.name
            }) }),
            (0, import_jsx_runtime.jsx)("div", { className: "grid grid-cols-1 gap-4 md:grid-cols-2", children: (0, import_jsx_runtime.jsx)(
              Form.Field,
              {
                control: form.control,
                name: "name",
                render: ({ field }) => {
                  return (0, import_jsx_runtime.jsxs)(Form.Item, { children: [
                    (0, import_jsx_runtime.jsx)(Form.Label, { children: t2("fields.name") }),
                    (0, import_jsx_runtime.jsx)(Form.Control, { children: (0, import_jsx_runtime.jsx)(Input, { ...field }) }),
                    (0, import_jsx_runtime.jsx)(Form.ErrorMessage, {})
                  ] });
                }
              }
            ) }),
            (0, import_jsx_runtime.jsx)(InlineTip, { children: t2("stockLocations.serviceZones.fields.tip") }),
            (0, import_jsx_runtime.jsx)(GeoZoneForm, { form, onOpenChange: setOpen })
          ] }) }) }),
          (0, import_jsx_runtime.jsx)(
            GeoZoneForm.AreaDrawer,
            {
              form,
              open,
              onOpenChange: setOpen
            }
          )
        ] }) })
      ]
    }
  ) });
}
function LocationCreateServiceZone() {
  var _a;
  const { fset_id, location_id } = useParams();
  const { stock_location, isPending, isFetching, isError, error } = useStockLocation(location_id, {
    fields: "*fulfillment_sets"
  });
  const fulfillmentSet = (_a = stock_location == null ? void 0 : stock_location.fulfillment_sets) == null ? void 0 : _a.find(
    (f) => f.id === fset_id
  );
  const type = (fulfillmentSet == null ? void 0 : fulfillmentSet.type) === "pickup" ? "pickup" : "shipping";
  if (!isPending && !isFetching && !fulfillmentSet) {
    throw json(
      { message: `Fulfillment set with ID: ${fset_id} was not found.` },
      404
    );
  }
  if (isError) {
    throw error;
  }
  return (0, import_jsx_runtime2.jsx)(RouteFocusModal, { prev: `/settings/locations/${location_id}`, children: fulfillmentSet && (0, import_jsx_runtime2.jsx)(
    CreateServiceZoneForm,
    {
      fulfillmentSet,
      location: stock_location,
      type
    }
  ) });
}
export {
  LocationCreateServiceZone as Component
};
//# sourceMappingURL=location-service-zone-create-VOKX6RHZ-WD4IPFAI.js.map
