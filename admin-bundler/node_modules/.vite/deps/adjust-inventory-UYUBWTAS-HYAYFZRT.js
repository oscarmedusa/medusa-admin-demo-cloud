import {
  RouteDrawer,
  useRouteModal
} from "./chunk-3P6F4Q7W.js";
import {
  useStockLocation
} from "./chunk-VN2HND4I.js";
import {
  useInventoryItem,
  useUpdateInventoryLevel
} from "./chunk-IH74SCJ5.js";
import "./chunk-4UMAAWOP.js";
import "./chunk-Y5OEN2X7.js";
import {
  t
} from "./chunk-NMISSY3S.js";
import {
  numberType,
  objectType
} from "./chunk-D6YTPD33.js";
import {
  Form,
  useForm
} from "./chunk-TKBVWLOU.js";
import "./chunk-QDFILGGU.js";
import "./chunk-ZSXFNTF6.js";
import {
  Button,
  Heading,
  Input,
  Text,
  toast,
  useTranslation
} from "./chunk-ZUPX4YFG.js";
import {
  useParams
} from "./chunk-HTGWU6KF.js";
import "./chunk-64MXM5QD.js";
import "./chunk-3VI6QF3M.js";
import {
  require_jsx_runtime
} from "./chunk-P6CFP5BP.js";
import {
  __toESM
} from "./chunk-H5NG3XTT.js";

// node_modules/@medusajs/dashboard/dist/adjust-inventory-UYUBWTAS.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var AttributeGridRow = ({
  title,
  value
}) => {
  return (0, import_jsx_runtime.jsxs)("div", { className: "grid grid-cols-2 divide-x", children: [
    (0, import_jsx_runtime.jsx)(Text, { className: "px-2 py-1.5", size: "small", leading: "compact", children: title }),
    (0, import_jsx_runtime.jsx)(Text, { className: "px-2 py-1.5", size: "small", leading: "compact", children: value })
  ] });
};
var AdjustInventoryForm = ({
  item,
  level,
  location
}) => {
  const { t: t2 } = useTranslation();
  const { handleSuccess } = useRouteModal();
  const AdjustInventorySchema = objectType({
    stocked_quantity: numberType().min(level.reserved_quantity)
  });
  const form = useForm({
    defaultValues: {
      stocked_quantity: level.stocked_quantity
    },
    resolver: t(AdjustInventorySchema)
  });
  const stockedQuantityUpdate = form.watch("stocked_quantity");
  const { mutateAsync, isPending: isLoading } = useUpdateInventoryLevel(
    item.id,
    level.location_id
  );
  const handleSubmit = form.handleSubmit(async (value) => {
    if (value.stocked_quantity === level.stocked_quantity) {
      return handleSuccess();
    }
    await mutateAsync(
      {
        stocked_quantity: value.stocked_quantity
      },
      {
        onSuccess: () => {
          toast.success(t2("inventory.toast.updateLevel"));
          handleSuccess();
        },
        onError: (e) => {
          toast.error(e.message);
        }
      }
    );
  });
  return (0, import_jsx_runtime.jsx)(RouteDrawer.Form, { form, children: (0, import_jsx_runtime.jsxs)(
    "form",
    {
      onSubmit: handleSubmit,
      className: "flex flex-1 flex-col overflow-hidden",
      children: [
        (0, import_jsx_runtime.jsxs)(RouteDrawer.Body, { className: "flex flex-1 flex-col gap-y-8 overflow-auto", children: [
          (0, import_jsx_runtime.jsxs)("div", { className: "text-ui-fg-subtle shadow-elevation-card-rest grid grid-rows-4 divide-y rounded-lg border", children: [
            (0, import_jsx_runtime.jsx)(
              AttributeGridRow,
              {
                title: t2("fields.title"),
                value: item.title ?? "-"
              }
            ),
            (0, import_jsx_runtime.jsx)(AttributeGridRow, { title: t2("fields.sku"), value: item.sku }),
            (0, import_jsx_runtime.jsx)(
              AttributeGridRow,
              {
                title: t2("locations.domain"),
                value: location.name
              }
            ),
            (0, import_jsx_runtime.jsx)(
              AttributeGridRow,
              {
                title: t2("inventory.reserved"),
                value: level.reserved_quantity
              }
            ),
            (0, import_jsx_runtime.jsx)(
              AttributeGridRow,
              {
                title: t2("inventory.available"),
                value: stockedQuantityUpdate - level.reserved_quantity
              }
            )
          ] }),
          (0, import_jsx_runtime.jsx)(
            Form.Field,
            {
              control: form.control,
              name: "stocked_quantity",
              render: ({ field: { onChange, value, ...field } }) => {
                return (0, import_jsx_runtime.jsxs)(Form.Item, { children: [
                  (0, import_jsx_runtime.jsx)(Form.Label, { children: t2("fields.inStock") }),
                  (0, import_jsx_runtime.jsx)(Form.Control, { children: (0, import_jsx_runtime.jsx)(
                    Input,
                    {
                      type: "number",
                      min: level.reserved_quantity,
                      value: value || "",
                      onChange: (e) => {
                        const value2 = e.target.value;
                        if (value2 === "") {
                          onChange(null);
                        } else {
                          onChange(parseFloat(value2));
                        }
                      },
                      ...field
                    }
                  ) }),
                  (0, import_jsx_runtime.jsx)(Form.ErrorMessage, {})
                ] });
              }
            }
          )
        ] }),
        (0, import_jsx_runtime.jsx)(RouteDrawer.Footer, { children: (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center justify-end gap-x-2", children: [
          (0, import_jsx_runtime.jsx)(RouteDrawer.Close, { asChild: true, children: (0, import_jsx_runtime.jsx)(Button, { variant: "secondary", size: "small", children: t2("actions.cancel") }) }),
          (0, import_jsx_runtime.jsx)(Button, { type: "submit", size: "small", isLoading, children: t2("actions.save") })
        ] }) })
      ]
    }
  ) });
};
var AdjustInventoryDrawer = () => {
  const { id, location_id } = useParams();
  const { t: t2 } = useTranslation();
  const {
    inventory_item: inventoryItem,
    isPending: isLoading,
    isError,
    error
  } = useInventoryItem(id);
  const inventoryLevel = inventoryItem == null ? void 0 : inventoryItem.location_levels.find(
    (level) => level.location_id === location_id
  );
  const { stock_location, isLoading: isLoadingLocation } = useStockLocation(
    location_id
  );
  const ready = !isLoading && inventoryItem && inventoryLevel && !isLoadingLocation && stock_location;
  if (isError) {
    throw error;
  }
  return (0, import_jsx_runtime2.jsxs)(RouteDrawer, { children: [
    (0, import_jsx_runtime2.jsx)(RouteDrawer.Header, { children: (0, import_jsx_runtime2.jsx)(Heading, { children: t2("inventory.manageLocations") }) }),
    ready && (0, import_jsx_runtime2.jsx)(
      AdjustInventoryForm,
      {
        item: inventoryItem,
        level: inventoryLevel,
        location: stock_location
      }
    )
  ] });
};
export {
  AdjustInventoryDrawer as Component
};
//# sourceMappingURL=adjust-inventory-UYUBWTAS-HYAYFZRT.js.map
