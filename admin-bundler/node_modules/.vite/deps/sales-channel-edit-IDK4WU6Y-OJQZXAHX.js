import {
  RouteDrawer,
  useRouteModal
} from "./chunk-3P6F4Q7W.js";
import {
  useSalesChannel,
  useUpdateSalesChannel
} from "./chunk-ABZDCU5X.js";
import "./chunk-3VJMO5NN.js";
import "./chunk-IH74SCJ5.js";
import "./chunk-4UMAAWOP.js";
import "./chunk-Y5OEN2X7.js";
import {
  t
} from "./chunk-NMISSY3S.js";
import {
  booleanType,
  objectType,
  stringType
} from "./chunk-D6YTPD33.js";
import {
  Form,
  useForm
} from "./chunk-TKBVWLOU.js";
import "./chunk-QDFILGGU.js";
import "./chunk-ZSXFNTF6.js";
import {
  Button,
  Heading,
  Input,
  Switch,
  Textarea,
  toast,
  useTranslation
} from "./chunk-ZUPX4YFG.js";
import {
  useParams
} from "./chunk-HTGWU6KF.js";
import "./chunk-64MXM5QD.js";
import "./chunk-3VI6QF3M.js";
import {
  require_jsx_runtime
} from "./chunk-P6CFP5BP.js";
import {
  __toESM
} from "./chunk-H5NG3XTT.js";

// node_modules/@medusajs/dashboard/dist/sales-channel-edit-IDK4WU6Y.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var EditSalesChannelSchema = objectType({
  name: stringType().min(1),
  description: stringType().optional(),
  is_active: booleanType()
});
var EditSalesChannelForm = ({
  salesChannel
}) => {
  const { t: t2 } = useTranslation();
  const { handleSuccess } = useRouteModal();
  const form = useForm({
    defaultValues: {
      name: salesChannel.name,
      description: salesChannel.description ?? "",
      is_active: !salesChannel.is_disabled
    },
    resolver: t(EditSalesChannelSchema)
  });
  const { mutateAsync, isPending } = useUpdateSalesChannel(salesChannel.id);
  const handleSubmit = form.handleSubmit(async (values) => {
    await mutateAsync(
      {
        name: values.name,
        description: values.description ?? void 0,
        is_disabled: !values.is_active
      },
      {
        onSuccess: () => {
          toast.success(t2("salesChannels.toast.update"));
          handleSuccess();
        },
        onError: (error) => {
          toast.error(error.message);
        }
      }
    );
  });
  return (0, import_jsx_runtime.jsx)(RouteDrawer.Form, { form, children: (0, import_jsx_runtime.jsxs)(
    "form",
    {
      onSubmit: handleSubmit,
      className: "flex flex-1 flex-col overflow-hidden",
      children: [
        (0, import_jsx_runtime.jsxs)(RouteDrawer.Body, { className: "flex max-w-full flex-1 flex-col gap-y-8 overflow-y-auto", children: [
          (0, import_jsx_runtime.jsx)(
            Form.Field,
            {
              control: form.control,
              name: "name",
              render: ({ field }) => {
                return (0, import_jsx_runtime.jsxs)(Form.Item, { children: [
                  (0, import_jsx_runtime.jsx)(Form.Label, { children: t2("fields.name") }),
                  (0, import_jsx_runtime.jsx)(Form.Control, { children: (0, import_jsx_runtime.jsx)(Input, { ...field, size: "small" }) }),
                  (0, import_jsx_runtime.jsx)(Form.ErrorMessage, {})
                ] });
              }
            }
          ),
          (0, import_jsx_runtime.jsx)(
            Form.Field,
            {
              control: form.control,
              name: "description",
              render: ({ field }) => {
                return (0, import_jsx_runtime.jsxs)(Form.Item, { children: [
                  (0, import_jsx_runtime.jsx)(Form.Label, { optional: true, children: t2("fields.description") }),
                  (0, import_jsx_runtime.jsx)(Form.Control, { children: (0, import_jsx_runtime.jsx)(Textarea, { ...field }) }),
                  (0, import_jsx_runtime.jsx)(Form.ErrorMessage, {})
                ] });
              }
            }
          ),
          (0, import_jsx_runtime.jsx)(
            Form.Field,
            {
              control: form.control,
              name: "is_active",
              render: ({ field: { onChange, value, ...field } }) => {
                return (0, import_jsx_runtime.jsxs)(Form.Item, { children: [
                  (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center justify-between", children: [
                    (0, import_jsx_runtime.jsx)(Form.Label, { children: t2("general.enabled") }),
                    (0, import_jsx_runtime.jsx)(Form.Control, { children: (0, import_jsx_runtime.jsx)(
                      Switch,
                      {
                        onCheckedChange: onChange,
                        checked: value,
                        ...field
                      }
                    ) })
                  ] }),
                  (0, import_jsx_runtime.jsx)(Form.Hint, { children: t2("salesChannels.enabledHint") }),
                  (0, import_jsx_runtime.jsx)(Form.ErrorMessage, {})
                ] });
              }
            }
          )
        ] }),
        (0, import_jsx_runtime.jsx)(RouteDrawer.Footer, { children: (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center justify-end gap-x-2", children: [
          (0, import_jsx_runtime.jsx)(RouteDrawer.Close, { asChild: true, children: (0, import_jsx_runtime.jsx)(Button, { size: "small", variant: "secondary", children: t2("actions.cancel") }) }),
          (0, import_jsx_runtime.jsx)(Button, { size: "small", type: "submit", isLoading: isPending, children: t2("actions.save") })
        ] }) })
      ]
    }
  ) });
};
var SalesChannelEdit = () => {
  const { id } = useParams();
  const { t: t2 } = useTranslation();
  const {
    sales_channel,
    isPending: isLoading,
    isError,
    error
  } = useSalesChannel(id);
  if (isError) {
    throw error;
  }
  return (0, import_jsx_runtime2.jsxs)(RouteDrawer, { children: [
    (0, import_jsx_runtime2.jsx)(RouteDrawer.Header, { children: (0, import_jsx_runtime2.jsx)(Heading, { className: "capitalize", children: t2("salesChannels.editSalesChannel") }) }),
    !isLoading && !!sales_channel && (0, import_jsx_runtime2.jsx)(EditSalesChannelForm, { salesChannel: sales_channel })
  ] });
};
export {
  SalesChannelEdit as Component
};
//# sourceMappingURL=sales-channel-edit-IDK4WU6Y-OJQZXAHX.js.map
