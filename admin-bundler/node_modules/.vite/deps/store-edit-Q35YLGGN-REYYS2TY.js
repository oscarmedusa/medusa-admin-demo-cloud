import {
  RouteDrawer,
  useRouteModal
} from "./chunk-3P6F4Q7W.js";
import {
  useStore,
  useUpdateStore
} from "./chunk-ICPBA7GK.js";
import {
  useRegions
} from "./chunk-FREJU5EQ.js";
import "./chunk-4UBJQZN6.js";
import "./chunk-4UMAAWOP.js";
import "./chunk-Y5OEN2X7.js";
import {
  t
} from "./chunk-NMISSY3S.js";
import {
  z
} from "./chunk-D6YTPD33.js";
import {
  Form,
  useForm
} from "./chunk-TKBVWLOU.js";
import "./chunk-QDFILGGU.js";
import "./chunk-ZSXFNTF6.js";
import {
  Button,
  Heading,
  Input,
  Select,
  toast,
  useTranslation
} from "./chunk-ZUPX4YFG.js";
import "./chunk-HTGWU6KF.js";
import "./chunk-64MXM5QD.js";
import "./chunk-3VI6QF3M.js";
import {
  require_jsx_runtime
} from "./chunk-P6CFP5BP.js";
import {
  __toESM
} from "./chunk-H5NG3XTT.js";

// node_modules/@medusajs/dashboard/dist/store-edit-Q35YLGGN.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var EditStoreSchema = z.object({
  name: z.string().min(1),
  default_currency_code: z.string().optional(),
  default_region_id: z.string().optional()
  // default_location_id: z.string().optional(),
});
var EditStoreForm = ({ store }) => {
  var _a, _b;
  const { t: t2 } = useTranslation();
  const { handleSuccess } = useRouteModal();
  const form = useForm({
    defaultValues: {
      name: store.name,
      default_region_id: store.default_region_id || void 0,
      default_currency_code: ((_b = (_a = store.supported_currencies) == null ? void 0 : _a.find((c) => c.is_default)) == null ? void 0 : _b.currency_code) || void 0
    },
    resolver: t(EditStoreSchema)
  });
  const { mutateAsync, isPending } = useUpdateStore(store.id);
  const { regions, isPending: isRegionsLoading } = useRegions({ limit: 999 });
  const handleSubmit = form.handleSubmit(async (values) => {
    var _a2;
    const normalizedMutation = {
      ...values,
      default_currency_code: void 0,
      supported_currencies: (_a2 = store.supported_currencies) == null ? void 0 : _a2.map((c) => ({
        ...c,
        is_default: c.currency_code === values.default_currency_code
      }))
    };
    await mutateAsync(normalizedMutation, {
      onSuccess: () => {
        toast.success(t2("store.toast.update"));
        handleSuccess();
      },
      onError: (error) => {
        toast.error(error.message);
      }
    });
  });
  return (0, import_jsx_runtime.jsx)(RouteDrawer.Form, { form, children: (0, import_jsx_runtime.jsxs)("form", { onSubmit: handleSubmit, className: "flex h-full flex-col", children: [
    (0, import_jsx_runtime.jsx)(RouteDrawer.Body, { children: (0, import_jsx_runtime.jsxs)("div", { className: "flex flex-col gap-y-8", children: [
      (0, import_jsx_runtime.jsx)(
        Form.Field,
        {
          control: form.control,
          name: "name",
          render: ({ field }) => (0, import_jsx_runtime.jsxs)(Form.Item, { children: [
            (0, import_jsx_runtime.jsx)(Form.Label, { children: t2("fields.name") }),
            (0, import_jsx_runtime.jsx)(Form.Control, { children: (0, import_jsx_runtime.jsx)(Input, { placeholder: "ACME", ...field }) }),
            (0, import_jsx_runtime.jsx)(Form.ErrorMessage, {})
          ] })
        }
      ),
      (0, import_jsx_runtime.jsx)(
        Form.Field,
        {
          control: form.control,
          name: "default_currency_code",
          render: ({ field: { onChange, ...field } }) => {
            var _a2;
            return (0, import_jsx_runtime.jsxs)(Form.Item, { children: [
              (0, import_jsx_runtime.jsx)(Form.Label, { children: t2("store.defaultCurrency") }),
              (0, import_jsx_runtime.jsx)(Form.Control, { children: (0, import_jsx_runtime.jsxs)(Select, { ...field, onValueChange: onChange, children: [
                (0, import_jsx_runtime.jsx)(Select.Trigger, { ref: field.ref, children: (0, import_jsx_runtime.jsx)(Select.Value, {}) }),
                (0, import_jsx_runtime.jsx)(Select.Content, { children: (_a2 = store.supported_currencies) == null ? void 0 : _a2.map((currency) => (0, import_jsx_runtime.jsx)(
                  Select.Item,
                  {
                    value: currency.currency_code,
                    children: currency.currency_code.toUpperCase()
                  },
                  currency.currency_code
                )) })
              ] }) })
            ] });
          }
        }
      ),
      (0, import_jsx_runtime.jsx)(
        Form.Field,
        {
          control: form.control,
          name: "default_region_id",
          render: ({ field: { onChange, ...field } }) => {
            return (0, import_jsx_runtime.jsxs)(Form.Item, { children: [
              (0, import_jsx_runtime.jsx)(Form.Label, { children: t2("store.defaultRegion") }),
              (0, import_jsx_runtime.jsx)(Form.Control, { children: (0, import_jsx_runtime.jsxs)(
                Select,
                {
                  ...field,
                  onValueChange: onChange,
                  disabled: isRegionsLoading,
                  children: [
                    (0, import_jsx_runtime.jsx)(Select.Trigger, { ref: field.ref, children: (0, import_jsx_runtime.jsx)(Select.Value, {}) }),
                    (0, import_jsx_runtime.jsx)(Select.Content, { children: (regions || []).map((region) => (0, import_jsx_runtime.jsx)(Select.Item, { value: region.id, children: region.name }, region.id)) })
                  ]
                }
              ) })
            ] });
          }
        }
      )
    ] }) }),
    (0, import_jsx_runtime.jsx)(RouteDrawer.Footer, { children: (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center justify-end gap-x-2", children: [
      (0, import_jsx_runtime.jsx)(RouteDrawer.Close, { asChild: true, children: (0, import_jsx_runtime.jsx)(Button, { size: "small", variant: "secondary", children: t2("actions.cancel") }) }),
      (0, import_jsx_runtime.jsx)(Button, { size: "small", isLoading: isPending, type: "submit", children: t2("actions.save") })
    ] }) })
  ] }) });
};
var StoreEdit = () => {
  const { t: t2 } = useTranslation();
  const { store, isPending: isLoading, isError, error } = useStore();
  if (isError) {
    throw error;
  }
  const ready = !!store && !isLoading;
  return (0, import_jsx_runtime2.jsxs)(RouteDrawer, { children: [
    (0, import_jsx_runtime2.jsx)(RouteDrawer.Header, { children: (0, import_jsx_runtime2.jsx)(Heading, { children: t2("store.edit.header") }) }),
    ready && (0, import_jsx_runtime2.jsx)(EditStoreForm, { store })
  ] });
};
export {
  StoreEdit as Component
};
//# sourceMappingURL=store-edit-Q35YLGGN-REYYS2TY.js.map
