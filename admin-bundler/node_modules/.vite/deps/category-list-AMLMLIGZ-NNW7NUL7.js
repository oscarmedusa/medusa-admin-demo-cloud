import {
  useDeleteProductCategoryAction
} from "./chunk-WWI6PLLZ.js";
import {
  getCategoryPath,
  getIsActiveProps,
  getIsInternalProps
} from "./chunk-D2W6HL77.js";
import {
  TextCell,
  TextHeader
} from "./chunk-KTHKGBUF.js";
import {
  StatusCell
} from "./chunk-4TA2GWZH.js";
import "./chunk-EGRHWZRV.js";
import "./chunk-QZUCBNNJ.js";
import {
  DataTable,
  useDataTable
} from "./chunk-JH6E7Y6M.js";
import "./chunk-EIGZCZHJ.js";
import "./chunk-CEIAMOT7.js";
import "./chunk-EYAVSJ2J.js";
import {
  createColumnHelper
} from "./chunk-TI6Y7EUW.js";
import {
  useQueryParams
} from "./chunk-JEFCFQ36.js";
import "./chunk-Z74QHE3B.js";
import "./chunk-6VC5CKXS.js";
import "./chunk-4HJQONUH.js";
import "./chunk-IANM7SMM.js";
import "./chunk-O47TKOMU.js";
import {
  useProductCategories
} from "./chunk-3AX2W3RD.js";
import "./chunk-YSLQHU2M.js";
import {
  ActionMenu
} from "./chunk-IE22HJTV.js";
import "./chunk-RLHQ5IGU.js";
import "./chunk-HZGR4LPF.js";
import "./chunk-3FGSU2DA.js";
import "./chunk-YUBPGLTM.js";
import "./chunk-K4BQKT4B.js";
import "./chunk-SWXOOP7W.js";
import "./chunk-ROURSU5C.js";
import "./chunk-3VJMO5NN.js";
import "./chunk-IH74SCJ5.js";
import "./chunk-4UMAAWOP.js";
import "./chunk-Y5OEN2X7.js";
import "./chunk-QDFILGGU.js";
import {
  keepPreviousData
} from "./chunk-ZSXFNTF6.js";
import {
  Button,
  Container,
  Heading,
  IconButton,
  PencilSquare,
  Text,
  Trash,
  TriangleRightMini,
  clx,
  useTranslation
} from "./chunk-ZUPX4YFG.js";
import {
  Link,
  Outlet
} from "./chunk-HTGWU6KF.js";
import "./chunk-64MXM5QD.js";
import "./chunk-3VI6QF3M.js";
import {
  require_jsx_runtime
} from "./chunk-P6CFP5BP.js";
import {
  __toESM,
  require_react
} from "./chunk-H5NG3XTT.js";

// node_modules/@medusajs/dashboard/dist/category-list-AMLMLIGZ.mjs
var import_react = __toESM(require_react(), 1);
var import_react2 = __toESM(require_react(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
import after from "virtual:medusa/widgets/product_category/list/after";
import before from "virtual:medusa/widgets/product_category/list/before";
var columnHelper = createColumnHelper();
var useCategoryTableColumns = () => {
  const { t } = useTranslation();
  return (0, import_react2.useMemo)(
    () => [
      columnHelper.accessor("name", {
        header: () => (0, import_jsx_runtime.jsx)(TextHeader, { text: t("fields.name") }),
        cell: ({ getValue, row }) => {
          const expandHandler = row.getToggleExpandedHandler();
          if (row.original.parent_category !== void 0) {
            const path = getCategoryPath(row.original);
            return (0, import_jsx_runtime.jsx)("div", { className: "flex size-full items-center gap-1 overflow-hidden", children: path.map((chip, index) => (0, import_jsx_runtime.jsxs)(
              "div",
              {
                className: clx("overflow-hidden", {
                  "text-ui-fg-muted flex items-center gap-x-1": index !== path.length - 1
                }),
                children: [
                  (0, import_jsx_runtime.jsx)(Text, { size: "small", leading: "compact", className: "truncate", children: chip.name }),
                  index !== path.length - 1 && (0, import_jsx_runtime.jsx)(Text, { size: "small", leading: "compact", children: "/" })
                ]
              },
              chip.id
            )) });
          }
          return (0, import_jsx_runtime.jsxs)("div", { className: "flex size-full items-center gap-x-3 overflow-hidden", children: [
            (0, import_jsx_runtime.jsx)("div", { className: "flex size-7 items-center justify-center", children: row.getCanExpand() ? (0, import_jsx_runtime.jsx)(
              IconButton,
              {
                type: "button",
                onClick: (e) => {
                  e.stopPropagation();
                  e.preventDefault();
                  expandHandler();
                },
                size: "small",
                variant: "transparent",
                className: "text-ui-fg-subtle",
                children: (0, import_jsx_runtime.jsx)(
                  TriangleRightMini,
                  {
                    className: clx({
                      "rotate-90 transition-transform will-change-transform": row.getIsExpanded()
                    })
                  }
                )
              }
            ) : null }),
            (0, import_jsx_runtime.jsx)("span", { className: "truncate", children: getValue() })
          ] });
        }
      }),
      columnHelper.accessor("handle", {
        header: () => (0, import_jsx_runtime.jsx)(TextHeader, { text: t("fields.handle") }),
        cell: ({ getValue }) => {
          return (0, import_jsx_runtime.jsx)(TextCell, { text: `/${getValue()}` });
        }
      }),
      columnHelper.accessor("is_active", {
        header: () => (0, import_jsx_runtime.jsx)(TextHeader, { text: t("fields.status") }),
        cell: ({ getValue }) => {
          const { color, label } = getIsActiveProps(getValue(), t);
          return (0, import_jsx_runtime.jsx)(StatusCell, { color, children: label });
        }
      }),
      columnHelper.accessor("is_internal", {
        header: () => (0, import_jsx_runtime.jsx)(TextHeader, { text: t("categories.fields.visibility.label") }),
        cell: ({ getValue }) => {
          const { color, label } = getIsInternalProps(getValue(), t);
          return (0, import_jsx_runtime.jsx)(StatusCell, { color, children: label });
        }
      })
    ],
    [t]
  );
};
var useCategoryTableQuery = ({
  pageSize = 20,
  prefix
}) => {
  const raw = useQueryParams(["q", "offset", "order"], prefix);
  const searchParams = {
    q: raw.q,
    limit: pageSize,
    offset: raw.offset ? Number(raw.offset) : 0,
    order: raw.order
  };
  return {
    raw,
    searchParams
  };
};
var PAGE_SIZE = 20;
var CategoryListTable = () => {
  const { t } = useTranslation();
  const { raw, searchParams } = useCategoryTableQuery({ pageSize: PAGE_SIZE });
  const query = raw.q ? {
    include_ancestors_tree: true,
    fields: "id,name,handle,is_active,is_internal,parent_category",
    ...searchParams
  } : {
    include_descendants_tree: true,
    parent_category_id: "null",
    fields: "id,name,category_children,handle,is_internal,is_active",
    ...searchParams
  };
  const { product_categories, count, isLoading, isError, error } = useProductCategories(
    {
      ...query
    },
    {
      placeholderData: keepPreviousData
    }
  );
  const columns = useColumns();
  const { table } = useDataTable({
    data: product_categories || [],
    columns,
    count,
    getRowId: (original) => original.id,
    getSubRows: (original) => original.category_children,
    enableExpandableRows: true,
    pageSize: PAGE_SIZE
  });
  const showRankingAction = !!product_categories && product_categories.length > 0;
  if (isError) {
    throw error;
  }
  return (0, import_jsx_runtime2.jsxs)(Container, { className: "divide-y p-0", children: [
    (0, import_jsx_runtime2.jsxs)("div", { className: "flex items-center justify-between px-6 py-4", children: [
      (0, import_jsx_runtime2.jsxs)("div", { children: [
        (0, import_jsx_runtime2.jsx)(Heading, { children: t("categories.domain") }),
        (0, import_jsx_runtime2.jsx)(Text, { className: "text-ui-fg-subtle", size: "small", children: t("categories.subtitle") })
      ] }),
      (0, import_jsx_runtime2.jsxs)("div", { className: "flex items-center gap-x-2", children: [
        showRankingAction && (0, import_jsx_runtime2.jsx)(Button, { size: "small", variant: "secondary", asChild: true, children: (0, import_jsx_runtime2.jsx)(Link, { to: "organize", children: t("categories.organize.action") }) }),
        (0, import_jsx_runtime2.jsx)(Button, { size: "small", variant: "secondary", asChild: true, children: (0, import_jsx_runtime2.jsx)(Link, { to: "create", children: t("actions.create") }) })
      ] })
    ] }),
    (0, import_jsx_runtime2.jsx)(
      DataTable,
      {
        table,
        columns,
        count,
        pageSize: PAGE_SIZE,
        isLoading,
        navigateTo: (row) => row.id,
        queryObject: raw,
        search: true,
        pagination: true
      }
    )
  ] });
};
var CategoryRowActions = ({
  category
}) => {
  const { t } = useTranslation();
  const handleDelete = useDeleteProductCategoryAction(category);
  return (0, import_jsx_runtime2.jsx)(
    ActionMenu,
    {
      groups: [
        {
          actions: [
            {
              label: t("actions.edit"),
              icon: (0, import_jsx_runtime2.jsx)(PencilSquare, {}),
              to: `${category.id}/edit`
            }
          ]
        },
        {
          actions: [
            {
              label: t("actions.delete"),
              icon: (0, import_jsx_runtime2.jsx)(Trash, {}),
              onClick: handleDelete
            }
          ]
        }
      ]
    }
  );
};
var columnHelper2 = createColumnHelper();
var useColumns = () => {
  const base = useCategoryTableColumns();
  return (0, import_react.useMemo)(
    () => [
      ...base,
      columnHelper2.display({
        id: "actions",
        cell: ({ row }) => {
          return (0, import_jsx_runtime2.jsx)(CategoryRowActions, { category: row.original });
        }
      })
    ],
    [base]
  );
};
var CategoryList = () => {
  return (0, import_jsx_runtime3.jsxs)("div", { className: "flex flex-col gap-y-2", children: [
    before.widgets.map((w, i) => {
      return (0, import_jsx_runtime3.jsx)("div", { children: (0, import_jsx_runtime3.jsx)(w.Component, {}) }, i);
    }),
    (0, import_jsx_runtime3.jsx)(CategoryListTable, {}),
    after.widgets.map((w, i) => {
      return (0, import_jsx_runtime3.jsx)("div", { children: (0, import_jsx_runtime3.jsx)(w.Component, {}) }, i);
    }),
    (0, import_jsx_runtime3.jsx)(Outlet, {})
  ] });
};
export {
  CategoryList as Component
};
//# sourceMappingURL=category-list-AMLMLIGZ-NNW7NUL7.js.map
