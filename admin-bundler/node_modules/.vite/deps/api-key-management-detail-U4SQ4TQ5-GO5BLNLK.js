import {
  getApiKeyStatusProps,
  getApiKeyTypeProps,
  prettifyRedactedToken
} from "./chunk-4GAFTK5F.js";
import {
  useSalesChannelTableColumns
} from "./chunk-TLUJIKG2.js";
import "./chunk-CKRB62SG.js";
import "./chunk-KTHKGBUF.js";
import "./chunk-4TA2GWZH.js";
import {
  useSalesChannelTableQuery
} from "./chunk-QOLDQVU6.js";
import {
  useSalesChannelTableFilters
} from "./chunk-OCUAOOGJ.js";
import {
  JsonViewSection
} from "./chunk-GV2TOR46.js";
import "./chunk-EGRHWZRV.js";
import "./chunk-QZUCBNNJ.js";
import {
  DataTable,
  useDataTable
} from "./chunk-JH6E7Y6M.js";
import "./chunk-EIGZCZHJ.js";
import "./chunk-CEIAMOT7.js";
import "./chunk-EYAVSJ2J.js";
import {
  createColumnHelper
} from "./chunk-TI6Y7EUW.js";
import "./chunk-JEFCFQ36.js";
import "./chunk-Z74QHE3B.js";
import "./chunk-6VC5CKXS.js";
import {
  useDate
} from "./chunk-4HJQONUH.js";
import "./chunk-IANM7SMM.js";
import "./chunk-O47TKOMU.js";
import {
  apiKeysQueryKeys,
  useApiKey,
  useBatchRemoveSalesChannelsFromApiKey,
  useDeleteApiKey,
  useRevokeApiKey
} from "./chunk-P5R3EHIV.js";
import {
  useUser
} from "./chunk-EFAG6P6Z.js";
import {
  GeneralSectionSkeleton,
  JsonViewSectionSkeleton,
  Skeleton,
  TableSectionSkeleton
} from "./chunk-YSLQHU2M.js";
import {
  ActionMenu
} from "./chunk-IE22HJTV.js";
import "./chunk-RLHQ5IGU.js";
import "./chunk-HZGR4LPF.js";
import "./chunk-3FGSU2DA.js";
import "./chunk-YUBPGLTM.js";
import "./chunk-K4BQKT4B.js";
import "./chunk-SWXOOP7W.js";
import "./chunk-ROURSU5C.js";
import {
  useSalesChannels
} from "./chunk-ABZDCU5X.js";
import "./chunk-3VJMO5NN.js";
import "./chunk-IH74SCJ5.js";
import {
  queryClient
} from "./chunk-4UMAAWOP.js";
import "./chunk-Y5OEN2X7.js";
import "./chunk-QDFILGGU.js";
import {
  keepPreviousData,
  sdk
} from "./chunk-ZSXFNTF6.js";
import {
  Avatar,
  Badge,
  Checkbox,
  Container,
  Copy,
  Heading,
  PencilSquare,
  Plus,
  StatusBadge,
  Text,
  Trash,
  XCircle,
  toast,
  usePrompt,
  useTranslation
} from "./chunk-ZUPX4YFG.js";
import {
  Link,
  Outlet,
  useLoaderData,
  useNavigate,
  useParams
} from "./chunk-HTGWU6KF.js";
import "./chunk-64MXM5QD.js";
import "./chunk-3VI6QF3M.js";
import {
  require_jsx_runtime
} from "./chunk-P6CFP5BP.js";
import {
  __toESM,
  require_react
} from "./chunk-H5NG3XTT.js";

// node_modules/@medusajs/dashboard/dist/api-key-management-detail-U4SQ4TQ5.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var import_react = __toESM(require_react(), 1);
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1);
import after from "virtual:medusa/widgets/api_key/details/after";
import before from "virtual:medusa/widgets/api_key/details/before";
var UserLink = ({
  id,
  first_name,
  last_name,
  email,
  type = "user"
}) => {
  const name = [first_name, last_name].filter(Boolean).join(" ");
  const fallback = name ? name.slice(0, 1) : email.slice(0, 1);
  const link = type === "user" ? `/settings/users/${id}` : `/customers/${id}`;
  return (0, import_jsx_runtime.jsxs)(
    Link,
    {
      to: link,
      className: "flex items-center gap-x-2 w-fit transition-fg hover:text-ui-fg-subtle outline-none focus-visible:shadow-borders-focus rounded-md",
      children: [
        (0, import_jsx_runtime.jsx)(Avatar, { size: "2xsmall", fallback: fallback.toUpperCase() }),
        (0, import_jsx_runtime.jsx)(Text, { size: "small", leading: "compact", weight: "regular", children: name || email })
      ]
    }
  );
};
var ApiKeyGeneralSection = ({ apiKey }) => {
  const { t } = useTranslation();
  const navigate = useNavigate();
  const prompt = usePrompt();
  const { getFullDate } = useDate();
  const { mutateAsync: revokeAsync } = useRevokeApiKey(apiKey.id);
  const { mutateAsync: deleteAsync } = useDeleteApiKey(apiKey.id);
  const handleDelete = async () => {
    const res = await prompt({
      title: t("general.areYouSure"),
      description: t("apiKeyManagement.delete.warning", {
        title: apiKey.title
      }),
      confirmText: t("actions.delete"),
      cancelText: t("actions.cancel")
    });
    if (!res) {
      return;
    }
    await deleteAsync(void 0, {
      onSuccess: () => {
        toast.success(
          t("apiKeyManagement.delete.successToast", {
            title: apiKey.title
          })
        );
        navigate("..", { replace: true });
      },
      onError: (err) => {
        toast.error(err.message);
      }
    });
  };
  const handleRevoke = async () => {
    const res = await prompt({
      title: t("general.areYouSure"),
      description: t("apiKeyManagement.revoke.warning", {
        title: apiKey.title
      }),
      confirmText: t("apiKeyManagement.actions.revoke"),
      cancelText: t("actions.cancel")
    });
    if (!res) {
      return;
    }
    await revokeAsync(void 0, {
      onSuccess: () => {
        toast.success(
          t("apiKeyManagement.revoke.successToast", {
            title: apiKey.title
          })
        );
      },
      onError: (err) => {
        toast.error(err.message);
      }
    });
  };
  const dangerousActions = [
    {
      icon: (0, import_jsx_runtime2.jsx)(Trash, {}),
      label: t("actions.delete"),
      onClick: handleDelete,
      disabled: !apiKey.revoked_at
    }
  ];
  if (!apiKey.revoked_at) {
    dangerousActions.unshift({
      icon: (0, import_jsx_runtime2.jsx)(XCircle, {}),
      label: t("apiKeyManagement.actions.revoke"),
      onClick: handleRevoke,
      disabled: !!apiKey.revoked_at
    });
  }
  const apiKeyStatus = getApiKeyStatusProps(apiKey.revoked_at, t);
  const apiKeyType = getApiKeyTypeProps(apiKey.type, t);
  return (0, import_jsx_runtime2.jsxs)(Container, { className: "divide-y p-0", children: [
    (0, import_jsx_runtime2.jsxs)("div", { className: "flex items-center justify-between px-6 py-4", children: [
      (0, import_jsx_runtime2.jsx)(Heading, { children: apiKey.title }),
      (0, import_jsx_runtime2.jsxs)("div", { className: "flex items-center gap-x-4", children: [
        (0, import_jsx_runtime2.jsx)("div", { className: "flex items-center gap-x-2", children: (0, import_jsx_runtime2.jsx)(StatusBadge, { color: apiKeyStatus.color, children: apiKeyStatus.label }) }),
        (0, import_jsx_runtime2.jsx)(
          ActionMenu,
          {
            groups: [
              {
                actions: [
                  {
                    label: t("actions.edit"),
                    icon: (0, import_jsx_runtime2.jsx)(PencilSquare, {}),
                    to: "edit"
                  }
                ]
              },
              {
                actions: dangerousActions
              }
            ]
          }
        )
      ] })
    ] }),
    (0, import_jsx_runtime2.jsxs)("div", { className: "text-ui-fg-subtle grid grid-cols-2 items-center px-6 py-4", children: [
      (0, import_jsx_runtime2.jsx)(Text, { size: "small", leading: "compact", weight: "plus", children: t("fields.key") }),
      apiKey.type === "secret" ? (0, import_jsx_runtime2.jsx)(Badge, { size: "2xsmall", className: "w-fit", children: prettifyRedactedToken(apiKey.redacted) }) : (0, import_jsx_runtime2.jsx)(Copy, { asChild: true, content: apiKey.token, children: (0, import_jsx_runtime2.jsx)(Badge, { size: "2xsmall", className: "w-fit max-w-40 cursor-pointer", children: (0, import_jsx_runtime2.jsx)(Text, { size: "xsmall", leading: "compact", className: "truncate", children: prettifyRedactedToken(apiKey.redacted) }) }) })
    ] }),
    (0, import_jsx_runtime2.jsxs)("div", { className: "text-ui-fg-subtle grid grid-cols-2 items-center px-6 py-4", children: [
      (0, import_jsx_runtime2.jsx)(Text, { size: "small", leading: "compact", weight: "plus", children: t("fields.type") }),
      (0, import_jsx_runtime2.jsx)(Text, { size: "small", leading: "compact", children: apiKeyType.label })
    ] }),
    (0, import_jsx_runtime2.jsxs)("div", { className: "text-ui-fg-subtle grid grid-cols-2 items-center px-6 py-4", children: [
      (0, import_jsx_runtime2.jsx)(Text, { size: "small", leading: "compact", weight: "plus", children: t("apiKeyManagement.fields.lastUsedAtLabel") }),
      (0, import_jsx_runtime2.jsx)(Text, { size: "small", leading: "compact", children: apiKey.last_used_at ? getFullDate({ date: apiKey.last_used_at, includeTime: true }) : "-" })
    ] }),
    (0, import_jsx_runtime2.jsxs)("div", { className: "text-ui-fg-subtle grid grid-cols-2 items-center px-6 py-4", children: [
      (0, import_jsx_runtime2.jsx)(Text, { size: "small", leading: "compact", weight: "plus", children: t("apiKeyManagement.fields.createdByLabel") }),
      (0, import_jsx_runtime2.jsx)(ActionBy, { userId: apiKey.created_by })
    ] }),
    apiKey.revoked_at && (0, import_jsx_runtime2.jsxs)(import_jsx_runtime2.Fragment, { children: [
      (0, import_jsx_runtime2.jsxs)("div", { className: "text-ui-fg-subtle grid grid-cols-2 items-center px-6 py-4", children: [
        (0, import_jsx_runtime2.jsx)(Text, { size: "small", leading: "compact", weight: "plus", children: t("apiKeyManagement.fields.revokedAtLabel") }),
        (0, import_jsx_runtime2.jsx)(Text, { size: "small", leading: "compact", children: getFullDate({ date: apiKey.revoked_at, includeTime: true }) })
      ] }),
      (0, import_jsx_runtime2.jsxs)("div", { className: "text-ui-fg-subtle grid grid-cols-2 items-center px-6 py-4", children: [
        (0, import_jsx_runtime2.jsx)(Text, { size: "small", leading: "compact", weight: "plus", children: t("apiKeyManagement.fields.revokedByLabel") }),
        (0, import_jsx_runtime2.jsx)(ActionBy, { userId: apiKey.revoked_by })
      ] })
    ] })
  ] });
};
var ActionBy = ({ userId }) => {
  const { user, isLoading, isError, error } = useUser(userId, void 0, {
    enabled: !!userId
  });
  if (!userId) {
    return (0, import_jsx_runtime2.jsx)(Text, { size: "small", className: "text-ui-fg-subtle", children: "-" });
  }
  if (isError) {
    throw error;
  }
  if (isLoading) {
    return (0, import_jsx_runtime2.jsxs)("div", { className: "grid grid-cols-[20px_1fr]", children: [
      (0, import_jsx_runtime2.jsx)(Skeleton, { className: "h-5 w-5 rounded-full" }),
      (0, import_jsx_runtime2.jsx)(Skeleton, { className: "w-full max-w-[220px]" })
    ] });
  }
  if (!user) {
    return (0, import_jsx_runtime2.jsx)(Text, { size: "small", className: "text-ui-fg-subtle", children: "-" });
  }
  return (0, import_jsx_runtime2.jsx)(UserLink, { ...user });
};
var PAGE_SIZE = 10;
var ApiKeySalesChannelSection = ({
  apiKey
}) => {
  const [rowSelection, setRowSelection] = (0, import_react.useState)({});
  const { t } = useTranslation();
  const prompt = usePrompt();
  const { raw, searchParams } = useSalesChannelTableQuery({
    pageSize: PAGE_SIZE
  });
  const { sales_channels, count, isLoading } = useSalesChannels(
    { ...searchParams, publishable_key_id: apiKey.id },
    {
      placeholderData: keepPreviousData
    }
  );
  const columns = useColumns();
  const filters = useSalesChannelTableFilters();
  const { table } = useDataTable({
    data: sales_channels ?? [],
    columns,
    count,
    enablePagination: true,
    enableRowSelection: true,
    getRowId: (row) => row.id,
    pageSize: PAGE_SIZE,
    rowSelection: {
      state: rowSelection,
      updater: setRowSelection
    },
    meta: {
      apiKey: apiKey.id
    }
  });
  const { mutateAsync } = useBatchRemoveSalesChannelsFromApiKey(apiKey.id);
  const handleRemove = async () => {
    const keys = Object.keys(rowSelection);
    const res = await prompt({
      title: t("general.areYouSure"),
      description: t("apiKeyManagement.removeSalesChannel.warningBatch", {
        count: keys.length
      }),
      confirmText: t("actions.continue"),
      cancelText: t("actions.cancel")
    });
    if (!res) {
      return;
    }
    await mutateAsync(keys, {
      onSuccess: () => {
        toast.success(
          t("apiKeyManagement.removeSalesChannel.successToastBatch", {
            count: keys.length
          })
        );
        setRowSelection({});
      },
      onError: (err) => {
        toast.error(err.message);
      }
    });
  };
  return (0, import_jsx_runtime3.jsxs)(Container, { className: "divide-y p-0", children: [
    (0, import_jsx_runtime3.jsxs)("div", { className: "flex items-center justify-between px-6 py-4", children: [
      (0, import_jsx_runtime3.jsx)(Heading, { level: "h2", children: t("salesChannels.domain") }),
      (0, import_jsx_runtime3.jsx)(
        ActionMenu,
        {
          groups: [
            {
              actions: [
                {
                  icon: (0, import_jsx_runtime3.jsx)(Plus, {}),
                  label: t("actions.add"),
                  to: "sales-channels"
                }
              ]
            }
          ]
        }
      )
    ] }),
    (0, import_jsx_runtime3.jsx)(
      DataTable,
      {
        table,
        columns,
        filters,
        count,
        isLoading,
        queryObject: raw,
        navigateTo: (row) => `/settings/sales-channels/${row.id}`,
        orderBy: ["name", "created_at", "updated_at"],
        commands: [
          {
            action: handleRemove,
            label: t("actions.remove"),
            shortcut: "r"
          }
        ],
        pageSize: PAGE_SIZE,
        pagination: true,
        search: true,
        noRecords: {
          message: t("apiKeyManagement.salesChannels.list.noRecordsMessage")
        }
      }
    )
  ] });
};
var SalesChannelActions = ({
  salesChannel,
  apiKey
}) => {
  const { t } = useTranslation();
  const prompt = usePrompt();
  const { mutateAsync } = useBatchRemoveSalesChannelsFromApiKey(apiKey);
  const handleDelete = async () => {
    const res = await prompt({
      title: t("general.areYouSure"),
      description: t("apiKeyManagement.removeSalesChannel.warning", {
        name: salesChannel.name
      }),
      confirmText: t("actions.delete"),
      cancelText: t("actions.cancel")
    });
    if (!res) {
      return;
    }
    await mutateAsync([salesChannel.id], {
      onSuccess: () => {
        toast.success(
          t("apiKeyManagement.removeSalesChannel.successToast", {
            count: 1
          })
        );
      },
      onError: (err) => {
        toast.error(err.message);
      }
    });
  };
  return (0, import_jsx_runtime3.jsx)(
    ActionMenu,
    {
      groups: [
        {
          actions: [
            {
              icon: (0, import_jsx_runtime3.jsx)(PencilSquare, {}),
              label: t("actions.edit"),
              to: `/settings/sales-channels/${salesChannel.id}/edit`
            }
          ]
        },
        {
          actions: [
            {
              icon: (0, import_jsx_runtime3.jsx)(Trash, {}),
              label: t("actions.delete"),
              onClick: handleDelete
            }
          ]
        }
      ]
    }
  );
};
var columnHelper = createColumnHelper();
var useColumns = () => {
  const base = useSalesChannelTableColumns();
  return (0, import_react.useMemo)(
    () => [
      columnHelper.display({
        id: "select",
        header: ({ table }) => {
          return (0, import_jsx_runtime3.jsx)(
            Checkbox,
            {
              checked: table.getIsSomePageRowsSelected() ? "indeterminate" : table.getIsAllPageRowsSelected(),
              onCheckedChange: (value) => table.toggleAllPageRowsSelected(!!value)
            }
          );
        },
        cell: ({ row }) => {
          return (0, import_jsx_runtime3.jsx)(
            Checkbox,
            {
              checked: row.getIsSelected(),
              onCheckedChange: (value) => row.toggleSelected(!!value),
              onClick: (e) => {
                e.stopPropagation();
              }
            }
          );
        }
      }),
      ...base,
      columnHelper.display({
        id: "actions",
        cell: ({ row, table }) => {
          const { apiKey } = table.options.meta;
          return (0, import_jsx_runtime3.jsx)(SalesChannelActions, { salesChannel: row.original, apiKey });
        }
      })
    ],
    [base]
  );
};
var ApiKeyManagementDetail = () => {
  const initialData = useLoaderData();
  const { id } = useParams();
  const { api_key, isLoading, isError, error } = useApiKey(id, void 0, {
    initialData
  });
  if (isLoading || !api_key) {
    return (0, import_jsx_runtime4.jsxs)("div", { className: "flex flex-col gap-y-2", children: [
      (0, import_jsx_runtime4.jsx)(GeneralSectionSkeleton, { rowCount: 4 }),
      (0, import_jsx_runtime4.jsx)(TableSectionSkeleton, {}),
      (0, import_jsx_runtime4.jsx)(JsonViewSectionSkeleton, {})
    ] });
  }
  const isPublishable = (api_key == null ? void 0 : api_key.type) === "publishable";
  if (isError) {
    throw error;
  }
  return (0, import_jsx_runtime4.jsxs)("div", { className: "flex flex-col gap-y-2", children: [
    before.widgets.map((w, i) => {
      return (0, import_jsx_runtime4.jsx)("div", { children: (0, import_jsx_runtime4.jsx)(w.Component, { apiKey: api_key }) }, i);
    }),
    (0, import_jsx_runtime4.jsx)(ApiKeyGeneralSection, { apiKey: api_key }),
    isPublishable && (0, import_jsx_runtime4.jsx)(ApiKeySalesChannelSection, { apiKey: api_key }),
    after.widgets.map((w, i) => {
      return (0, import_jsx_runtime4.jsx)("div", { children: (0, import_jsx_runtime4.jsx)(w.Component, { apiKey: api_key }) }, i);
    }),
    (0, import_jsx_runtime4.jsx)(JsonViewSection, { data: api_key }),
    (0, import_jsx_runtime4.jsx)(Outlet, {})
  ] });
};
var apiKeyDetailQuery = (id) => ({
  queryKey: apiKeysQueryKeys.detail(id),
  queryFn: async () => sdk.admin.apiKey.retrieve(id)
});
var apiKeyLoader = async ({ params }) => {
  const id = params.id;
  const query = apiKeyDetailQuery(id);
  return queryClient.getQueryData(query.queryKey) ?? await queryClient.fetchQuery(query);
};
export {
  ApiKeyManagementDetail as Component,
  apiKeyLoader as loader
};
//# sourceMappingURL=api-key-management-detail-U4SQ4TQ5-GO5BLNLK.js.map
