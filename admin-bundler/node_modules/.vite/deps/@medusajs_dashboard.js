import {
  taxRegionLoader
} from "./chunk-HPOVTD7Z.js";
import {
  getProvinceByIso2,
  isProvinceInCountry
} from "./chunk-MK352NRO.js";
import {
  require_debounce
} from "./chunk-2T2WSTEX.js";
import {
  I18n
} from "./chunk-QUYQ44V5.js";
import {
  Close,
  Content,
  Description,
  Overlay,
  Portal2,
  Root,
  Title
} from "./chunk-7PAMQDEU.js";
import {
  ConditionalTooltip
} from "./chunk-O47TKOMU.js";
import {
  FilePreview
} from "./chunk-EBJHLWEP.js";
import {
  Divider
} from "./chunk-LRCLMHMB.js";
import {
  notificationQueryKeys,
  useNotifications
} from "./chunk-E26TGYVV.js";
import "./chunk-BCDFWL4W.js";
import "./chunk-VOJT3GRC.js";
import "./chunk-4I3TSILH.js";
import "./chunk-P5R3EHIV.js";
import "./chunk-2TBOMIQA.js";
import "./chunk-7VADNSL7.js";
import "./chunk-AJ3DXG4K.js";
import "./chunk-FYV5O3WI.js";
import "./chunk-ENW5Z6NU.js";
import "./chunk-MKU523AN.js";
import {
  useMe
} from "./chunk-EFAG6P6Z.js";
import "./chunk-NJ7HRVAN.js";
import "./chunk-KNWZIBC3.js";
import "./chunk-5RUNMRCW.js";
import "./chunk-CFFZHLR2.js";
import "./chunk-YEEFU7KP.js";
import "./chunk-6MTGJSDM.js";
import "./chunk-Z34GYBFG.js";
import "./chunk-VN2HND4I.js";
import "./chunk-ACJP53PC.js";
import "./chunk-3AX2W3RD.js";
import {
  useStore
} from "./chunk-ICPBA7GK.js";
import "./chunk-FREJU5EQ.js";
import "./chunk-4UBJQZN6.js";
import "./chunk-QSXBBOKN.js";
import {
  productLoader
} from "./chunk-6TGDJN3A.js";
import {
  getCountryByIso2
} from "./chunk-PCCLBZD7.js";
import "./chunk-L2IFA5EY.js";
import {
  Skeleton
} from "./chunk-YSLQHU2M.js";
import "./chunk-IE22HJTV.js";
import {
  we
} from "./chunk-RLHQ5IGU.js";
import {
  languages
} from "./chunk-HZGR4LPF.js";
import {
  formatDistance
} from "./chunk-3FGSU2DA.js";
import "./chunk-YUBPGLTM.js";
import "./chunk-K4BQKT4B.js";
import "./chunk-SWXOOP7W.js";
import "./chunk-ROURSU5C.js";
import "./chunk-ABZDCU5X.js";
import "./chunk-3VJMO5NN.js";
import "./chunk-IH74SCJ5.js";
import {
  queryClient
} from "./chunk-4UMAAWOP.js";
import "./chunk-Y5OEN2X7.js";
import {
  isFetchError
} from "./chunk-LGRZWXKE.js";
import {
  useLogout
} from "./chunk-2ZDF4QRQ.js";
import "./chunk-QDFILGGU.js";
import {
  QueryClientProvider,
  sdk,
  useInfiniteQuery
} from "./chunk-ZSXFNTF6.js";
import {
  ArrowUturnLeft,
  Avatar,
  Badge,
  BellAlert,
  BellAlertDone,
  BookOpen,
  BuildingStorefront,
  Buildings,
  ChevronDownMini,
  CircleHalfSolid,
  CogSixTooth,
  Content as Content2,
  CurrencyDollar,
  Drawer,
  DropdownMenu,
  EllipsisHorizontal,
  ExclamationCircle,
  Heading,
  I18nProvider,
  IconButton,
  InformationCircleSolid,
  Input,
  Kbd,
  Keyboard,
  MagnifyingGlass,
  MinusMini,
  OpenRectArrowOut,
  ReceiptPercent,
  Root as Root2,
  ShoppingCart,
  SidebarLeft,
  Spinner,
  SquaresPlus,
  Tag,
  Text,
  TimelineVertical,
  Toaster,
  TooltipProvider,
  TriangleRightMini,
  Trigger,
  User,
  Users,
  XMark,
  clx,
  toast,
  useTranslation
} from "./chunk-ZUPX4YFG.js";
import {
  Link,
  NavLink,
  Navigate,
  Outlet,
  RouterProvider,
  createBrowserRouter,
  useLocation,
  useMatches,
  useNavigate,
  useRouteError
} from "./chunk-HTGWU6KF.js";
import "./chunk-64MXM5QD.js";
import "./chunk-3VI6QF3M.js";
import {
  require_jsx_runtime
} from "./chunk-P6CFP5BP.js";
import {
  __commonJS,
  __publicField,
  __toESM,
  require_react
} from "./chunk-H5NG3XTT.js";

// node_modules/react-fast-compare/index.js
var require_react_fast_compare = __commonJS({
  "node_modules/react-fast-compare/index.js"(exports, module) {
    var hasElementType = typeof Element !== "undefined";
    var hasMap = typeof Map === "function";
    var hasSet = typeof Set === "function";
    var hasArrayBuffer = typeof ArrayBuffer === "function" && !!ArrayBuffer.isView;
    function equal(a, b) {
      if (a === b) return true;
      if (a && b && typeof a == "object" && typeof b == "object") {
        if (a.constructor !== b.constructor) return false;
        var length, i, keys;
        if (Array.isArray(a)) {
          length = a.length;
          if (length != b.length) return false;
          for (i = length; i-- !== 0; )
            if (!equal(a[i], b[i])) return false;
          return true;
        }
        var it;
        if (hasMap && a instanceof Map && b instanceof Map) {
          if (a.size !== b.size) return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0])) return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!equal(i.value[1], b.get(i.value[0]))) return false;
          return true;
        }
        if (hasSet && a instanceof Set && b instanceof Set) {
          if (a.size !== b.size) return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0])) return false;
          return true;
        }
        if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
          length = a.length;
          if (length != b.length) return false;
          for (i = length; i-- !== 0; )
            if (a[i] !== b[i]) return false;
          return true;
        }
        if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf && typeof a.valueOf === "function" && typeof b.valueOf === "function") return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString && typeof a.toString === "function" && typeof b.toString === "function") return a.toString() === b.toString();
        keys = Object.keys(a);
        length = keys.length;
        if (length !== Object.keys(b).length) return false;
        for (i = length; i-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;
        if (hasElementType && a instanceof Element) return false;
        for (i = length; i-- !== 0; ) {
          if ((keys[i] === "_owner" || keys[i] === "__v" || keys[i] === "__o") && a.$$typeof) {
            continue;
          }
          if (!equal(a[keys[i]], b[keys[i]])) return false;
        }
        return true;
      }
      return a !== a && b !== b;
    }
    module.exports = function isEqual(a, b) {
      try {
        return equal(a, b);
      } catch (error) {
        if ((error.message || "").match(/stack|recursion/i)) {
          console.warn("react-fast-compare cannot handle circular refs");
          return false;
        }
        throw error;
      }
    };
  }
});

// node_modules/invariant/browser.js
var require_browser = __commonJS({
  "node_modules/invariant/browser.js"(exports, module) {
    "use strict";
    var invariant2 = function(condition, format, a, b, c, d, e, f) {
      if (true) {
        if (format === void 0) {
          throw new Error("invariant requires an error message argument");
        }
      }
      if (!condition) {
        var error;
        if (format === void 0) {
          error = new Error(
            "Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings."
          );
        } else {
          var args = [a, b, c, d, e, f];
          var argIndex = 0;
          error = new Error(
            format.replace(/%s/g, function() {
              return args[argIndex++];
            })
          );
          error.name = "Invariant Violation";
        }
        error.framesToPop = 1;
        throw error;
      }
    };
    module.exports = invariant2;
  }
});

// node_modules/shallowequal/index.js
var require_shallowequal = __commonJS({
  "node_modules/shallowequal/index.js"(exports, module) {
    module.exports = function shallowEqual2(objA, objB, compare, compareContext) {
      var ret = compare ? compare.call(compareContext, objA, objB) : void 0;
      if (ret !== void 0) {
        return !!ret;
      }
      if (objA === objB) {
        return true;
      }
      if (typeof objA !== "object" || !objA || typeof objB !== "object" || !objB) {
        return false;
      }
      var keysA = Object.keys(objA);
      var keysB = Object.keys(objB);
      if (keysA.length !== keysB.length) {
        return false;
      }
      var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);
      for (var idx = 0; idx < keysA.length; idx++) {
        var key = keysA[idx];
        if (!bHasOwnProperty(key)) {
          return false;
        }
        var valueA = objA[key];
        var valueB = objB[key];
        ret = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;
        if (ret === false || ret === void 0 && valueA !== valueB) {
          return false;
        }
      }
      return true;
    };
  }
});

// node_modules/react-helmet-async/lib/index.esm.js
var import_react = __toESM(require_react());
var import_react_fast_compare = __toESM(require_react_fast_compare());
var import_invariant = __toESM(require_browser());
var import_react2 = __toESM(require_react());
var import_react3 = __toESM(require_react());
var import_react4 = __toESM(require_react());
var import_shallowequal = __toESM(require_shallowequal());
var TAG_NAMES = ((TAG_NAMES2) => {
  TAG_NAMES2["BASE"] = "base";
  TAG_NAMES2["BODY"] = "body";
  TAG_NAMES2["HEAD"] = "head";
  TAG_NAMES2["HTML"] = "html";
  TAG_NAMES2["LINK"] = "link";
  TAG_NAMES2["META"] = "meta";
  TAG_NAMES2["NOSCRIPT"] = "noscript";
  TAG_NAMES2["SCRIPT"] = "script";
  TAG_NAMES2["STYLE"] = "style";
  TAG_NAMES2["TITLE"] = "title";
  TAG_NAMES2["FRAGMENT"] = "Symbol(react.fragment)";
  return TAG_NAMES2;
})(TAG_NAMES || {});
var SEO_PRIORITY_TAGS = {
  link: { rel: ["amphtml", "canonical", "alternate"] },
  script: { type: ["application/ld+json"] },
  meta: {
    charset: "",
    name: ["generator", "robots", "description"],
    property: [
      "og:type",
      "og:title",
      "og:url",
      "og:image",
      "og:image:alt",
      "og:description",
      "twitter:url",
      "twitter:title",
      "twitter:description",
      "twitter:image",
      "twitter:image:alt",
      "twitter:card",
      "twitter:site"
    ]
  }
};
var VALID_TAG_NAMES = Object.values(TAG_NAMES);
var REACT_TAG_MAP = {
  accesskey: "accessKey",
  charset: "charSet",
  class: "className",
  contenteditable: "contentEditable",
  contextmenu: "contextMenu",
  "http-equiv": "httpEquiv",
  itemprop: "itemProp",
  tabindex: "tabIndex"
};
var HTML_TAG_MAP = Object.entries(REACT_TAG_MAP).reduce(
  (carry, [key, value]) => {
    carry[value] = key;
    return carry;
  },
  {}
);
var HELMET_ATTRIBUTE = "data-rh";
var flattenArray = (possibleArray) => Array.isArray(possibleArray) ? possibleArray.join("") : possibleArray;
var checkIfPropsMatch = (props, toMatch) => {
  const keys = Object.keys(props);
  for (let i = 0; i < keys.length; i += 1) {
    if (toMatch[keys[i]] && toMatch[keys[i]].includes(props[keys[i]])) {
      return true;
    }
  }
  return false;
};
var prioritizer = (elementsList, propsToMatch) => {
  if (Array.isArray(elementsList)) {
    return elementsList.reduce(
      (acc, elementAttrs) => {
        if (checkIfPropsMatch(elementAttrs, propsToMatch)) {
          acc.priority.push(elementAttrs);
        } else {
          acc.default.push(elementAttrs);
        }
        return acc;
      },
      { priority: [], default: [] }
    );
  }
  return { default: elementsList, priority: [] };
};
var SELF_CLOSING_TAGS = [
  "noscript",
  "script",
  "style"
  /* STYLE */
];
var encodeSpecialCharacters = (str, encode = true) => {
  if (encode === false) {
    return String(str);
  }
  return String(str).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#x27;");
};
var generateElementAttributesAsString = (attributes) => Object.keys(attributes).reduce((str, key) => {
  const attr = typeof attributes[key] !== "undefined" ? `${key}="${attributes[key]}"` : `${key}`;
  return str ? `${str} ${attr}` : attr;
}, "");
var generateTitleAsString = (type, title, attributes, encode) => {
  const attributeString = generateElementAttributesAsString(attributes);
  const flattenedTitle = flattenArray(title);
  return attributeString ? `<${type} ${HELMET_ATTRIBUTE}="true" ${attributeString}>${encodeSpecialCharacters(
    flattenedTitle,
    encode
  )}</${type}>` : `<${type} ${HELMET_ATTRIBUTE}="true">${encodeSpecialCharacters(
    flattenedTitle,
    encode
  )}</${type}>`;
};
var generateTagsAsString = (type, tags, encode = true) => tags.reduce((str, t) => {
  const tag = t;
  const attributeHtml = Object.keys(tag).filter(
    (attribute) => !(attribute === "innerHTML" || attribute === "cssText")
  ).reduce((string, attribute) => {
    const attr = typeof tag[attribute] === "undefined" ? attribute : `${attribute}="${encodeSpecialCharacters(tag[attribute], encode)}"`;
    return string ? `${string} ${attr}` : attr;
  }, "");
  const tagContent = tag.innerHTML || tag.cssText || "";
  const isSelfClosing = SELF_CLOSING_TAGS.indexOf(type) === -1;
  return `${str}<${type} ${HELMET_ATTRIBUTE}="true" ${attributeHtml}${isSelfClosing ? `/>` : `>${tagContent}</${type}>`}`;
}, "");
var convertElementAttributesToReactProps = (attributes, initProps = {}) => Object.keys(attributes).reduce((obj, key) => {
  const mapped = REACT_TAG_MAP[key];
  obj[mapped || key] = attributes[key];
  return obj;
}, initProps);
var generateTitleAsReactComponent = (_type, title, attributes) => {
  const initProps = {
    key: title,
    [HELMET_ATTRIBUTE]: true
  };
  const props = convertElementAttributesToReactProps(attributes, initProps);
  return [import_react3.default.createElement("title", props, title)];
};
var generateTagsAsReactComponent = (type, tags) => tags.map((tag, i) => {
  const mappedTag = {
    key: i,
    [HELMET_ATTRIBUTE]: true
  };
  Object.keys(tag).forEach((attribute) => {
    const mapped = REACT_TAG_MAP[attribute];
    const mappedAttribute = mapped || attribute;
    if (mappedAttribute === "innerHTML" || mappedAttribute === "cssText") {
      const content = tag.innerHTML || tag.cssText;
      mappedTag.dangerouslySetInnerHTML = { __html: content };
    } else {
      mappedTag[mappedAttribute] = tag[attribute];
    }
  });
  return import_react3.default.createElement(type, mappedTag);
});
var getMethodsForTag = (type, tags, encode = true) => {
  switch (type) {
    case "title":
      return {
        toComponent: () => generateTitleAsReactComponent(type, tags.title, tags.titleAttributes),
        toString: () => generateTitleAsString(type, tags.title, tags.titleAttributes, encode)
      };
    case "bodyAttributes":
    case "htmlAttributes":
      return {
        toComponent: () => convertElementAttributesToReactProps(tags),
        toString: () => generateElementAttributesAsString(tags)
      };
    default:
      return {
        toComponent: () => generateTagsAsReactComponent(type, tags),
        toString: () => generateTagsAsString(type, tags, encode)
      };
  }
};
var getPriorityMethods = ({ metaTags, linkTags, scriptTags, encode }) => {
  const meta = prioritizer(metaTags, SEO_PRIORITY_TAGS.meta);
  const link = prioritizer(linkTags, SEO_PRIORITY_TAGS.link);
  const script = prioritizer(scriptTags, SEO_PRIORITY_TAGS.script);
  const priorityMethods = {
    toComponent: () => [
      ...generateTagsAsReactComponent("meta", meta.priority),
      ...generateTagsAsReactComponent("link", link.priority),
      ...generateTagsAsReactComponent("script", script.priority)
    ],
    toString: () => (
      // generate all the tags as strings and concatenate them
      `${getMethodsForTag("meta", meta.priority, encode)} ${getMethodsForTag(
        "link",
        link.priority,
        encode
      )} ${getMethodsForTag("script", script.priority, encode)}`
    )
  };
  return {
    priorityMethods,
    metaTags: meta.default,
    linkTags: link.default,
    scriptTags: script.default
  };
};
var mapStateOnServer = (props) => {
  const {
    baseTag,
    bodyAttributes,
    encode = true,
    htmlAttributes,
    noscriptTags,
    styleTags,
    title = "",
    titleAttributes,
    prioritizeSeoTags
  } = props;
  let { linkTags, metaTags, scriptTags } = props;
  let priorityMethods = {
    toComponent: () => {
    },
    toString: () => ""
  };
  if (prioritizeSeoTags) {
    ({ priorityMethods, linkTags, metaTags, scriptTags } = getPriorityMethods(props));
  }
  return {
    priority: priorityMethods,
    base: getMethodsForTag("base", baseTag, encode),
    bodyAttributes: getMethodsForTag("bodyAttributes", bodyAttributes, encode),
    htmlAttributes: getMethodsForTag("htmlAttributes", htmlAttributes, encode),
    link: getMethodsForTag("link", linkTags, encode),
    meta: getMethodsForTag("meta", metaTags, encode),
    noscript: getMethodsForTag("noscript", noscriptTags, encode),
    script: getMethodsForTag("script", scriptTags, encode),
    style: getMethodsForTag("style", styleTags, encode),
    title: getMethodsForTag("title", { title, titleAttributes }, encode)
  };
};
var server_default = mapStateOnServer;
var instances = [];
var isDocument = !!(typeof window !== "undefined" && window.document && window.document.createElement);
var HelmetData = class {
  constructor(context, canUseDOM) {
    __publicField(this, "instances", []);
    __publicField(this, "canUseDOM", isDocument);
    __publicField(this, "context");
    __publicField(this, "value", {
      setHelmet: (serverState) => {
        this.context.helmet = serverState;
      },
      helmetInstances: {
        get: () => this.canUseDOM ? instances : this.instances,
        add: (instance) => {
          (this.canUseDOM ? instances : this.instances).push(instance);
        },
        remove: (instance) => {
          const index = (this.canUseDOM ? instances : this.instances).indexOf(instance);
          (this.canUseDOM ? instances : this.instances).splice(index, 1);
        }
      }
    });
    this.context = context;
    this.canUseDOM = canUseDOM || false;
    if (!canUseDOM) {
      context.helmet = server_default({
        baseTag: [],
        bodyAttributes: {},
        encodeSpecialCharacters: true,
        htmlAttributes: {},
        linkTags: [],
        metaTags: [],
        noscriptTags: [],
        scriptTags: [],
        styleTags: [],
        title: "",
        titleAttributes: {}
      });
    }
  }
};
var defaultValue = {};
var Context = import_react2.default.createContext(defaultValue);
var _a;
var HelmetProvider = (_a = class extends import_react2.Component {
  constructor(props) {
    super(props);
    __publicField(this, "helmetData");
    this.helmetData = new HelmetData(this.props.context || {}, _a.canUseDOM);
  }
  render() {
    return import_react2.default.createElement(Context.Provider, { value: this.helmetData.value }, this.props.children);
  }
}, __publicField(_a, "canUseDOM", isDocument), _a);

// node_modules/@medusajs/dashboard/dist/app.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_react5 = __toESM(require_react(), 1);
var import_react6 = __toESM(require_react(), 1);
var import_debounce = __toESM(require_debounce(), 1);
var import_react7 = __toESM(require_react(), 1);
var import_react8 = __toESM(require_react(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var import_react9 = __toESM(require_react(), 1);
var import_react10 = __toESM(require_react(), 1);
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
var import_react11 = __toESM(require_react(), 1);
var import_react12 = __toESM(require_react(), 1);
var import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1);
var import_react13 = __toESM(require_react(), 1);
var import_jsx_runtime5 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime6 = __toESM(require_jsx_runtime(), 1);
var import_react14 = __toESM(require_react(), 1);
var import_jsx_runtime7 = __toESM(require_jsx_runtime(), 1);
var import_react15 = __toESM(require_react(), 1);
var import_jsx_runtime8 = __toESM(require_jsx_runtime(), 1);
var import_react16 = __toESM(require_react(), 1);
var import_react17 = __toESM(require_react(), 1);
var import_jsx_runtime9 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime10 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime11 = __toESM(require_jsx_runtime(), 1);
import routes from "virtual:medusa/routes/links";
var import_react18 = __toESM(require_react(), 1);
var import_react19 = __toESM(require_react(), 1);
var import_react20 = __toESM(require_react(), 1);
var import_jsx_runtime12 = __toESM(require_jsx_runtime(), 1);
var import_react21 = __toESM(require_react(), 1);
var import_jsx_runtime13 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime14 = __toESM(require_jsx_runtime(), 1);
var import_react22 = __toESM(require_react(), 1);
var import_jsx_runtime15 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime16 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime17 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime18 = __toESM(require_jsx_runtime(), 1);
import routes2 from "virtual:medusa/routes/links";
import routes3 from "virtual:medusa/routes/pages";
import routes4 from "virtual:medusa/routes/pages";
var I18nProvider2 = ({ children }) => {
  var _a2;
  const { i18n } = useTranslation();
  const locale = ((_a2 = languages.find((lan) => lan.code === i18n.language)) == null ? void 0 : _a2.code) || languages[0].code;
  return (0, import_jsx_runtime.jsx)(I18nProvider, { locale, children });
};
var KeybindContext = (0, import_react8.createContext)(null);
var findFirstPlatformMatch = (keys) => {
  const match = Object.entries(keys).filter(
    ([, value]) => value.length > 0
  )[0] ?? [];
  return match.length ? {
    platform: match[0],
    keys: match[1]
  } : null;
};
var getShortcutKeys = (shortcut) => {
  const platform = "Mac";
  const keys = shortcut.keys[platform];
  if (!keys) {
    const defaultPlatform = findFirstPlatformMatch(shortcut.keys);
    console.warn(
      `No keys found for platform "${platform}" in "${shortcut.label}" ${defaultPlatform ? `using keys for platform "${defaultPlatform.platform}"` : ""}`
    );
    return defaultPlatform ? defaultPlatform.keys : [];
  }
  return keys;
};
var keysMatch = (keys1, keys2) => {
  return keys1.length === keys2.length && keys1.every(
    (key, index) => key.toLowerCase() === keys2[index].toLowerCase()
  );
};
var findShortcutIndex = (shortcuts, keys) => {
  if (!keys.length) {
    return -1;
  }
  let index = 0;
  for (const shortcut of shortcuts) {
    const shortcutKeys = getShortcutKeys(shortcut);
    if (keysMatch(shortcutKeys, keys)) {
      return index;
    }
    index++;
  }
  return -1;
};
var findShortcut = (shortcuts, keys) => {
  const shortcutIndex = findShortcutIndex(shortcuts, keys);
  return shortcutIndex > -1 ? shortcuts[shortcutIndex] : null;
};
var getShortcutWithDefaultValues = (shortcut, platform = "Mac") => {
  const platforms = ["Mac", "Windows", "Linux"];
  const defaultKeys = Object.values(shortcut.keys)[0] ?? shortcut.keys[platform];
  const keys = platforms.reduce((acc, curr) => {
    return {
      ...acc,
      [curr]: shortcut.keys[curr] ?? defaultKeys
    };
  }, {});
  return {
    ...shortcut,
    keys,
    _defaultKeys: shortcut.keys
  };
};
var useShortcuts = ({
  shortcuts = [],
  debounce
}) => {
  const [keys, setKeys] = (0, import_react7.useState)([]);
  const navigate = useNavigate();
  const removeKeys = (0, import_react7.useCallback)(
    (0, import_debounce.default)(() => setKeys([]), debounce),
    []
  );
  const invokeShortcut = (0, import_react7.useCallback)(
    (0, import_debounce.default)((shortcut) => {
      if (shortcut && shortcut.callback) {
        shortcut.callback();
        setKeys([]);
        return;
      }
      if (shortcut && shortcut.to) {
        navigate(shortcut.to);
        setKeys([]);
        return;
      }
    }, debounce / 2),
    []
  );
  (0, import_react7.useEffect)(() => {
    if (keys.length > 0 && shortcuts.length > 0) {
      const shortcut = findShortcut(shortcuts, keys);
      invokeShortcut(shortcut);
    }
    return () => invokeShortcut.cancel();
  }, [keys, shortcuts, invokeShortcut]);
  (0, import_react7.useEffect)(() => {
    const listener = (event) => {
      const target = event.target;
      if (target.tagName === "INPUT" || target.tagName === "TEXTAREA" || target.contentEditable === "true") {
        removeKeys();
        return;
      }
      setKeys((oldKeys) => [...oldKeys, event.key]);
      removeKeys();
    };
    window.addEventListener("keydown", listener);
    return () => {
      window.removeEventListener("keydown", listener);
    };
  }, [removeKeys]);
};
var useGlobalShortcuts = () => {
  const { t } = useTranslation();
  const navigate = useNavigate();
  const { mutateAsync } = useLogout();
  const handleLogout = async () => {
    await mutateAsync(void 0, {
      onSuccess: () => {
        queryClient.clear();
        navigate("/login");
      }
    });
  };
  const globalShortcuts = [
    // Pages
    {
      keys: {
        Mac: ["G", "O"]
      },
      label: t("app.keyboardShortcuts.navigation.goToOrders"),
      type: "pageShortcut",
      to: "/orders"
    },
    {
      keys: {
        Mac: ["G", "P"]
      },
      label: t("app.keyboardShortcuts.navigation.goToProducts"),
      type: "pageShortcut",
      to: "/products"
    },
    {
      keys: {
        Mac: ["G", "C"]
      },
      label: t("app.keyboardShortcuts.navigation.goToCollections"),
      type: "pageShortcut",
      to: "/collections"
    },
    {
      keys: {
        Mac: ["G", "A"]
      },
      label: t("app.keyboardShortcuts.navigation.goToCategories"),
      type: "pageShortcut",
      to: "/categories"
    },
    {
      keys: {
        Mac: ["G", "U"]
      },
      label: t("app.keyboardShortcuts.navigation.goToCustomers"),
      type: "pageShortcut",
      to: "/customers"
    },
    {
      keys: {
        Mac: ["G", "G"]
      },
      label: t("app.keyboardShortcuts.navigation.goToCustomerGroups"),
      type: "pageShortcut",
      to: "/customer-groups"
    },
    {
      keys: {
        Mac: ["G", "I"]
      },
      label: t("app.keyboardShortcuts.navigation.goToInventory"),
      type: "pageShortcut",
      to: "/inventory"
    },
    {
      keys: {
        Mac: ["G", "R"]
      },
      label: t("app.keyboardShortcuts.navigation.goToReservations"),
      type: "pageShortcut",
      to: "/reservations"
    },
    {
      keys: {
        Mac: ["G", "L"]
      },
      label: t("app.keyboardShortcuts.navigation.goToPriceLists"),
      type: "pageShortcut",
      to: "/price-lists"
    },
    {
      keys: {
        Mac: ["G", "M"]
      },
      label: t("app.keyboardShortcuts.navigation.goToPromotions"),
      type: "pageShortcut",
      to: "/promotions"
    },
    {
      keys: {
        Mac: ["G", "K"]
      },
      label: t("app.keyboardShortcuts.navigation.goToCampaigns"),
      type: "pageShortcut",
      to: "/campaigns"
    },
    // Settings
    {
      keys: {
        Mac: ["G", ","]
      },
      label: t("app.keyboardShortcuts.settings.goToSettings"),
      type: "settingShortcut",
      to: "/settings"
    },
    {
      keys: {
        Mac: ["G", ",", "S"]
      },
      label: t("app.keyboardShortcuts.settings.goToStore"),
      type: "settingShortcut",
      to: "/settings/store"
    },
    {
      keys: {
        Mac: ["G", ",", "U"]
      },
      label: t("app.keyboardShortcuts.settings.goToUsers"),
      type: "settingShortcut",
      to: "/settings/users"
    },
    {
      keys: {
        Mac: ["G", ",", "R"]
      },
      label: t("app.keyboardShortcuts.settings.goToRegions"),
      type: "settingShortcut",
      to: "/settings/regions"
    },
    {
      keys: {
        Mac: ["G", ",", "T"]
      },
      label: t("app.keyboardShortcuts.settings.goToTaxRegions"),
      type: "settingShortcut",
      to: "/settings/tax-regions"
    },
    {
      keys: {
        Mac: ["G", ",", "A"]
      },
      label: t("app.keyboardShortcuts.settings.goToSalesChannels"),
      type: "settingShortcut",
      to: "/settings/sales-channels"
    },
    {
      keys: {
        Mac: ["G", ",", "P"]
      },
      label: t("app.keyboardShortcuts.settings.goToProductTypes"),
      type: "settingShortcut",
      to: "/settings/product-types"
    },
    {
      keys: {
        Mac: ["G", ",", "L"]
      },
      label: t("app.keyboardShortcuts.settings.goToLocations"),
      type: "settingShortcut",
      to: "/settings/locations"
    },
    {
      keys: {
        Mac: ["G", ",", "M"]
      },
      label: t("app.keyboardShortcuts.settings.goToReturnReasons"),
      type: "settingShortcut",
      to: "/settings/return-reasons"
    },
    {
      keys: {
        Mac: ["G", ",", "J"]
      },
      label: t("app.keyboardShortcuts.settings.goToPublishableApiKeys"),
      type: "settingShortcut",
      to: "/settings/publishable-api-keys"
    },
    {
      keys: {
        Mac: ["G", ",", "K"]
      },
      label: t("app.keyboardShortcuts.settings.goToSecretApiKeys"),
      type: "settingShortcut",
      to: "/settings/secret-api-keys"
    },
    {
      keys: {
        Mac: ["G", ",", "W"]
      },
      label: t("app.keyboardShortcuts.settings.goToWorkflows"),
      type: "settingShortcut",
      to: "/settings/workflows"
    },
    {
      keys: {
        Mac: ["G", ",", "M"]
      },
      label: t("app.keyboardShortcuts.settings.goToProfile"),
      type: "settingShortcut",
      to: "/settings/profile"
    },
    // Commands
    {
      keys: {
        Mac: ["B", "Y", "E"]
      },
      label: t("actions.logout"),
      type: "commandShortcut",
      callback: () => handleLogout()
    }
  ];
  return globalShortcuts;
};
var Search = () => {
  const { open, onOpenChange } = useSearch();
  const globalCommands = useGlobalShortcuts();
  const location = useLocation();
  const { t } = useTranslation();
  const navigate = useNavigate();
  (0, import_react6.useEffect)(() => {
    onOpenChange(false);
  }, [location.pathname, onOpenChange]);
  const links = (0, import_react6.useMemo)(() => {
    const groups = /* @__PURE__ */ new Map();
    globalCommands.forEach((command) => {
      const group = groups.get(command.type) || [];
      group.push(command);
      groups.set(command.type, group);
    });
    return Array.from(groups).map(([title, items]) => ({
      title,
      items
    }));
  }, [globalCommands]);
  const handleSelect = (shortcut) => {
    onOpenChange(false);
    if (shortcut.to) {
      navigate(shortcut.to);
      return;
    }
    if (shortcut.callback) {
      shortcut.callback();
      return;
    }
  };
  return (0, import_jsx_runtime2.jsxs)(CommandDialog, { open, onOpenChange, children: [
    (0, import_jsx_runtime2.jsx)(CommandInput, { placeholder: t("app.search.placeholder") }),
    (0, import_jsx_runtime2.jsxs)(CommandList, { children: [
      (0, import_jsx_runtime2.jsx)(CommandEmpty, { children: t("general.noResultsTitle") }),
      links.map((group) => {
        return (0, import_jsx_runtime2.jsx)(
          CommandGroup,
          {
            heading: t(`app.keyboardShortcuts.${group.title}`),
            children: group.items.map((item) => {
              var _a2;
              return (0, import_jsx_runtime2.jsxs)(
                CommandItem,
                {
                  onSelect: () => handleSelect(item),
                  className: "flex items-center justify-between",
                  children: [
                    (0, import_jsx_runtime2.jsx)("span", { children: item.label }),
                    (0, import_jsx_runtime2.jsx)("div", { className: "flex items-center gap-x-1.5", children: (_a2 = item.keys.Mac) == null ? void 0 : _a2.map((key, index) => {
                      var _a3;
                      return (0, import_jsx_runtime2.jsxs)(
                        "div",
                        {
                          className: "flex items-center gap-x-1",
                          children: [
                            (0, import_jsx_runtime2.jsx)(Kbd, { children: key }),
                            index < (((_a3 = item.keys.Mac) == null ? void 0 : _a3.length) || 0) - 1 && (0, import_jsx_runtime2.jsx)("span", { className: "txt-compact-xsmall text-ui-fg-subtle", children: t("app.keyboardShortcuts.then") })
                          ]
                        },
                        index
                      );
                    }) })
                  ]
                },
                item.label
              );
            })
          },
          group.title
        );
      })
    ] })
  ] });
};
var CommandPalette = (0, import_react6.forwardRef)(({ className, ...props }, ref) => (0, import_jsx_runtime2.jsx)(
  we,
  {
    ref,
    className: clx(
      "bg-popover text-popover-foreground flex h-full w-full flex-col overflow-hidden rounded-md",
      className
    ),
    ...props
  }
));
CommandPalette.displayName = we.displayName;
var CommandDialog = ({ children, ...props }) => {
  const { t } = useTranslation();
  return (0, import_jsx_runtime2.jsx)(Root, { ...props, children: (0, import_jsx_runtime2.jsxs)(Portal2, { children: [
    (0, import_jsx_runtime2.jsx)(Overlay, { className: "bg-ui-bg-overlay fixed inset-0" }),
    (0, import_jsx_runtime2.jsxs)(Content, { className: "bg-ui-bg-base shadow-elevation-modal fixed left-[50%] top-[50%] flex max-h-[calc(100%-16px)] w-[calc(100%-16px)] min-w-0 max-w-2xl translate-x-[-50%] translate-y-[-50%] flex-col overflow-hidden rounded-xl p-0", children: [
      (0, import_jsx_runtime2.jsx)(CommandPalette, { className: "[&_[cmdk-group-heading]]:text-muted-foreground flex h-full flex-col overflow-hidden [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-input]]:h-[52px]", children }),
      (0, import_jsx_runtime2.jsx)("div", { className: "bg-ui-bg-field text-ui-fg-subtle flex items-center justify-end border-t px-4 py-3", children: (0, import_jsx_runtime2.jsxs)("div", { className: "flex items-center gap-x-3", children: [
        (0, import_jsx_runtime2.jsxs)("div", { className: "flex items-center gap-x-2", children: [
          (0, import_jsx_runtime2.jsx)(Text, { size: "xsmall", leading: "compact", children: t("app.search.navigation") }),
          (0, import_jsx_runtime2.jsxs)("div", { className: "flex items-center gap-x-1", children: [
            (0, import_jsx_runtime2.jsx)(Kbd, { className: "bg-ui-bg-field-component", children: "↓" }),
            (0, import_jsx_runtime2.jsx)(Kbd, { className: "bg-ui-bg-field-component", children: "↑" })
          ] })
        ] }),
        (0, import_jsx_runtime2.jsx)("div", { className: "bg-ui-border-strong h-3 w-px" }),
        (0, import_jsx_runtime2.jsxs)("div", { className: "flex items-center gap-x-2", children: [
          (0, import_jsx_runtime2.jsx)(Text, { size: "xsmall", leading: "compact", children: t("app.search.openResult") }),
          (0, import_jsx_runtime2.jsx)(Kbd, { className: "bg-ui-bg-field-component", children: "↵" })
        ] })
      ] }) })
    ] })
  ] }) });
};
var CommandInput = (0, import_react6.forwardRef)(({ className, ...props }, ref) => {
  const { t } = useTranslation();
  return (0, import_jsx_runtime2.jsxs)("div", { className: "flex flex-col border-b", children: [
    (0, import_jsx_runtime2.jsx)("div", { className: "px-4 pt-4", children: (0, import_jsx_runtime2.jsx)(Badge, { size: "2xsmall", children: t("app.search.allAreas") }) }),
    (0, import_jsx_runtime2.jsx)(
      we.Input,
      {
        ref,
        className: clx(
          "placeholder:text-ui-fg-muted flex h-10 w-full rounded-md bg-transparent p-4 text-sm outline-none disabled:cursor-not-allowed disabled:opacity-50",
          className
        ),
        ...props
      }
    )
  ] });
});
CommandInput.displayName = we.Input.displayName;
var CommandList = (0, import_react6.forwardRef)(({ className, ...props }, ref) => (0, import_jsx_runtime2.jsx)(
  we.List,
  {
    ref,
    className: clx(
      "max-h-[300px] flex-1 overflow-y-auto overflow-x-hidden px-2 pb-4",
      className
    ),
    ...props
  }
));
CommandList.displayName = we.List.displayName;
var CommandEmpty = (0, import_react6.forwardRef)((props, ref) => (0, import_jsx_runtime2.jsx)(we.Empty, { ref, className: "py-6 text-center text-sm", ...props }));
CommandEmpty.displayName = we.Empty.displayName;
var CommandGroup = (0, import_react6.forwardRef)(({ className, ...props }, ref) => (0, import_jsx_runtime2.jsx)(
  we.Group,
  {
    ref,
    className: clx(
      "text-ui-fg-base [&_[cmdk-group-heading]]:text-ui-fg-muted [&_[cmdk-group-heading]]:txt-compact-xsmall-plus overflow-hidden [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:pb-1 [&_[cmdk-group-heading]]:pt-4 [&_[cmdk-item]]:py-2",
      className
    ),
    ...props
  }
));
CommandGroup.displayName = we.Group.displayName;
var CommandSeparator = (0, import_react6.forwardRef)(({ className, ...props }, ref) => (0, import_jsx_runtime2.jsx)(
  we.Separator,
  {
    ref,
    className: clx("bg-border -mx-1 h-px", className),
    ...props
  }
));
CommandSeparator.displayName = we.Separator.displayName;
var CommandItem = (0, import_react6.forwardRef)(({ className, ...props }, ref) => (0, import_jsx_runtime2.jsx)(
  we.Item,
  {
    ref,
    className: clx(
      "aria-selected:bg-ui-bg-base-hover focus-visible:bg-ui-bg-base-hover txt-compact-small [&>svg]:text-ui-fg-subtle relative flex cursor-pointer select-none items-center gap-x-3 rounded-md p-2 outline-none data-[disabled]:pointer-events-none data-[disabled]:cursor-not-allowed data-[disabled]:opacity-50",
      className
    ),
    ...props
  }
));
CommandItem.displayName = we.Item.displayName;
var SidebarContext = (0, import_react10.createContext)(null);
var SidebarProvider = ({ children }) => {
  const [desktop, setDesktop] = (0, import_react9.useState)(true);
  const [mobile, setMobile] = (0, import_react9.useState)(false);
  const { pathname } = useLocation();
  const toggle = (view) => {
    if (view === "desktop") {
      setDesktop(!desktop);
    } else {
      setMobile(!mobile);
    }
  };
  (0, import_react9.useEffect)(() => {
    setMobile(false);
  }, [pathname]);
  return (0, import_jsx_runtime3.jsx)(SidebarContext.Provider, { value: { desktop, mobile, toggle }, children });
};
var useSidebar = () => {
  const context = (0, import_react11.useContext)(SidebarContext);
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider");
  }
  return context;
};
var SearchContext = (0, import_react12.createContext)(null);
var SearchProvider = ({ children }) => {
  const [open, setOpen] = (0, import_react5.useState)(false);
  const { mobile, toggle } = useSidebar();
  const toggleSearch = () => {
    const update = !open;
    if (update && mobile) {
      toggle("mobile");
    }
    setOpen(update);
  };
  (0, import_react5.useEffect)(() => {
    const onKeyDown = (e) => {
      if (e.key === "k" && (e.metaKey || e.ctrlKey)) {
        setOpen((prev) => !prev);
      }
    };
    document.addEventListener("keydown", onKeyDown);
    return () => {
      document.removeEventListener("keydown", onKeyDown);
    };
  }, []);
  return (0, import_jsx_runtime4.jsxs)(
    SearchContext.Provider,
    {
      value: {
        open,
        onOpenChange: setOpen,
        toggleSearch
      },
      children: [
        children,
        (0, import_jsx_runtime4.jsx)(Search, {})
      ]
    }
  );
};
var useSearch = () => {
  const context = (0, import_react13.useContext)(SearchContext);
  if (!context) {
    throw new Error("useSearch must be used within a SearchProvider");
  }
  return context;
};
var ProtectedRoute = () => {
  const { user, isLoading } = useMe();
  const location = useLocation();
  if (isLoading) {
    return (0, import_jsx_runtime5.jsx)("div", { className: "flex min-h-screen items-center justify-center", children: (0, import_jsx_runtime5.jsx)(Spinner, { className: "text-ui-fg-interactive animate-spin" }) });
  }
  if (!user) {
    return (0, import_jsx_runtime5.jsx)(Navigate, { to: "/login", state: { from: location }, replace: true });
  }
  return (0, import_jsx_runtime5.jsx)(SidebarProvider, { children: (0, import_jsx_runtime5.jsx)(SearchProvider, { children: (0, import_jsx_runtime5.jsx)(Outlet, {}) }) });
};
var ErrorBoundary = () => {
  const error = useRouteError();
  const location = useLocation();
  const { t } = useTranslation();
  let code = null;
  if (isFetchError(error)) {
    if (error.status === 401) {
      return (0, import_jsx_runtime6.jsx)(Navigate, { to: "/login", state: { from: location }, replace: true });
    }
    code = error.status ?? null;
  }
  let title;
  let message;
  switch (code) {
    case 400:
      title = t("errorBoundary.badRequestTitle");
      message = t("errorBoundary.badRequestMessage");
      break;
    case 404:
      title = t("errorBoundary.notFoundTitle");
      message = t("errorBoundary.notFoundMessage");
      break;
    case 500:
      title = t("errorBoundary.internalServerErrorTitle");
      message = t("errorBoundary.internalServerErrorMessage");
      break;
    default:
      title = t("errorBoundary.defaultTitle");
      message = t("errorBoundary.defaultMessage");
      break;
  }
  return (0, import_jsx_runtime6.jsx)("div", { className: "flex size-full min-h-[calc(100vh-57px-24px)] items-center justify-center", children: (0, import_jsx_runtime6.jsx)("div", { className: "flex flex-col gap-y-6", children: (0, import_jsx_runtime6.jsxs)("div", { className: "text-ui-fg-subtle flex flex-col items-center gap-y-3", children: [
    (0, import_jsx_runtime6.jsx)(ExclamationCircle, {}),
    (0, import_jsx_runtime6.jsxs)("div", { className: "flex flex-col items-center justify-center gap-y-1", children: [
      (0, import_jsx_runtime6.jsx)(Text, { size: "small", leading: "compact", weight: "plus", children: title }),
      (0, import_jsx_runtime6.jsx)(
        Text,
        {
          size: "small",
          className: "text-ui-fg-muted text-balance text-center",
          children: message
        }
      )
    ] })
  ] }) }) });
};
var settingsRouteRegex = /^\/settings\//;
var createRouteMap = (routes5, ignore) => {
  const root = [];
  const addRoute = (pathSegments, Component4, currentLevel) => {
    if (!pathSegments.length) {
      return;
    }
    const [currentSegment, ...remainingSegments] = pathSegments;
    let route = currentLevel.find((r) => r.path === currentSegment);
    if (!route) {
      route = { path: currentSegment, children: [] };
      currentLevel.push(route);
    }
    if (remainingSegments.length === 0) {
      route.children || (route.children = []);
      route.children.push({
        path: "",
        ErrorBoundary,
        async lazy() {
          return { Component: Component4 };
        }
      });
    } else {
      route.children || (route.children = []);
      addRoute(remainingSegments, Component4, route.children);
    }
  };
  routes5.forEach(({ path, Component: Component4 }) => {
    const cleanedPath = ignore ? path.replace(ignore, "").replace(/^\/+/, "") : path.replace(/^\/+/, "");
    const pathSegments = cleanedPath.split("/").filter(Boolean);
    addRoute(pathSegments, Component4, root);
  });
  return root;
};
var BASE_NAV_LINK_CLASSES = "text-ui-fg-subtle transition-fg hover:bg-ui-bg-subtle-hover flex items-center gap-x-2 rounded-md py-1 pl-0.5 pr-2 outline-none [&>svg]:text-ui-fg-subtle focus-visible:shadow-borders-focus";
var ACTIVE_NAV_LINK_CLASSES = "bg-ui-bg-base shadow-elevation-card-rest text-ui-fg-base hover:bg-ui-bg-base";
var NESTED_NAV_LINK_CLASSES = "pl-[34px] pr-2 w-full text-ui-fg-muted";
var SETTING_NAV_LINK_CLASSES = "pl-2";
var getIsOpen = (to, items, pathname) => {
  return [to, ...(items == null ? void 0 : items.map((i) => i.to)) ?? []].some(
    (p) => pathname.startsWith(p)
  );
};
var NavItemTooltip = ({
  to,
  children
}) => {
  var _a2;
  const { t } = useTranslation();
  const globalShortcuts = useGlobalShortcuts();
  const shortcut = globalShortcuts.find((s) => s.to === to);
  return (0, import_jsx_runtime7.jsx)(
    ConditionalTooltip,
    {
      showTooltip: !!shortcut,
      maxWidth: 9999,
      content: (0, import_jsx_runtime7.jsxs)("div", { className: "txt-compact-xsmall flex h-5 items-center justify-between gap-x-2 whitespace-nowrap", children: [
        (0, import_jsx_runtime7.jsx)("span", { children: shortcut == null ? void 0 : shortcut.label }),
        (0, import_jsx_runtime7.jsx)("div", { className: "flex items-center gap-x-1", children: (_a2 = shortcut == null ? void 0 : shortcut.keys.Mac) == null ? void 0 : _a2.map((key, index) => {
          var _a3;
          return (0, import_jsx_runtime7.jsxs)("div", { className: "flex items-center gap-x-1", children: [
            (0, import_jsx_runtime7.jsx)(Kbd, { children: key }, key),
            index < (((_a3 = shortcut.keys.Mac) == null ? void 0 : _a3.length) || 0) - 1 && (0, import_jsx_runtime7.jsx)("span", { className: "text-ui-fg-muted txt-compact-xsmall", children: t("app.keyboardShortcuts.then") })
          ] }, index);
        }) })
      ] }),
      side: "right",
      delayDuration: 1500,
      children: (0, import_jsx_runtime7.jsx)("div", { className: "w-full", children })
    }
  );
};
var NavItem = ({
  icon,
  label,
  to,
  items,
  type = "core",
  from
}) => {
  const { pathname } = useLocation();
  const [open, setOpen] = (0, import_react14.useState)(getIsOpen(to, items, pathname));
  (0, import_react14.useEffect)(() => {
    setOpen(getIsOpen(to, items, pathname));
  }, [pathname, to, items]);
  const navLinkClassNames = (0, import_react14.useCallback)(
    ({
      isActive,
      isNested = false,
      isSetting: isSetting2 = false
    }) => clx(BASE_NAV_LINK_CLASSES, {
      [NESTED_NAV_LINK_CLASSES]: isNested,
      [ACTIVE_NAV_LINK_CLASSES]: isActive,
      [SETTING_NAV_LINK_CLASSES]: isSetting2
    }),
    []
  );
  const isSetting = type === "setting";
  return (0, import_jsx_runtime7.jsxs)("div", { className: "px-3", children: [
    (0, import_jsx_runtime7.jsx)(NavItemTooltip, { to, children: (0, import_jsx_runtime7.jsxs)(
      NavLink,
      {
        to,
        state: from ? {
          from
        } : void 0,
        className: (props) => clx(navLinkClassNames({ ...props, isSetting }), {
          "max-lg:hidden": !!(items == null ? void 0 : items.length)
        }),
        children: [
          type !== "setting" && (0, import_jsx_runtime7.jsx)("div", { className: "flex size-6 items-center justify-center", children: (0, import_jsx_runtime7.jsx)(Icon, { icon, type }) }),
          (0, import_jsx_runtime7.jsx)(Text, { size: "small", weight: "plus", leading: "compact", children: label })
        ]
      }
    ) }),
    items && items.length > 0 && (0, import_jsx_runtime7.jsxs)(Root2, { open, onOpenChange: setOpen, children: [
      (0, import_jsx_runtime7.jsxs)(
        Trigger,
        {
          className: clx(
            "text-ui-fg-subtle hover:text-ui-fg-base transition-fg hover:bg-ui-bg-subtle-hover flex w-full items-center gap-x-2 rounded-md py-1 pl-0.5 pr-2 outline-none lg:hidden",
            { "pl-2": isSetting }
          ),
          children: [
            (0, import_jsx_runtime7.jsx)("div", { className: "flex size-6 items-center justify-center", children: (0, import_jsx_runtime7.jsx)(Icon, { icon, type }) }),
            (0, import_jsx_runtime7.jsx)(Text, { size: "small", weight: "plus", leading: "compact", children: label })
          ]
        }
      ),
      (0, import_jsx_runtime7.jsx)(Content2, { children: (0, import_jsx_runtime7.jsx)("div", { className: "flex flex-col gap-y-0.5 pb-2 pt-0.5", children: (0, import_jsx_runtime7.jsxs)("ul", { className: "flex flex-col gap-y-0.5", children: [
        (0, import_jsx_runtime7.jsx)("li", { className: "flex w-full items-center gap-x-1 lg:hidden", children: (0, import_jsx_runtime7.jsx)(NavItemTooltip, { to, children: (0, import_jsx_runtime7.jsx)(
          NavLink,
          {
            to,
            className: (props) => clx(
              navLinkClassNames({
                ...props,
                isNested: true,
                isSetting
              })
            ),
            children: (0, import_jsx_runtime7.jsx)(Text, { size: "small", weight: "plus", leading: "compact", children: label })
          }
        ) }) }),
        items.map((item) => {
          return (0, import_jsx_runtime7.jsx)("li", { className: "flex h-7 items-center", children: (0, import_jsx_runtime7.jsx)(NavItemTooltip, { to: item.to, children: (0, import_jsx_runtime7.jsx)(
            NavLink,
            {
              to: item.to,
              className: (props) => clx(
                navLinkClassNames({
                  ...props,
                  isNested: true,
                  isSetting
                })
              ),
              children: (0, import_jsx_runtime7.jsx)(Text, { size: "small", weight: "plus", leading: "compact", children: item.label })
            }
          ) }) }, item.to);
        })
      ] }) }) })
    ] })
  ] });
};
var Icon = ({ icon, type }) => {
  if (!icon) {
    return null;
  }
  return type === "extension" ? (0, import_jsx_runtime7.jsx)("div", { className: "shadow-borders-base bg-ui-bg-base flex h-5 w-5 items-center justify-center rounded-[4px]", children: (0, import_jsx_runtime7.jsx)("div", { className: "h-[15px] w-[15px] overflow-hidden rounded-sm", children: icon }) }) : icon;
};
var KeybindProvider = ({
  shortcuts,
  debounce = 500,
  children
}) => {
  const [storeShortcuts, setStoreCommands] = (0, import_react15.useState)(
    shortcuts.map((shr) => getShortcutWithDefaultValues(shr))
  );
  const registerShortcut = (0, import_react15.useCallback)(
    (shortcut) => {
      setStoreCommands((prevShortcuts) => {
        const idx = findShortcutIndex(shortcuts, getShortcutKeys(shortcut));
        const newShortcuts = [...prevShortcuts];
        if (idx > -1) {
          newShortcuts[idx] = getShortcutWithDefaultValues(shortcut);
          return prevShortcuts;
        }
        return [...prevShortcuts, getShortcutWithDefaultValues(shortcut)];
      });
    },
    [shortcuts]
  );
  const getKeysByPlatform = (0, import_react15.useCallback)((command) => {
    return findFirstPlatformMatch(command.keys);
  }, []);
  useShortcuts({ shortcuts: storeShortcuts, debounce });
  const commandsContext = (0, import_react15.useMemo)(
    () => ({
      shortcuts: storeShortcuts,
      registerShortcut,
      getKeysByPlatform
    }),
    [storeShortcuts, registerShortcut, getKeysByPlatform]
  );
  return (0, import_jsx_runtime8.jsx)(KeybindContext.Provider, { value: commandsContext, children });
};
var InfiniteList = ({
  queryKey,
  queryFn,
  queryOptions,
  renderItem,
  renderEmpty,
  responseKey,
  pageSize = 20
}) => {
  const {
    data,
    error,
    fetchNextPage,
    fetchPreviousPage,
    hasPreviousPage,
    hasNextPage,
    isFetching,
    isPending
  } = useInfiniteQuery({
    queryKey,
    queryFn: async ({ pageParam = 0 }) => {
      return await queryFn({
        limit: pageSize,
        offset: pageParam
      });
    },
    initialPageParam: 0,
    maxPages: 5,
    getNextPageParam: (lastPage) => {
      const moreItemsExist = lastPage.count > lastPage.offset + lastPage.limit;
      return moreItemsExist ? lastPage.offset + lastPage.limit : void 0;
    },
    getPreviousPageParam: (firstPage) => {
      const moreItemsExist = firstPage.offset !== 0;
      return moreItemsExist ? Math.max(firstPage.offset - firstPage.limit, 0) : void 0;
    },
    ...queryOptions
  });
  const items = (0, import_react17.useMemo)(() => {
    return (data == null ? void 0 : data.pages.flatMap((p) => p[responseKey])) ?? [];
  }, [data, responseKey]);
  const parentRef = (0, import_react17.useRef)(null);
  const startObserver = (0, import_react17.useRef)();
  const endObserver = (0, import_react17.useRef)();
  (0, import_react17.useEffect)(() => {
    var _a2, _b;
    if (isPending) {
      return;
    }
    if (!isFetching) {
      startObserver.current = new IntersectionObserver((entries) => {
        if (entries[0].isIntersecting && hasPreviousPage) {
          fetchPreviousPage();
        }
      });
      endObserver.current = new IntersectionObserver((entries) => {
        if (entries[0].isIntersecting && hasNextPage) {
          fetchNextPage();
        }
      });
      (_a2 = startObserver.current) == null ? void 0 : _a2.observe(parentRef.current.firstChild);
      (_b = endObserver.current) == null ? void 0 : _b.observe(parentRef.current.lastChild);
    }
    return () => {
      var _a3, _b2;
      (_a3 = startObserver.current) == null ? void 0 : _a3.disconnect();
      (_b2 = endObserver.current) == null ? void 0 : _b2.disconnect();
    };
  }, [
    fetchNextPage,
    fetchPreviousPage,
    hasNextPage,
    hasPreviousPage,
    isFetching,
    isPending
  ]);
  (0, import_react17.useEffect)(() => {
    if (error) {
      toast.error(error.message);
    }
  }, [error]);
  if (isPending) {
    return (0, import_jsx_runtime9.jsx)("div", { className: "flex h-full flex-col items-center justify-center", children: (0, import_jsx_runtime9.jsx)(Spinner, { className: "animate-spin" }) });
  }
  return (0, import_jsx_runtime9.jsxs)("div", { ref: parentRef, className: "h-full", children: [
    (items == null ? void 0 : items.length) ? items.map((item) => (0, import_jsx_runtime9.jsx)("div", { children: renderItem(item) }, item.id)) : renderEmpty(),
    isFetching && (0, import_jsx_runtime9.jsx)("div", { className: "flex flex-col items-center justify-center py-4", children: (0, import_jsx_runtime9.jsx)(Spinner, { className: "animate-spin" }) })
  ] });
};
var LAST_READ_NOTIFICATION_KEY = "notificationsLastReadAt";
var Notifications = () => {
  const { t } = useTranslation();
  const [open, setOpen] = (0, import_react16.useState)(false);
  const [hasUnread, setHasUnread] = useUnreadNotifications();
  const [lastReadAt, setLastReadAt] = (0, import_react16.useState)(
    localStorage.getItem(LAST_READ_NOTIFICATION_KEY)
  );
  (0, import_react16.useEffect)(() => {
    const onKeyDown = (e) => {
      if (e.key === "n" && (e.metaKey || e.ctrlKey)) {
        setOpen((prev) => !prev);
      }
    };
    document.addEventListener("keydown", onKeyDown);
    return () => {
      document.removeEventListener("keydown", onKeyDown);
    };
  }, []);
  const handleOnOpen = (shouldOpen) => {
    if (shouldOpen) {
      setHasUnread(false);
      setOpen(true);
      localStorage.setItem(LAST_READ_NOTIFICATION_KEY, (/* @__PURE__ */ new Date()).toISOString());
    } else {
      setOpen(false);
      setLastReadAt(localStorage.getItem(LAST_READ_NOTIFICATION_KEY));
    }
  };
  return (0, import_jsx_runtime10.jsxs)(Drawer, { open, onOpenChange: handleOnOpen, children: [
    (0, import_jsx_runtime10.jsx)(Drawer.Trigger, { asChild: true, children: (0, import_jsx_runtime10.jsx)(
      IconButton,
      {
        variant: "transparent",
        className: "text-ui-fg-muted hover:text-ui-fg-subtle",
        children: hasUnread ? (0, import_jsx_runtime10.jsx)(BellAlertDone, {}) : (0, import_jsx_runtime10.jsx)(BellAlert, {})
      }
    ) }),
    (0, import_jsx_runtime10.jsxs)(Drawer.Content, { children: [
      (0, import_jsx_runtime10.jsxs)(Drawer.Header, { children: [
        (0, import_jsx_runtime10.jsx)(Drawer.Title, { asChild: true, children: (0, import_jsx_runtime10.jsx)(Heading, { children: t("notifications.domain") }) }),
        (0, import_jsx_runtime10.jsx)(Drawer.Description, { className: "sr-only", children: t("notifications.accessibility.description") })
      ] }),
      (0, import_jsx_runtime10.jsx)(Drawer.Body, { className: "overflow-y-auto px-0", children: (0, import_jsx_runtime10.jsx)(
        InfiniteList,
        {
          responseKey: "notifications",
          queryKey: notificationQueryKeys.all,
          queryFn: (params) => sdk.admin.notification.list(params),
          queryOptions: { enabled: open },
          renderEmpty: () => (0, import_jsx_runtime10.jsx)(NotificationsEmptyState, { t }),
          renderItem: (notification) => {
            return (0, import_jsx_runtime10.jsx)(
              Notification,
              {
                notification,
                unread: Date.parse(notification.created_at) > (lastReadAt ? Date.parse(lastReadAt) : 0)
              },
              notification.id
            );
          }
        }
      ) })
    ] })
  ] });
};
var Notification = ({
  notification,
  unread
}) => {
  var _a2;
  const data = notification.data;
  if (!(data == null ? void 0 : data.title)) {
    return null;
  }
  return (0, import_jsx_runtime10.jsx)(import_jsx_runtime10.Fragment, { children: (0, import_jsx_runtime10.jsxs)("div", { className: "flex items-start justify-center gap-3 border-b p-6 relative", children: [
    (0, import_jsx_runtime10.jsx)("div", { className: "text-ui-fg-muted flex size-5 items-center justify-center", children: (0, import_jsx_runtime10.jsx)(InformationCircleSolid, {}) }),
    (0, import_jsx_runtime10.jsxs)("div", { className: "flex w-full flex-col gap-y-3", children: [
      (0, import_jsx_runtime10.jsxs)("div", { className: "flex flex-col", children: [
        (0, import_jsx_runtime10.jsxs)("div", { className: "items-center flex justify-between", children: [
          (0, import_jsx_runtime10.jsx)(Text, { size: "small", leading: "compact", weight: "plus", children: data.title }),
          (0, import_jsx_runtime10.jsxs)("div", { className: "items-center flex justify-center align-center gap-2", children: [
            (0, import_jsx_runtime10.jsx)(
              Text,
              {
                as: "span",
                className: clx("text-ui-fg-subtle", {
                  "text-ui-fg-base": unread
                }),
                size: "small",
                leading: "compact",
                weight: "plus",
                children: formatDistance(notification.created_at, /* @__PURE__ */ new Date(), {
                  addSuffix: true
                })
              }
            ),
            unread && (0, import_jsx_runtime10.jsx)(
              "div",
              {
                className: "h-2 w-2 rounded bg-ui-bg-interactive",
                role: "status"
              }
            )
          ] })
        ] }),
        !!data.description && (0, import_jsx_runtime10.jsx)(
          Text,
          {
            className: "text-ui-fg-subtle whitespace-pre-line",
            size: "small",
            children: data.description
          }
        )
      ] }),
      !!((_a2 = data == null ? void 0 : data.file) == null ? void 0 : _a2.url) && (0, import_jsx_runtime10.jsx)(
        FilePreview,
        {
          filename: data.file.filename ?? "",
          url: data.file.url,
          hideThumbnail: true
        }
      )
    ] })
  ] }) });
};
var NotificationsEmptyState = ({ t }) => {
  return (0, import_jsx_runtime10.jsxs)("div", { className: "flex h-full flex-col items-center justify-center", children: [
    (0, import_jsx_runtime10.jsx)(BellAlertDone, {}),
    (0, import_jsx_runtime10.jsx)(Text, { size: "small", leading: "compact", weight: "plus", className: "mt-3", children: t("notifications.emptyState.title") }),
    (0, import_jsx_runtime10.jsx)(
      Text,
      {
        size: "small",
        className: "text-ui-fg-muted mt-1 max-w-[294px] text-center",
        children: t("notifications.emptyState.description")
      }
    )
  ] });
};
var useUnreadNotifications = () => {
  const [hasUnread, setHasUnread] = (0, import_react16.useState)(false);
  const { notifications } = useNotifications(
    { limit: 1, offset: 0, fields: "created_at" },
    { refetchInterval: 3e3 }
  );
  const lastNotification = notifications == null ? void 0 : notifications[0];
  (0, import_react16.useEffect)(() => {
    if (!lastNotification) {
      return;
    }
    const lastNotificationAsTimestamp = Date.parse(lastNotification.created_at);
    const lastReadDatetime = localStorage.getItem(LAST_READ_NOTIFICATION_KEY);
    const lastReadAsTimestamp = lastReadDatetime ? Date.parse(lastReadDatetime) : 0;
    if (lastNotificationAsTimestamp > lastReadAsTimestamp) {
      setHasUnread(true);
    }
  }, [lastNotification]);
  return [hasUnread, setHasUnread];
};
var Shell = ({ children }) => {
  const globalShortcuts = useGlobalShortcuts();
  return (0, import_jsx_runtime11.jsx)(KeybindProvider, { shortcuts: globalShortcuts, children: (0, import_jsx_runtime11.jsxs)("div", { className: "flex h-screen flex-col items-start overflow-hidden lg:flex-row", children: [
    (0, import_jsx_runtime11.jsxs)("div", { children: [
      (0, import_jsx_runtime11.jsx)(MobileSidebarContainer, { children }),
      (0, import_jsx_runtime11.jsx)(DesktopSidebarContainer, { children })
    ] }),
    (0, import_jsx_runtime11.jsxs)("div", { className: "flex h-screen w-full flex-col overflow-auto", children: [
      (0, import_jsx_runtime11.jsx)(Topbar, {}),
      (0, import_jsx_runtime11.jsx)("main", { className: "flex h-full w-full flex-col items-center overflow-y-auto", children: (0, import_jsx_runtime11.jsx)(Gutter, { children: (0, import_jsx_runtime11.jsx)(Outlet, {}) }) })
    ] })
  ] }) });
};
var Gutter = ({ children }) => {
  return (0, import_jsx_runtime11.jsx)("div", { className: "flex w-full max-w-[1600px] flex-col gap-y-2 p-3", children });
};
var Breadcrumbs = () => {
  const matches = useMatches();
  const crumbs = matches.filter((match) => {
    var _a2;
    return Boolean((_a2 = match.handle) == null ? void 0 : _a2.crumb);
  }).map((match) => {
    const handle = match.handle;
    let label = null;
    try {
      label = handle.crumb(match.data);
    } catch (error) {
    }
    if (!label) {
      return null;
    }
    return {
      label,
      path: match.pathname
    };
  }).filter(Boolean);
  return (0, import_jsx_runtime11.jsx)(
    "ol",
    {
      className: clx(
        "text-ui-fg-muted txt-compact-small-plus flex select-none items-center"
      ),
      children: crumbs.map((crumb, index) => {
        const isLast = index === crumbs.length - 1;
        const isSingle = crumbs.length === 1;
        return (0, import_jsx_runtime11.jsxs)("li", { className: clx("flex items-center"), children: [
          !isLast ? (0, import_jsx_runtime11.jsx)(
            Link,
            {
              className: "transition-fg hover:text-ui-fg-subtle",
              to: crumb.path,
              children: crumb.label
            }
          ) : (0, import_jsx_runtime11.jsxs)("div", { children: [
            !isSingle && (0, import_jsx_runtime11.jsx)("span", { className: "block lg:hidden", children: "..." }),
            (0, import_jsx_runtime11.jsx)(
              "span",
              {
                className: clx({
                  "hidden lg:block": !isSingle
                }),
                children: crumb.label
              },
              index
            )
          ] }),
          !isLast && (0, import_jsx_runtime11.jsx)("span", { className: "mx-2", children: (0, import_jsx_runtime11.jsx)(TriangleRightMini, {}) })
        ] }, index);
      })
    }
  );
};
var ToggleSidebar = () => {
  const { toggle } = useSidebar();
  return (0, import_jsx_runtime11.jsxs)("div", { children: [
    (0, import_jsx_runtime11.jsx)(
      IconButton,
      {
        className: "hidden lg:flex",
        variant: "transparent",
        onClick: () => toggle("desktop"),
        size: "small",
        children: (0, import_jsx_runtime11.jsx)(SidebarLeft, { className: "text-ui-fg-muted" })
      }
    ),
    (0, import_jsx_runtime11.jsx)(
      IconButton,
      {
        className: "hidden max-lg:flex",
        variant: "transparent",
        onClick: () => toggle("mobile"),
        size: "small",
        children: (0, import_jsx_runtime11.jsx)(SidebarLeft, { className: "text-ui-fg-muted" })
      }
    )
  ] });
};
var Topbar = () => {
  return (0, import_jsx_runtime11.jsxs)("div", { className: "grid w-full grid-cols-2 border-b p-3", children: [
    (0, import_jsx_runtime11.jsxs)("div", { className: "flex items-center gap-x-1.5", children: [
      (0, import_jsx_runtime11.jsx)(ToggleSidebar, {}),
      (0, import_jsx_runtime11.jsx)(Breadcrumbs, {})
    ] }),
    (0, import_jsx_runtime11.jsx)("div", { className: "flex items-center justify-end gap-x-3", children: (0, import_jsx_runtime11.jsx)(Notifications, {}) })
  ] });
};
var DesktopSidebarContainer = ({ children }) => {
  const { desktop } = useSidebar();
  return (0, import_jsx_runtime11.jsx)(
    "div",
    {
      className: clx("hidden h-screen w-[220px] border-r", {
        "lg:flex": desktop
      }),
      children
    }
  );
};
var MobileSidebarContainer = ({ children }) => {
  const { t } = useTranslation();
  const { mobile, toggle } = useSidebar();
  return (0, import_jsx_runtime11.jsx)(Root, { open: mobile, onOpenChange: () => toggle("mobile"), children: (0, import_jsx_runtime11.jsxs)(Portal2, { children: [
    (0, import_jsx_runtime11.jsx)(
      Overlay,
      {
        className: clx(
          "bg-ui-bg-overlay fixed inset-0",
          "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0"
        )
      }
    ),
    (0, import_jsx_runtime11.jsxs)(
      Content,
      {
        className: clx(
          "bg-ui-bg-subtle shadow-elevation-modal fixed inset-y-2 left-2 flex w-full max-w-[304px] flex-col overflow-hidden rounded-lg border-r",
          "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:slide-out-to-left-1/2 data-[state=open]:slide-in-from-left-1/2 duration-200"
        ),
        children: [
          (0, import_jsx_runtime11.jsxs)("div", { className: "p-3", children: [
            (0, import_jsx_runtime11.jsx)(Close, { asChild: true, children: (0, import_jsx_runtime11.jsx)(
              IconButton,
              {
                size: "small",
                variant: "transparent",
                className: "text-ui-fg-subtle",
                children: (0, import_jsx_runtime11.jsx)(XMark, {})
              }
            ) }),
            (0, import_jsx_runtime11.jsx)(Title, { className: "sr-only", children: t("app.nav.accessibility.title") }),
            (0, import_jsx_runtime11.jsx)(Description, { className: "sr-only", children: t("app.nav.accessibility.description") })
          ] }),
          children
        ]
      }
    )
  ] }) });
};
var ThemeContext = (0, import_react20.createContext)(null);
var THEME_KEY = "medusa_admin_theme";
function getDefaultValue() {
  const persisted = localStorage == null ? void 0 : localStorage.getItem(THEME_KEY);
  if (persisted) {
    return persisted;
  }
  return "system";
}
function getThemeValue(selected) {
  if (selected === "system") {
    if (window !== void 0) {
      return window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";
    }
    return "light";
  }
  return selected;
}
var ThemeProvider = ({ children }) => {
  const [state, setState] = (0, import_react19.useState)(getDefaultValue());
  const [value, setValue] = (0, import_react19.useState)(getThemeValue(state));
  const setTheme = (theme) => {
    localStorage.setItem(THEME_KEY, theme);
    const themeValue = getThemeValue(theme);
    setState(theme);
    setValue(themeValue);
  };
  (0, import_react19.useEffect)(() => {
    const html = document.querySelector("html");
    if (html) {
      const css = document.createElement("style");
      css.appendChild(
        document.createTextNode(
          `* {
            -webkit-transition: none !important;
            -moz-transition: none !important;
            -o-transition: none !important;
            -ms-transition: none !important;
            transition: none !important;
          }`
        )
      );
      document.head.appendChild(css);
      html.classList.remove(value === "light" ? "dark" : "light");
      html.classList.add(value);
      window.getComputedStyle(css).opacity;
      document.head.removeChild(css);
    }
  }, [value]);
  return (0, import_jsx_runtime12.jsx)(ThemeContext.Provider, { value: { theme: state, setTheme }, children });
};
var useTheme = () => {
  const context = (0, import_react21.useContext)(ThemeContext);
  if (!context) {
    throw new Error("useTheme must be used within a ThemeProvider");
  }
  return context;
};
var UserMenu = () => {
  const { t } = useTranslation();
  const location = useLocation();
  const [openMenu, setOpenMenu] = (0, import_react18.useState)(false);
  const [openModal, setOpenModal] = (0, import_react18.useState)(false);
  const toggleModal = () => {
    setOpenMenu(false);
    setOpenModal(!openModal);
  };
  return (0, import_jsx_runtime13.jsxs)("div", { children: [
    (0, import_jsx_runtime13.jsxs)(DropdownMenu, { open: openMenu, onOpenChange: setOpenMenu, children: [
      (0, import_jsx_runtime13.jsx)(UserBadge, {}),
      (0, import_jsx_runtime13.jsxs)(DropdownMenu.Content, { className: "min-w-[var(--radix-dropdown-menu-trigger-width)] max-w-[var(--radix-dropdown-menu-trigger-width)]", children: [
        (0, import_jsx_runtime13.jsx)(UserItem, {}),
        (0, import_jsx_runtime13.jsx)(DropdownMenu.Separator, {}),
        (0, import_jsx_runtime13.jsx)(DropdownMenu.Item, { asChild: true, children: (0, import_jsx_runtime13.jsxs)(Link, { to: "/settings/profile", state: { from: location.pathname }, children: [
          (0, import_jsx_runtime13.jsx)(User, { className: "text-ui-fg-subtle mr-2" }),
          t("app.menus.user.profileSettings")
        ] }) }),
        (0, import_jsx_runtime13.jsx)(DropdownMenu.Separator, {}),
        (0, import_jsx_runtime13.jsx)(DropdownMenu.Item, { asChild: true, children: (0, import_jsx_runtime13.jsxs)(Link, { to: "https://docs.medusajs.com/v2", target: "_blank", children: [
          (0, import_jsx_runtime13.jsx)(BookOpen, { className: "text-ui-fg-subtle mr-2" }),
          t("app.menus.user.documentation")
        ] }) }),
        (0, import_jsx_runtime13.jsx)(DropdownMenu.Item, { asChild: true, children: (0, import_jsx_runtime13.jsxs)(Link, { to: "https://medusajs.com/changelog/", target: "_blank", children: [
          (0, import_jsx_runtime13.jsx)(TimelineVertical, { className: "text-ui-fg-subtle mr-2" }),
          t("app.menus.user.changelog")
        ] }) }),
        (0, import_jsx_runtime13.jsx)(DropdownMenu.Separator, {}),
        (0, import_jsx_runtime13.jsxs)(DropdownMenu.Item, { onClick: toggleModal, children: [
          (0, import_jsx_runtime13.jsx)(Keyboard, { className: "text-ui-fg-subtle mr-2" }),
          t("app.menus.user.shortcuts")
        ] }),
        (0, import_jsx_runtime13.jsx)(ThemeToggle, {}),
        (0, import_jsx_runtime13.jsx)(DropdownMenu.Separator, {}),
        (0, import_jsx_runtime13.jsx)(Logout, {})
      ] })
    ] }),
    (0, import_jsx_runtime13.jsx)(GlobalKeybindsModal, { open: openModal, onOpenChange: setOpenModal })
  ] });
};
var UserBadge = () => {
  const { user, isPending, isError, error } = useMe();
  const name = [user == null ? void 0 : user.first_name, user == null ? void 0 : user.last_name].filter(Boolean).join(" ");
  const displayName = name || (user == null ? void 0 : user.email);
  const fallback = displayName ? displayName[0].toUpperCase() : null;
  if (isPending) {
    return (0, import_jsx_runtime13.jsxs)("button", { className: "shadow-borders-base flex max-w-[192px] select-none items-center gap-x-2 overflow-hidden text-ellipsis whitespace-nowrap rounded-full py-1 pl-1 pr-2.5", children: [
      (0, import_jsx_runtime13.jsx)(Skeleton, { className: "h-5 w-5 rounded-full" }),
      (0, import_jsx_runtime13.jsx)(Skeleton, { className: "h-[9px] w-[70px]" })
    ] });
  }
  if (isError) {
    throw error;
  }
  return (0, import_jsx_runtime13.jsx)("div", { className: "p-3", children: (0, import_jsx_runtime13.jsxs)(
    DropdownMenu.Trigger,
    {
      disabled: !user,
      className: clx(
        "bg-ui-bg-subtle grid w-full cursor-pointer grid-cols-[24px_1fr_15px] items-center gap-2 rounded-md py-1 pl-0.5 pr-2 outline-none",
        "hover:bg-ui-bg-subtle-hover",
        "data-[state=open]:bg-ui-bg-subtle-hover",
        "focus-visible:shadow-borders-focus"
      ),
      children: [
        (0, import_jsx_runtime13.jsx)("div", { className: "flex size-6 items-center justify-center", children: fallback ? (0, import_jsx_runtime13.jsx)(Avatar, { size: "xsmall", fallback }) : (0, import_jsx_runtime13.jsx)(Skeleton, { className: "h-6 w-6 rounded-full" }) }),
        (0, import_jsx_runtime13.jsx)("div", { className: "flex items-center overflow-hidden", children: displayName ? (0, import_jsx_runtime13.jsx)(
          Text,
          {
            size: "xsmall",
            weight: "plus",
            leading: "compact",
            className: "truncate",
            children: displayName
          }
        ) : (0, import_jsx_runtime13.jsx)(Skeleton, { className: "h-[9px] w-[70px]" }) }),
        (0, import_jsx_runtime13.jsx)(EllipsisHorizontal, { className: "text-ui-fg-muted" })
      ]
    }
  ) });
};
var ThemeToggle = () => {
  const { t } = useTranslation();
  const { theme, setTheme } = useTheme();
  return (0, import_jsx_runtime13.jsxs)(DropdownMenu.SubMenu, { children: [
    (0, import_jsx_runtime13.jsxs)(DropdownMenu.SubMenuTrigger, { className: "rounded-md", children: [
      (0, import_jsx_runtime13.jsx)(CircleHalfSolid, { className: "text-ui-fg-subtle mr-2" }),
      t("app.menus.user.theme.label")
    ] }),
    (0, import_jsx_runtime13.jsx)(DropdownMenu.SubMenuContent, { children: (0, import_jsx_runtime13.jsxs)(DropdownMenu.RadioGroup, { value: theme, children: [
      (0, import_jsx_runtime13.jsx)(
        DropdownMenu.RadioItem,
        {
          value: "system",
          onClick: (e) => {
            e.preventDefault();
            setTheme("system");
          },
          children: t("app.menus.user.theme.system")
        }
      ),
      (0, import_jsx_runtime13.jsx)(
        DropdownMenu.RadioItem,
        {
          value: "light",
          onClick: (e) => {
            e.preventDefault();
            setTheme("light");
          },
          children: t("app.menus.user.theme.light")
        }
      ),
      (0, import_jsx_runtime13.jsx)(
        DropdownMenu.RadioItem,
        {
          value: "dark",
          onClick: (e) => {
            e.preventDefault();
            setTheme("dark");
          },
          children: t("app.menus.user.theme.dark")
        }
      )
    ] }) })
  ] });
};
var Logout = () => {
  const { t } = useTranslation();
  const navigate = useNavigate();
  const { mutateAsync: logoutMutation } = useLogout();
  const handleLogout = async () => {
    await logoutMutation(void 0, {
      onSuccess: () => {
        queryClient.clear();
        navigate("/login");
      }
    });
  };
  return (0, import_jsx_runtime13.jsx)(DropdownMenu.Item, { onClick: handleLogout, children: (0, import_jsx_runtime13.jsxs)("div", { className: "flex items-center gap-x-2", children: [
    (0, import_jsx_runtime13.jsx)(OpenRectArrowOut, { className: "text-ui-fg-subtle" }),
    (0, import_jsx_runtime13.jsx)("span", { children: t("app.menus.actions.logout") })
  ] }) });
};
var GlobalKeybindsModal = (props) => {
  const { t } = useTranslation();
  const globalShortcuts = useGlobalShortcuts();
  const [searchValue, onSearchValueChange] = (0, import_react18.useState)("");
  const searchResults = searchValue ? globalShortcuts.filter((shortcut) => {
    return shortcut.label.toLowerCase().includes(searchValue == null ? void 0 : searchValue.toLowerCase());
  }) : globalShortcuts;
  return (0, import_jsx_runtime13.jsx)(Root, { ...props, children: (0, import_jsx_runtime13.jsxs)(Portal2, { children: [
    (0, import_jsx_runtime13.jsx)(Overlay, { className: "bg-ui-bg-overlay fixed inset-0" }),
    (0, import_jsx_runtime13.jsxs)(Content, { className: "bg-ui-bg-subtle shadow-elevation-modal fixed left-[50%] top-[50%] flex h-full max-h-[612px] w-full max-w-[560px] translate-x-[-50%] translate-y-[-50%] flex-col divide-y overflow-hidden rounded-lg", children: [
      (0, import_jsx_runtime13.jsxs)("div", { className: "flex flex-col gap-y-3 px-6 py-4", children: [
        (0, import_jsx_runtime13.jsxs)("div", { className: "flex items-center justify-between", children: [
          (0, import_jsx_runtime13.jsxs)("div", { children: [
            (0, import_jsx_runtime13.jsx)(Title, { asChild: true, children: (0, import_jsx_runtime13.jsx)(Heading, { children: t("app.menus.user.shortcuts") }) }),
            (0, import_jsx_runtime13.jsx)(Description, { className: "sr-only" })
          ] }),
          (0, import_jsx_runtime13.jsxs)("div", { className: "flex items-center gap-x-2", children: [
            (0, import_jsx_runtime13.jsx)(Kbd, { children: "esc" }),
            (0, import_jsx_runtime13.jsx)(Close, { asChild: true, children: (0, import_jsx_runtime13.jsx)(IconButton, { variant: "transparent", size: "small", children: (0, import_jsx_runtime13.jsx)(XMark, {}) }) })
          ] })
        ] }),
        (0, import_jsx_runtime13.jsx)("div", { children: (0, import_jsx_runtime13.jsx)(
          Input,
          {
            type: "search",
            value: searchValue,
            onChange: (e) => onSearchValueChange(e.target.value)
          }
        ) })
      ] }),
      (0, import_jsx_runtime13.jsx)("div", { className: "flex flex-col divide-y overflow-y-auto", children: searchResults.map((shortcut, index) => {
        var _a2;
        return (0, import_jsx_runtime13.jsxs)(
          "div",
          {
            className: "text-ui-fg-subtle flex items-center justify-between px-6 py-3",
            children: [
              (0, import_jsx_runtime13.jsx)(Text, { size: "small", children: shortcut.label }),
              (0, import_jsx_runtime13.jsx)("div", { className: "flex items-center gap-x-1", children: (_a2 = shortcut.keys.Mac) == null ? void 0 : _a2.map((key, index2) => {
                var _a3;
                return (0, import_jsx_runtime13.jsxs)("div", { className: "flex items-center gap-x-1", children: [
                  (0, import_jsx_runtime13.jsx)(Kbd, { children: key }),
                  index2 < (((_a3 = shortcut.keys.Mac) == null ? void 0 : _a3.length) || 0) - 1 && (0, import_jsx_runtime13.jsx)("span", { className: "txt-compact-xsmall text-ui-fg-subtle", children: t("app.keyboardShortcuts.then") })
                ] }, index2);
              }) })
            ]
          },
          index
        );
      }) })
    ] })
  ] }) });
};
var UserItem = () => {
  const { user, isPending, isError, error } = useMe();
  const loaded = !isPending && !!user;
  if (!loaded) {
    return (0, import_jsx_runtime13.jsx)("div", {});
  }
  const name = [user.first_name, user.last_name].filter(Boolean).join(" ");
  const email = user.email;
  const fallback = name ? name[0].toUpperCase() : email[0].toUpperCase();
  const avatar = user.avatar_url;
  if (isError) {
    throw error;
  }
  return (0, import_jsx_runtime13.jsxs)("div", { className: "flex items-center gap-x-3 overflow-hidden px-2 py-1", children: [
    (0, import_jsx_runtime13.jsx)(
      Avatar,
      {
        size: "small",
        variant: "rounded",
        src: avatar || void 0,
        fallback
      }
    ),
    (0, import_jsx_runtime13.jsxs)("div", { className: "block w-full min-w-0 max-w-[187px] overflow-hidden whitespace-nowrap", children: [
      (0, import_jsx_runtime13.jsx)(
        Text,
        {
          size: "small",
          weight: "plus",
          leading: "compact",
          className: "overflow-hidden text-ellipsis whitespace-nowrap",
          children: name || email
        }
      ),
      !!name && (0, import_jsx_runtime13.jsx)(
        Text,
        {
          size: "xsmall",
          leading: "compact",
          className: "text-ui-fg-subtle overflow-hidden text-ellipsis whitespace-nowrap",
          children: email
        }
      )
    ] })
  ] });
};
var MainLayout = () => {
  return (0, import_jsx_runtime14.jsx)(Shell, { children: (0, import_jsx_runtime14.jsx)(MainSidebar, {}) });
};
var MainSidebar = () => {
  return (0, import_jsx_runtime14.jsx)("aside", { className: "flex flex-1 flex-col justify-between overflow-y-auto", children: (0, import_jsx_runtime14.jsxs)("div", { className: "flex flex-1 flex-col", children: [
    (0, import_jsx_runtime14.jsxs)("div", { className: "bg-ui-bg-subtle sticky top-0", children: [
      (0, import_jsx_runtime14.jsx)(Header, {}),
      (0, import_jsx_runtime14.jsx)("div", { className: "px-3", children: (0, import_jsx_runtime14.jsx)(Divider, { variant: "dashed" }) })
    ] }),
    (0, import_jsx_runtime14.jsxs)("div", { className: "flex flex-1 flex-col justify-between", children: [
      (0, import_jsx_runtime14.jsxs)("div", { className: "flex flex-1 flex-col", children: [
        (0, import_jsx_runtime14.jsx)(CoreRouteSection, {}),
        (0, import_jsx_runtime14.jsx)(ExtensionRouteSection, {})
      ] }),
      (0, import_jsx_runtime14.jsx)(UtilitySection, {})
    ] }),
    (0, import_jsx_runtime14.jsx)("div", { className: "bg-ui-bg-subtle sticky bottom-0", children: (0, import_jsx_runtime14.jsx)(UserSection, {}) })
  ] }) });
};
var Logout2 = () => {
  const { t } = useTranslation();
  const navigate = useNavigate();
  const { mutateAsync: logoutMutation } = useLogout();
  const handleLogout = async () => {
    await logoutMutation(void 0, {
      onSuccess: () => {
        queryClient.clear();
        navigate("/login");
      }
    });
  };
  return (0, import_jsx_runtime14.jsx)(DropdownMenu.Item, { onClick: handleLogout, children: (0, import_jsx_runtime14.jsxs)("div", { className: "flex items-center gap-x-2", children: [
    (0, import_jsx_runtime14.jsx)(OpenRectArrowOut, { className: "text-ui-fg-subtle" }),
    (0, import_jsx_runtime14.jsx)("span", { children: t("app.menus.actions.logout") })
  ] }) });
};
var Header = () => {
  var _a2;
  const { t } = useTranslation();
  const { store, isPending, isError, error } = useStore();
  const name = store == null ? void 0 : store.name;
  const fallback = (_a2 = store == null ? void 0 : store.name) == null ? void 0 : _a2.slice(0, 1).toUpperCase();
  const isLoaded = !isPending && !!store && !!name && !!fallback;
  if (isError) {
    throw error;
  }
  return (0, import_jsx_runtime14.jsx)("div", { className: "w-full p-3", children: (0, import_jsx_runtime14.jsxs)(DropdownMenu, { children: [
    (0, import_jsx_runtime14.jsxs)(
      DropdownMenu.Trigger,
      {
        disabled: !isLoaded,
        className: clx(
          "bg-ui-bg-subtle transition-fg grid w-full grid-cols-[24px_1fr_15px] items-center gap-x-3 rounded-md p-0.5 pr-2 outline-none",
          "hover:bg-ui-bg-subtle-hover",
          "data-[state=open]:bg-ui-bg-subtle-hover",
          "focus-visible:shadow-borders-focus"
        ),
        children: [
          fallback ? (0, import_jsx_runtime14.jsx)(Avatar, { variant: "squared", size: "xsmall", fallback }) : (0, import_jsx_runtime14.jsx)(Skeleton, { className: "h-6 w-6 rounded-md" }),
          (0, import_jsx_runtime14.jsx)("div", { className: "block overflow-hidden text-left", children: name ? (0, import_jsx_runtime14.jsx)(
            Text,
            {
              size: "small",
              weight: "plus",
              leading: "compact",
              className: "truncate",
              children: store.name
            }
          ) : (0, import_jsx_runtime14.jsx)(Skeleton, { className: "h-[9px] w-[120px]" }) }),
          (0, import_jsx_runtime14.jsx)(EllipsisHorizontal, { className: "text-ui-fg-muted" })
        ]
      }
    ),
    isLoaded && (0, import_jsx_runtime14.jsxs)(DropdownMenu.Content, { className: "w-[var(--radix-dropdown-menu-trigger-width)] min-w-0", children: [
      (0, import_jsx_runtime14.jsxs)("div", { className: "flex items-center gap-x-3 px-2 py-1", children: [
        (0, import_jsx_runtime14.jsx)(Avatar, { variant: "squared", size: "small", fallback }),
        (0, import_jsx_runtime14.jsxs)("div", { className: "flex flex-col overflow-hidden", children: [
          (0, import_jsx_runtime14.jsx)(
            Text,
            {
              size: "small",
              weight: "plus",
              leading: "compact",
              className: "truncate",
              children: name
            }
          ),
          (0, import_jsx_runtime14.jsx)(
            Text,
            {
              size: "xsmall",
              leading: "compact",
              className: "text-ui-fg-subtle",
              children: t("app.nav.main.store")
            }
          )
        ] })
      ] }),
      (0, import_jsx_runtime14.jsx)(DropdownMenu.Separator, {}),
      (0, import_jsx_runtime14.jsx)(DropdownMenu.Item, { className: "gap-x-2", asChild: true, children: (0, import_jsx_runtime14.jsxs)(Link, { to: "/settings/store", children: [
        (0, import_jsx_runtime14.jsx)(BuildingStorefront, { className: "text-ui-fg-subtle" }),
        t("app.nav.main.storeSettings")
      ] }) }),
      (0, import_jsx_runtime14.jsx)(DropdownMenu.Separator, {}),
      (0, import_jsx_runtime14.jsx)(Logout2, {})
    ] })
  ] }) });
};
var useCoreRoutes = () => {
  const { t } = useTranslation();
  return [
    {
      icon: (0, import_jsx_runtime14.jsx)(ShoppingCart, {}),
      label: t("orders.domain"),
      to: "/orders",
      items: [
        // TODO: Enable when domin is introduced
        // {
        //   label: t("draftOrders.domain"),
        //   to: "/draft-orders",
        // },
      ]
    },
    {
      icon: (0, import_jsx_runtime14.jsx)(Tag, {}),
      label: t("products.domain"),
      to: "/products",
      items: [
        {
          label: t("collections.domain"),
          to: "/collections"
        },
        {
          label: t("categories.domain"),
          to: "/categories"
        }
        // TODO: Enable when domin is introduced
        // {
        //   label: t("giftCards.domain"),
        //   to: "/gift-cards",
        // },
      ]
    },
    {
      icon: (0, import_jsx_runtime14.jsx)(Buildings, {}),
      label: t("inventory.domain"),
      to: "/inventory",
      items: [
        {
          label: t("reservations.domain"),
          to: "/reservations"
        }
      ]
    },
    {
      icon: (0, import_jsx_runtime14.jsx)(Users, {}),
      label: t("customers.domain"),
      to: "/customers",
      items: [
        {
          label: t("customerGroups.domain"),
          to: "/customer-groups"
        }
      ]
    },
    {
      icon: (0, import_jsx_runtime14.jsx)(ReceiptPercent, {}),
      label: t("promotions.domain"),
      to: "/promotions",
      items: [
        {
          label: t("campaigns.domain"),
          to: "/campaigns"
        }
      ]
    },
    {
      icon: (0, import_jsx_runtime14.jsx)(CurrencyDollar, {}),
      label: t("priceLists.domain"),
      to: "/price-lists"
    }
  ];
};
var Searchbar = () => {
  const { t } = useTranslation();
  const { toggleSearch } = useSearch();
  return (0, import_jsx_runtime14.jsx)("div", { className: "px-3", children: (0, import_jsx_runtime14.jsxs)(
    "button",
    {
      onClick: toggleSearch,
      className: clx(
        "bg-ui-bg-subtle text-ui-fg-subtle flex w-full items-center gap-x-2.5 rounded-md px-2 py-1 outline-none",
        "hover:bg-ui-bg-subtle-hover",
        "focus-visible:shadow-borders-focus"
      ),
      children: [
        (0, import_jsx_runtime14.jsx)(MagnifyingGlass, {}),
        (0, import_jsx_runtime14.jsx)("div", { className: "flex-1 text-left", children: (0, import_jsx_runtime14.jsx)(Text, { size: "small", leading: "compact", weight: "plus", children: t("app.search.label") }) }),
        (0, import_jsx_runtime14.jsx)(Text, { size: "small", leading: "compact", className: "text-ui-fg-muted", children: "⌘K" })
      ]
    }
  ) });
};
var CoreRouteSection = () => {
  const coreRoutes = useCoreRoutes();
  return (0, import_jsx_runtime14.jsxs)("nav", { className: "flex flex-col gap-y-1 py-3", children: [
    (0, import_jsx_runtime14.jsx)(Searchbar, {}),
    coreRoutes.map((route) => {
      return (0, import_jsx_runtime14.jsx)(NavItem, { ...route }, route.to);
    })
  ] });
};
var ExtensionRouteSection = () => {
  const { t } = useTranslation();
  const links = routes.links;
  const extensionLinks = links.filter((link) => !settingsRouteRegex.test(link.path)).sort((a, b) => a.label.localeCompare(b.label));
  if (!extensionLinks.length) {
    return null;
  }
  return (0, import_jsx_runtime14.jsxs)("div", { children: [
    (0, import_jsx_runtime14.jsx)("div", { className: "px-3", children: (0, import_jsx_runtime14.jsx)(Divider, { variant: "dashed" }) }),
    (0, import_jsx_runtime14.jsx)("div", { className: "flex flex-col gap-y-1 py-3", children: (0, import_jsx_runtime14.jsxs)(Root2, { defaultOpen: true, children: [
      (0, import_jsx_runtime14.jsx)("div", { className: "px-4", children: (0, import_jsx_runtime14.jsx)(Trigger, { asChild: true, className: "group/trigger", children: (0, import_jsx_runtime14.jsxs)("button", { className: "text-ui-fg-subtle flex w-full items-center justify-between px-2", children: [
        (0, import_jsx_runtime14.jsx)(Text, { size: "xsmall", weight: "plus", leading: "compact", children: t("app.nav.common.extensions") }),
        (0, import_jsx_runtime14.jsxs)("div", { className: "text-ui-fg-muted", children: [
          (0, import_jsx_runtime14.jsx)(ChevronDownMini, { className: "group-data-[state=open]/trigger:hidden" }),
          (0, import_jsx_runtime14.jsx)(MinusMini, { className: "group-data-[state=closed]/trigger:hidden" })
        ] })
      ] }) }) }),
      (0, import_jsx_runtime14.jsx)(Content2, { children: (0, import_jsx_runtime14.jsx)("nav", { className: "flex flex-col gap-y-0.5 py-1 pb-4", children: extensionLinks.map((link) => {
        return (0, import_jsx_runtime14.jsx)(
          NavItem,
          {
            to: link.path,
            label: link.label,
            icon: link.icon ? (0, import_jsx_runtime14.jsx)(link.icon, {}) : (0, import_jsx_runtime14.jsx)(SquaresPlus, {}),
            type: "extension"
          },
          link.path
        );
      }) }) })
    ] }) })
  ] });
};
var UtilitySection = () => {
  const location = useLocation();
  const { t } = useTranslation();
  return (0, import_jsx_runtime14.jsx)("div", { className: "flex flex-col gap-y-0.5 py-3", children: (0, import_jsx_runtime14.jsx)(
    NavItem,
    {
      label: t("app.nav.settings.header"),
      to: "/settings",
      from: location.pathname,
      icon: (0, import_jsx_runtime14.jsx)(CogSixTooth, {})
    }
  ) });
};
var UserSection = () => {
  return (0, import_jsx_runtime14.jsxs)("div", { children: [
    (0, import_jsx_runtime14.jsx)("div", { className: "px-3", children: (0, import_jsx_runtime14.jsx)(Divider, { variant: "dashed" }) }),
    (0, import_jsx_runtime14.jsx)(UserMenu, {})
  ] });
};
var SettingsLayout = () => {
  return (0, import_jsx_runtime15.jsx)(Shell, { children: (0, import_jsx_runtime15.jsx)(SettingsSidebar, {}) });
};
var useSettingRoutes = () => {
  const { t } = useTranslation();
  return (0, import_react22.useMemo)(
    () => [
      {
        label: t("store.domain"),
        to: "/settings/store"
      },
      {
        label: t("users.domain"),
        to: "/settings/users"
      },
      {
        label: t("regions.domain"),
        to: "/settings/regions"
      },
      {
        label: t("taxRegions.domain"),
        to: "/settings/tax-regions"
      },
      {
        label: t("returnReasons.domain"),
        to: "/settings/return-reasons"
      },
      {
        label: t("salesChannels.domain"),
        to: "/settings/sales-channels"
      },
      {
        label: t("productTypes.domain"),
        to: "/settings/product-types"
      },
      {
        label: t("productTags.domain"),
        to: "/settings/product-tags"
      },
      {
        label: t("stockLocations.domain"),
        to: "/settings/locations"
      }
    ],
    [t]
  );
};
var useDeveloperRoutes = () => {
  const { t } = useTranslation();
  return (0, import_react22.useMemo)(
    () => [
      {
        label: t("apiKeyManagement.domain.publishable"),
        to: "/settings/publishable-api-keys"
      },
      {
        label: t("apiKeyManagement.domain.secret"),
        to: "/settings/secret-api-keys"
      },
      {
        label: t("workflowExecutions.domain"),
        to: "/settings/workflows"
      }
    ],
    [t]
  );
};
var useMyAccountRoutes = () => {
  const { t } = useTranslation();
  return (0, import_react22.useMemo)(
    () => [
      {
        label: t("profile.domain"),
        to: "/settings/profile"
      }
    ],
    [t]
  );
};
var useExtensionRoutes = () => {
  const links = routes2.links;
  return (0, import_react22.useMemo)(() => {
    const settingsLinks = links.filter(
      (link) => settingsRouteRegex.test(link.path)
    );
    return settingsLinks.map((link) => ({
      label: link.label,
      to: link.path
    }));
  }, [links]);
};
var getSafeFromValue = (from) => {
  if (from.startsWith("/settings")) {
    return "/orders";
  }
  return from;
};
var SettingsSidebar = () => {
  const routes5 = useSettingRoutes();
  const developerRoutes = useDeveloperRoutes();
  const extensionRoutes = useExtensionRoutes();
  const myAccountRoutes = useMyAccountRoutes();
  const { t } = useTranslation();
  return (0, import_jsx_runtime15.jsxs)("aside", { className: "relative flex flex-1 flex-col justify-between overflow-y-auto", children: [
    (0, import_jsx_runtime15.jsxs)("div", { className: "bg-ui-bg-subtle sticky top-0", children: [
      (0, import_jsx_runtime15.jsx)(Header2, {}),
      (0, import_jsx_runtime15.jsx)("div", { className: "flex items-center justify-center px-3", children: (0, import_jsx_runtime15.jsx)(Divider, { variant: "dashed" }) })
    ] }),
    (0, import_jsx_runtime15.jsxs)("div", { className: "flex flex-1 flex-col", children: [
      (0, import_jsx_runtime15.jsxs)("div", { className: "flex flex-1 flex-col overflow-y-auto", children: [
        (0, import_jsx_runtime15.jsx)(
          CollapsibleSection,
          {
            label: t("app.nav.settings.general"),
            items: routes5
          }
        ),
        (0, import_jsx_runtime15.jsx)("div", { className: "flex items-center justify-center px-3", children: (0, import_jsx_runtime15.jsx)(Divider, { variant: "dashed" }) }),
        (0, import_jsx_runtime15.jsx)(
          CollapsibleSection,
          {
            label: t("app.nav.settings.developer"),
            items: developerRoutes
          }
        ),
        (0, import_jsx_runtime15.jsx)("div", { className: "flex items-center justify-center px-3", children: (0, import_jsx_runtime15.jsx)(Divider, { variant: "dashed" }) }),
        (0, import_jsx_runtime15.jsx)(
          CollapsibleSection,
          {
            label: t("app.nav.settings.myAccount"),
            items: myAccountRoutes
          }
        ),
        extensionRoutes.length > 0 && (0, import_jsx_runtime15.jsxs)(import_react22.Fragment, { children: [
          (0, import_jsx_runtime15.jsx)("div", { className: "flex items-center justify-center px-3", children: (0, import_jsx_runtime15.jsx)(Divider, { variant: "dashed" }) }),
          (0, import_jsx_runtime15.jsx)(
            CollapsibleSection,
            {
              label: t("app.nav.common.extensions"),
              items: extensionRoutes
            }
          )
        ] })
      ] }),
      (0, import_jsx_runtime15.jsx)("div", { className: "bg-ui-bg-subtle sticky bottom-0", children: (0, import_jsx_runtime15.jsx)(UserSection2, {}) })
    ] })
  ] });
};
var Header2 = () => {
  const [from, setFrom] = (0, import_react22.useState)("/orders");
  const { t } = useTranslation();
  const location = useLocation();
  (0, import_react22.useEffect)(() => {
    var _a2;
    if ((_a2 = location.state) == null ? void 0 : _a2.from) {
      setFrom(getSafeFromValue(location.state.from));
    }
  }, [location]);
  return (0, import_jsx_runtime15.jsx)("div", { className: "bg-ui-bg-subtle p-3", children: (0, import_jsx_runtime15.jsx)(
    Link,
    {
      to: from,
      replace: true,
      className: clx(
        "bg-ui-bg-subtle transition-fg flex items-center rounded-md outline-none",
        "hover:bg-ui-bg-subtle-hover",
        "focus-visible:shadow-borders-focus"
      ),
      children: (0, import_jsx_runtime15.jsxs)("div", { className: "flex items-center gap-x-2.5 px-2 py-1", children: [
        (0, import_jsx_runtime15.jsx)("div", { className: "flex items-center justify-center", children: (0, import_jsx_runtime15.jsx)(ArrowUturnLeft, { className: "text-ui-fg-subtle" }) }),
        (0, import_jsx_runtime15.jsx)(Text, { leading: "compact", weight: "plus", size: "small", children: t("app.nav.settings.header") })
      ] })
    }
  ) });
};
var CollapsibleSection = ({
  label,
  items
}) => {
  return (0, import_jsx_runtime15.jsxs)(Root2, { defaultOpen: true, className: "py-3", children: [
    (0, import_jsx_runtime15.jsx)("div", { className: "px-3", children: (0, import_jsx_runtime15.jsxs)("div", { className: "text-ui-fg-muted flex h-7 items-center justify-between px-2", children: [
      (0, import_jsx_runtime15.jsx)(Text, { size: "small", leading: "compact", children: label }),
      (0, import_jsx_runtime15.jsx)(Trigger, { asChild: true, children: (0, import_jsx_runtime15.jsx)(IconButton, { size: "2xsmall", variant: "transparent", className: "static", children: (0, import_jsx_runtime15.jsx)(MinusMini, { className: "text-ui-fg-muted" }) }) })
    ] }) }),
    (0, import_jsx_runtime15.jsx)(Content2, { children: (0, import_jsx_runtime15.jsx)("div", { className: "pt-0.5", children: (0, import_jsx_runtime15.jsx)("nav", { className: "flex flex-col gap-y-0.5", children: items.map((setting) => (0, import_jsx_runtime15.jsx)(NavItem, { type: "setting", ...setting }, setting.to)) }) }) })
  ] });
};
var UserSection2 = () => {
  return (0, import_jsx_runtime15.jsxs)("div", { children: [
    (0, import_jsx_runtime15.jsx)("div", { className: "px-3", children: (0, import_jsx_runtime15.jsx)(Divider, { variant: "dashed" }) }),
    (0, import_jsx_runtime15.jsx)(UserMenu, {})
  ] });
};
var pages = routes3.pages.filter((ext) => !settingsRouteRegex.test(ext.path)).map((ext) => ext);
var RouteExtensions = createRouteMap(pages);
var pages2 = routes4.pages.filter((ext) => settingsRouteRegex.test(ext.path)).map((ext) => ext);
var SettingsExtensions = createRouteMap(pages2, "/settings");
var RouteMap = [
  {
    path: "/login",
    lazy: () => import("./login-66OAVR6W-46WBTKOV.js")
  },
  {
    path: "*",
    lazy: () => import("./no-match-YRNHGOT3-OYYGD64Q.js")
  },
  {
    path: "/invite",
    lazy: () => import("./invite-SFHYKYZ2-DU623FSR.js")
  },
  {
    element: (0, import_jsx_runtime16.jsx)(ProtectedRoute, {}),
    errorElement: (0, import_jsx_runtime16.jsx)(ErrorBoundary, {}),
    children: [
      {
        path: "/",
        element: (0, import_jsx_runtime16.jsx)(MainLayout, {}),
        children: [
          {
            index: true,
            errorElement: (0, import_jsx_runtime16.jsx)(ErrorBoundary, {}),
            lazy: () => import("./home-KSB2J7CS-3PJDP43T.js")
          },
          {
            path: "/products",
            errorElement: (0, import_jsx_runtime16.jsx)(ErrorBoundary, {}),
            handle: {
              crumb: () => "Products"
            },
            children: [
              {
                path: "",
                lazy: () => import("./product-list-OBX3PJVN-LSGZ2Z7Y.js"),
                children: [
                  {
                    path: "create",
                    lazy: () => import("./product-create-ZZF6M52P-JWZZSLLW.js")
                  },
                  {
                    path: "import",
                    lazy: () => import("./product-import-BL2P5RLL-2I3ZKA3S.js")
                  },
                  {
                    path: "export",
                    lazy: () => import("./product-export-4PKLIDDI-JKUJNUFY.js")
                  }
                ]
              },
              {
                path: ":id",
                errorElement: (0, import_jsx_runtime16.jsx)(ErrorBoundary, {}),
                Component: Outlet,
                loader: productLoader,
                handle: {
                  crumb: (data) => data.product.title
                },
                children: [
                  {
                    path: "",
                    lazy: () => import("./product-detail-NU2GHR6S-ANRKBVA3.js"),
                    children: [
                      {
                        path: "edit",
                        lazy: () => import("./product-edit-VZGCBJOZ-TNMGS7CS.js")
                      },
                      {
                        path: "edit-variant",
                        lazy: () => import("./product-variant-edit-C5Z6G7PE-MT5DRCPI.js")
                      },
                      {
                        path: "sales-channels",
                        lazy: () => import("./product-sales-channels-7TOWEYKN-P3S45S6J.js")
                      },
                      {
                        path: "attributes",
                        lazy: () => import("./product-attributes-ZMOK4R3Y-KTGF5EBJ.js")
                      },
                      {
                        path: "organization",
                        lazy: () => import("./product-organization-633MUSYD-FBBJBUZR.js")
                      },
                      {
                        path: "media",
                        lazy: () => import("./product-media-NV7MPTFA-WOO5EXKR.js")
                      },
                      {
                        path: "prices",
                        lazy: () => import("./product-prices-3EDHU64N-EPQREBI7.js")
                      },
                      {
                        path: "options/create",
                        lazy: () => import("./product-create-option-TMPXWVZT-MDWYQ2E6.js")
                      },
                      {
                        path: "options/:option_id/edit",
                        lazy: () => import("./product-edit-option-N7AWNJTC-AJTCECWG.js")
                      },
                      {
                        path: "variants/create",
                        lazy: () => import("./product-create-variant-LSLMEXNI-LXBZNBZ3.js")
                      },
                      {
                        path: "metadata/edit",
                        lazy: () => import("./product-metadata-2EFTNO6G-5DP2QF3J.js")
                      }
                    ]
                  },
                  {
                    path: "variants/:variant_id",
                    lazy: () => import("./product-variant-detail-DFQGUUCX-KBQ7JCOP.js"),
                    handle: {
                      crumb: (data) => data.variant.title
                    },
                    children: [
                      {
                        path: "edit",
                        lazy: () => import("./product-variant-edit-C5Z6G7PE-MT5DRCPI.js")
                      },
                      {
                        path: "prices",
                        lazy: () => import("./product-prices-3EDHU64N-EPQREBI7.js")
                      },
                      {
                        path: "manage-items",
                        lazy: () => import("./product-variant-manage-inventory-items-HXZU6HYY-INQHUPGA.js")
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            path: "/categories",
            errorElement: (0, import_jsx_runtime16.jsx)(ErrorBoundary, {}),
            handle: {
              crumb: () => "Categories"
            },
            children: [
              {
                path: "",
                lazy: () => import("./category-list-AMLMLIGZ-NNW7NUL7.js"),
                children: [
                  {
                    path: "create",
                    lazy: () => import("./category-create-UHAFTLCM-7FSXWCHH.js")
                  },
                  {
                    path: "organize",
                    lazy: () => import("./category-organize-FQ3UX54P-TO3QUSK4.js")
                  }
                ]
              },
              {
                path: ":id",
                lazy: () => import("./category-detail-YD4UZKSW-QMM7HVCT.js"),
                handle: {
                  crumb: (data) => data.product_category.name
                },
                children: [
                  {
                    path: "edit",
                    lazy: () => import("./category-edit-6Z73EFNK-K2Y3YIUH.js")
                  },
                  {
                    path: "products",
                    lazy: () => import("./category-products-WCLKSHSB-5TUCBKB6.js")
                  },
                  {
                    path: "organize",
                    lazy: () => import("./category-organize-FQ3UX54P-TO3QUSK4.js")
                  }
                ]
              }
            ]
          },
          {
            path: "/orders",
            errorElement: (0, import_jsx_runtime16.jsx)(ErrorBoundary, {}),
            handle: {
              crumb: () => "Orders"
            },
            children: [
              {
                path: "",
                lazy: () => import("./order-list-RIHDU2RP-D77FSLLT.js")
              },
              {
                path: ":id",
                lazy: () => import("./order-detail-4PSYTHXY-ENZLF75F.js"),
                children: [
                  {
                    path: "fulfillment",
                    lazy: () => import("./order-create-fulfillment-SDJZW6UF-AH7ABUAW.js")
                  },
                  {
                    path: "returns/:return_id/receive",
                    lazy: () => import("./order-receive-return-ERTUMF5H-K5NNS2GZ.js")
                  },
                  {
                    path: "allocate-items",
                    lazy: () => import("./order-allocate-items-DHQANWZQ-PPGSAJW7.js")
                  },
                  {
                    path: ":f_id/create-shipment",
                    lazy: () => import("./order-create-shipment-TZQASEZT-LVMTQYR4.js")
                  },
                  {
                    path: "returns",
                    lazy: () => import("./order-create-return-MCYRGOPK-6HG23GOI.js")
                  },
                  {
                    path: "claims",
                    lazy: () => import("./order-create-claim-GIGG2ALO-KI42CKBV.js")
                  },
                  {
                    path: "exchanges",
                    lazy: () => import("./order-create-exchange-TB6KKK6U-XXKGKABC.js")
                  },
                  {
                    path: "edits",
                    lazy: () => import("./order-create-edit-GINMM7A7-76J2TMMW.js")
                  },
                  {
                    path: "refund",
                    lazy: () => import("./order-create-refund-NQURUXNE-JI3UNYJP.js")
                  }
                ]
              }
            ]
          },
          {
            path: "/promotions",
            errorElement: (0, import_jsx_runtime16.jsx)(ErrorBoundary, {}),
            handle: {
              crumb: () => "Promotions"
            },
            children: [
              {
                path: "",
                lazy: () => import("./promotion-list-BM5UG4WE-4GGDXIBI.js")
              },
              {
                path: "create",
                lazy: () => import("./promotion-create-M6CANPQG-2G2MICEI.js")
              },
              {
                path: ":id",
                lazy: () => import("./promotion-detail-J4GXYIRZ-ETPSLVWP.js"),
                handle: {
                  // TODO: Re-add type when it's available again
                  crumb: (data) => {
                    var _a2;
                    return (_a2 = data.promotion) == null ? void 0 : _a2.code;
                  }
                },
                children: [
                  {
                    path: "edit",
                    lazy: () => import("./promotion-edit-details-WEBXZPEF-RVBFVGXV.js")
                  },
                  {
                    path: "add-to-campaign",
                    lazy: () => import("./promotion-add-campaign-EIQR53VG-BUKKEHOY.js")
                  },
                  {
                    path: ":ruleType/edit",
                    lazy: () => import("./edit-rules-C5HS4OIQ-CMVCJLG5.js")
                  }
                ]
              }
            ]
          },
          {
            path: "/campaigns",
            errorElement: (0, import_jsx_runtime16.jsx)(ErrorBoundary, {}),
            handle: { crumb: () => "Campaigns" },
            children: [
              {
                path: "",
                lazy: () => import("./campaign-list-XHC7EBKR-I46EODTO.js"),
                children: []
              },
              {
                path: "create",
                lazy: () => import("./campaign-create-BY3FYVMD-UAGACMGJ.js")
              },
              {
                path: ":id",
                lazy: () => import("./campaign-detail-AG7QV74F-WWWCDLZ3.js"),
                handle: { crumb: (data) => data.campaign.name },
                children: [
                  {
                    path: "edit",
                    lazy: () => import("./campaign-edit-CNEXZ3LO-MFK2T6B2.js")
                  },
                  {
                    path: "configuration",
                    lazy: () => import("./campaign-configuration-QZCQFDGK-O5ICH23J.js")
                  },
                  {
                    path: "edit-budget",
                    lazy: () => import("./campaign-budget-edit-VOVQMO4N-2LZNSAHF.js")
                  },
                  {
                    path: "add-promotions",
                    lazy: () => import("./add-campaign-promotions-JZFIMVPP-CL6T23QS.js")
                  }
                ]
              }
            ]
          },
          {
            path: "/collections",
            errorElement: (0, import_jsx_runtime16.jsx)(ErrorBoundary, {}),
            handle: {
              crumb: () => "Collections"
            },
            children: [
              {
                path: "",
                lazy: () => import("./collection-list-IRDCNK4J-LFHFDCXA.js"),
                children: [
                  {
                    path: "create",
                    lazy: () => import("./collection-create-LNBBJ4TH-XPQX6Y4Y.js")
                  }
                ]
              },
              {
                path: ":id",
                lazy: () => import("./collection-detail-V2CRLKYN-OYLDTEFL.js"),
                handle: {
                  crumb: (data) => data.collection.title
                },
                children: [
                  {
                    path: "edit",
                    lazy: () => import("./collection-edit-HZIVYZZN-VVT2CHI5.js")
                  },
                  {
                    path: "products",
                    lazy: () => import("./collection-add-products-FL7HLLYQ-WL5V47FI.js")
                  }
                ]
              }
            ]
          },
          {
            path: "/price-lists",
            errorElement: (0, import_jsx_runtime16.jsx)(ErrorBoundary, {}),
            handle: {
              crumb: () => "Price Lists"
            },
            children: [
              {
                path: "",
                lazy: () => import("./price-list-list-BNKQMWJP-WP4V26O5.js"),
                children: [
                  {
                    path: "create",
                    lazy: () => import("./price-list-create-RFC5CVYW-E762PAOZ.js")
                  }
                ]
              },
              {
                path: ":id",
                lazy: () => import("./price-list-detail-DVUBB6WC-NZFMRMSB.js"),
                handle: {
                  crumb: (data) => data.price_list.title
                },
                children: [
                  {
                    path: "edit",
                    lazy: () => import("./price-list-edit-XADEJ3H7-OCEYH3E5.js")
                  },
                  {
                    path: "configuration",
                    lazy: () => import("./price-list-configuration-LZAVU2YP-UM6RHQLY.js")
                  },
                  {
                    path: "products/add",
                    lazy: () => import("./price-list-prices-add-BOHWZU3U-PRO2CDER.js")
                  },
                  {
                    path: "products/edit",
                    lazy: () => import("./price-list-prices-edit-Z4KYRKIW-TQRK3JGQ.js")
                  }
                ]
              }
            ]
          },
          {
            path: "/customers",
            errorElement: (0, import_jsx_runtime16.jsx)(ErrorBoundary, {}),
            handle: {
              crumb: () => "Customers"
            },
            children: [
              {
                path: "",
                lazy: () => import("./customer-list-CCP4CH5D-J3FTTE3L.js"),
                children: [
                  {
                    path: "create",
                    lazy: () => import("./customer-create-M7567P7U-SOTII6QF.js")
                  }
                ]
              },
              {
                path: ":id",
                lazy: () => import("./customer-detail-DTVXSW24-YN3GS53J.js"),
                handle: {
                  // Re-add type when it's available again
                  crumb: (data) => data.customer.email
                },
                children: [
                  {
                    path: "edit",
                    lazy: () => import("./customer-edit-OIR6XOU2-TRM3GR46.js")
                  },
                  {
                    path: "add-customer-groups",
                    lazy: () => import("./customers-add-customer-group-ZAL2ANBM-LPKAMJLZ.js")
                  },
                  {
                    path: "metadata/edit",
                    lazy: () => import("./customer-metadata-5AZXD4KB-AELXUDZA.js")
                  }
                ]
              }
            ]
          },
          {
            path: "/customer-groups",
            errorElement: (0, import_jsx_runtime16.jsx)(ErrorBoundary, {}),
            handle: {
              crumb: () => "Customer Groups"
            },
            children: [
              {
                path: "",
                lazy: () => import("./customer-group-list-CPZ6Y4BS-CBTRNG2W.js"),
                children: [
                  {
                    path: "create",
                    lazy: () => import("./customer-group-create-CHEPINUZ-EMCE2GML.js")
                  }
                ]
              },
              {
                path: ":id",
                lazy: () => import("./customer-group-detail-6ZJ5M4ON-ROAYXG6B.js"),
                handle: {
                  crumb: (data) => data.customer_group.name
                },
                children: [
                  {
                    path: "edit",
                    lazy: () => import("./customer-group-edit-STKCDUCV-6GAE77NQ.js")
                  },
                  {
                    path: "add-customers",
                    lazy: () => import("./customer-group-add-customers-SRTNBN5T-UQF7OPY4.js")
                  },
                  {
                    path: "metadata/edit",
                    lazy: () => import("./customer-group-metadata-TZ76XFUN-RDDGKJAG.js")
                  }
                ]
              }
            ]
          },
          {
            path: "/reservations",
            errorElement: (0, import_jsx_runtime16.jsx)(ErrorBoundary, {}),
            handle: {
              crumb: () => "Reservations"
            },
            children: [
              {
                path: "",
                lazy: () => import("./reservation-list-K3GSIF74-OM2ZDC2L.js"),
                children: [
                  {
                    path: "create",
                    lazy: () => import("./reservation-create-2KXQPJEG-SR5HE22L.js")
                  }
                ]
              },
              {
                path: ":id",
                lazy: () => import("./reservation-detail-EE5WFTMG-MF6JNFMG.js"),
                handle: {
                  crumb: ({ reservation }) => {
                    var _a2, _b;
                    return ((_a2 = reservation == null ? void 0 : reservation.inventory_item) == null ? void 0 : _a2.title) ?? ((_b = reservation == null ? void 0 : reservation.inventory_item) == null ? void 0 : _b.sku) ?? (reservation == null ? void 0 : reservation.id);
                  }
                },
                children: [
                  {
                    path: "edit",
                    lazy: () => import("./edit-reservation-64CPBLHP-PBXJAISE.js")
                  }
                ]
              }
            ]
          },
          {
            path: "/inventory",
            errorElement: (0, import_jsx_runtime16.jsx)(ErrorBoundary, {}),
            handle: {
              crumb: () => "Inventory"
            },
            children: [
              {
                path: "",
                lazy: () => import("./inventory-list-G3KC33WX-X5KWD7SJ.js"),
                children: [
                  {
                    path: "create",
                    lazy: () => import("./inventory-create-OPOX3OOP-6PMXVEAJ.js")
                  }
                ]
              },
              {
                path: ":id",
                lazy: () => import("./inventory-detail-REBHGR7T-T2UCI3S4.js"),
                handle: {
                  crumb: (data) => data.inventory_item.title ?? data.inventory_item.sku
                },
                children: [
                  {
                    path: "edit",
                    lazy: () => import("./edit-inventory-item-RIHBW5Y7-OOTBP4MM.js")
                  },
                  {
                    path: "attributes",
                    lazy: () => import("./edit-inventory-item-attributes-PPJRKVVK-XXQNAFUR.js")
                  },
                  {
                    path: "locations",
                    lazy: () => import("./manage-locations-UWBO5EH5-RDGBRM3L.js")
                  },
                  {
                    path: "locations/:location_id",
                    lazy: () => import("./adjust-inventory-UYUBWTAS-HYAYFZRT.js")
                  },
                  {
                    // TODO: create reservation
                    path: "reservations",
                    lazy: () => import("./customer-edit-OIR6XOU2-TRM3GR46.js")
                  },
                  {
                    // TODO: edit reservation
                    path: "reservations/:reservation_id",
                    lazy: () => import("./customer-edit-OIR6XOU2-TRM3GR46.js")
                  }
                ]
              }
            ]
          },
          ...RouteExtensions
        ]
      }
    ]
  },
  {
    element: (0, import_jsx_runtime16.jsx)(ProtectedRoute, {}),
    errorElement: (0, import_jsx_runtime16.jsx)(ErrorBoundary, {}),
    children: [
      {
        path: "/settings",
        handle: {
          crumb: () => "Settings"
        },
        element: (0, import_jsx_runtime16.jsx)(SettingsLayout, {}),
        children: [
          {
            index: true,
            errorElement: (0, import_jsx_runtime16.jsx)(ErrorBoundary, {}),
            lazy: () => import("./settings-FQUPXMWF-J7VAQOIX.js")
          },
          {
            path: "profile",
            errorElement: (0, import_jsx_runtime16.jsx)(ErrorBoundary, {}),
            lazy: () => import("./profile-detail-KAYSNSBM-OESRLBJN.js"),
            handle: {
              crumb: () => "Profile"
            },
            children: [
              {
                path: "edit",
                lazy: () => import("./profile-edit-SORW2ZPG-CTTKUIPL.js")
              }
            ]
          },
          {
            path: "regions",
            errorElement: (0, import_jsx_runtime16.jsx)(ErrorBoundary, {}),
            element: (0, import_jsx_runtime16.jsx)(Outlet, {}),
            handle: {
              crumb: () => "Regions"
            },
            children: [
              {
                path: "",
                lazy: () => import("./region-list-KFE6BSOP-BYJLUIFF.js"),
                children: [
                  {
                    path: "create",
                    lazy: () => import("./region-create-FLBHOXF3-Z2QEUI4B.js")
                  }
                ]
              },
              {
                path: ":id",
                lazy: () => import("./region-detail-4C3WKMA5-OCPTJNZS.js"),
                handle: {
                  crumb: (data) => data.region.name
                },
                children: [
                  {
                    path: "edit",
                    lazy: () => import("./region-edit-TLBDVX5V-DQGQSS4S.js")
                  },
                  {
                    path: "countries/add",
                    lazy: () => import("./region-add-countries-ESNXU7XQ-ZHHX6TAE.js")
                  }
                ]
              }
            ]
          },
          {
            path: "store",
            errorElement: (0, import_jsx_runtime16.jsx)(ErrorBoundary, {}),
            lazy: () => import("./store-detail-XH3JB43A-WFDASX4S.js"),
            handle: {
              crumb: () => "Store"
            },
            children: [
              {
                path: "edit",
                lazy: () => import("./store-edit-Q35YLGGN-REYYS2TY.js")
              },
              {
                path: "currencies",
                lazy: () => import("./store-add-currencies-KZ4ELLCK-SGFQOYO5.js")
              },
              {
                path: "metadata/edit",
                lazy: () => import("./store-metadata-GAVC3ANW-6B3TWDIF.js")
              }
            ]
          },
          {
            path: "users",
            errorElement: (0, import_jsx_runtime16.jsx)(ErrorBoundary, {}),
            element: (0, import_jsx_runtime16.jsx)(Outlet, {}),
            handle: {
              crumb: () => "Users"
            },
            children: [
              {
                path: "",
                lazy: () => import("./user-list-QJHLOGJT-CT34GWMT.js"),
                children: [
                  {
                    path: "invite",
                    lazy: () => import("./user-invite-ZHTM6PEF-BOHL2PFR.js")
                  }
                ]
              },
              {
                path: ":id",
                lazy: () => import("./user-detail-TY7LR6K3-ZSE3W7VJ.js"),
                handle: {
                  crumb: (data) => data.user.email
                },
                children: [
                  {
                    path: "edit",
                    lazy: () => import("./user-edit-UQDGSJ3A-PNHIQ5XB.js")
                  }
                ]
              }
            ]
          },
          {
            path: "sales-channels",
            errorElement: (0, import_jsx_runtime16.jsx)(ErrorBoundary, {}),
            element: (0, import_jsx_runtime16.jsx)(Outlet, {}),
            handle: {
              crumb: () => "Sales Channels"
            },
            children: [
              {
                path: "",
                lazy: () => import("./sales-channel-list-XN6DATJV-IG3D32Q4.js"),
                children: [
                  {
                    path: "create",
                    lazy: () => import("./sales-channel-create-E4EKXXAG-ITQLDFUP.js")
                  }
                ]
              },
              {
                path: ":id",
                lazy: () => import("./sales-channel-detail-VSDHCGA4-3LF2NB4Q.js"),
                handle: {
                  crumb: (data) => data.sales_channel.name
                },
                children: [
                  {
                    path: "edit",
                    lazy: () => import("./sales-channel-edit-IDK4WU6Y-OJQZXAHX.js")
                  },
                  {
                    path: "add-products",
                    lazy: () => import("./sales-channel-add-products-CIAGE7RX-TBG4ZUU2.js")
                  }
                ]
              }
            ]
          },
          {
            path: "locations",
            errorElement: (0, import_jsx_runtime16.jsx)(ErrorBoundary, {}),
            element: (0, import_jsx_runtime16.jsx)(Outlet, {}),
            handle: {
              crumb: () => "Locations & Shipping"
            },
            children: [
              {
                path: "",
                lazy: () => import("./location-list-4GXGRIGI-XXYCTWJT.js")
              },
              {
                path: "create",
                lazy: () => import("./location-create-56TFACFX-JUDOQB3O.js")
              },
              {
                path: "shipping-profiles",
                element: (0, import_jsx_runtime16.jsx)(Outlet, {}),
                handle: {
                  crumb: () => "Shipping Profiles"
                },
                children: [
                  {
                    path: "",
                    lazy: () => import("./shipping-profiles-list-LTGVOZXQ-7V7DM2S2.js"),
                    children: [
                      {
                        path: "create",
                        lazy: () => import("./shipping-profile-create-VQOZOCD3-LA6VBI6H.js")
                      }
                    ]
                  },
                  {
                    path: ":id",
                    handle: {
                      crumb: (data) => data.shipping_profile.name
                    },
                    lazy: () => import("./shipping-profile-detail-M76VUWCQ-5UB2HQXB.js")
                  }
                ]
              },
              {
                path: "shipping-option-types",
                errorElement: (0, import_jsx_runtime16.jsx)(ErrorBoundary, {}),
                element: (0, import_jsx_runtime16.jsx)(Outlet, {}),
                handle: {
                  crumb: () => "Shipping Option Types"
                }
              },
              {
                path: ":location_id",
                lazy: () => import("./location-detail-KGAAZG3W-VUGSEM43.js"),
                handle: {
                  crumb: (data) => data.stock_location.name
                },
                children: [
                  {
                    path: "edit",
                    lazy: () => import("./location-edit-64Z47DVY-FJ727WGO.js")
                  },
                  {
                    path: "sales-channels",
                    lazy: () => import("./location-sales-channels-YTH3L2QV-MMN5LCYI.js")
                  },
                  {
                    path: "fulfillment-providers",
                    lazy: () => import("./location-fulfillment-providers-HBWT35ID-3AZEXFYE.js")
                  },
                  {
                    path: "fulfillment-set/:fset_id",
                    children: [
                      {
                        path: "service-zones/create",
                        lazy: () => import("./location-service-zone-create-VOKX6RHZ-WD4IPFAI.js")
                      },
                      {
                        path: "service-zone/:zone_id",
                        children: [
                          {
                            path: "edit",
                            lazy: () => import("./location-service-zone-edit-JVAZUFJ4-SOCM3AKK.js")
                          },
                          {
                            path: "areas",
                            lazy: () => import("./location-service-zone-manage-areas-4LWK2S62-WHXRV6LB.js")
                          },
                          {
                            path: "shipping-option",
                            children: [
                              {
                                path: "create",
                                lazy: () => import("./location-service-zone-shipping-option-create-T6Q7NWEI-QICXW32F.js")
                              },
                              {
                                path: ":so_id",
                                children: [
                                  {
                                    path: "edit",
                                    lazy: () => import("./location-service-zone-shipping-option-edit-JYQ72XU3-RSIOBSZY.js")
                                  },
                                  {
                                    path: "pricing",
                                    lazy: () => import("./location-service-zone-shipping-option-pricing-GATN546G-D2SLGZS2.js")
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            path: "product-tags",
            errorElement: (0, import_jsx_runtime16.jsx)(ErrorBoundary, {}),
            element: (0, import_jsx_runtime16.jsx)(Outlet, {}),
            handle: {
              crumb: () => "Product Tags"
            },
            children: [
              {
                path: "",
                lazy: () => import("./product-tag-list-4KHU7LFM-MAQHCRKD.js"),
                children: [
                  {
                    path: "create",
                    lazy: () => import("./product-tag-create-EEGMEV2X-B33NSNWC.js")
                  }
                ]
              },
              {
                path: ":id",
                lazy: () => import("./product-tag-detail-MKFBRM7Z-TYSG7LJ2.js"),
                handle: {
                  crumb: (data) => data.product_tag.value
                },
                children: [
                  {
                    path: "edit",
                    lazy: () => import("./product-tag-edit-AGJAF4HU-3QPJQTAN.js")
                  }
                ]
              }
            ]
          },
          {
            path: "workflows",
            errorElement: (0, import_jsx_runtime16.jsx)(ErrorBoundary, {}),
            element: (0, import_jsx_runtime16.jsx)(Outlet, {}),
            handle: {
              crumb: () => "Workflows"
            },
            children: [
              {
                path: "",
                lazy: () => import("./workflow-execution-list-XMVS6WKZ-KA46AZ2D.js")
              },
              {
                path: ":id",
                lazy: () => import("./workflow-execution-detail-EPNVOO2Q-V3T47ZUB.js"),
                handle: {
                  crumb: (data) => {
                    if (!data) {
                      return "";
                    }
                    return data.workflow.name;
                  }
                }
              }
            ]
          },
          {
            path: "product-types",
            errorElement: (0, import_jsx_runtime16.jsx)(ErrorBoundary, {}),
            element: (0, import_jsx_runtime16.jsx)(Outlet, {}),
            handle: {
              crumb: () => "Product Types"
            },
            children: [
              {
                path: "",
                lazy: () => import("./product-type-list-O4VO3QAQ-XUY3HXGQ.js"),
                children: [
                  {
                    path: "create",
                    lazy: () => import("./product-type-create-2J4FWJX2-OMU5LMEA.js")
                  }
                ]
              },
              {
                path: ":id",
                lazy: () => import("./product-type-detail-M7JDLF4X-P7IV563K.js"),
                handle: {
                  crumb: (data) => data.product_type.value
                },
                children: [
                  {
                    path: "edit",
                    lazy: () => import("./product-type-edit-7M6QIHB7-KIDPLBGB.js")
                  }
                ]
              }
            ]
          },
          {
            path: "publishable-api-keys",
            errorElement: (0, import_jsx_runtime16.jsx)(ErrorBoundary, {}),
            element: (0, import_jsx_runtime16.jsx)(Outlet, {}),
            handle: {
              crumb: () => "Publishable API Keys"
            },
            children: [
              {
                path: "",
                element: (0, import_jsx_runtime16.jsx)(Outlet, {}),
                children: [
                  {
                    path: "",
                    lazy: () => import("./api-key-management-list-B45Q4THV-LNMJPASP.js"),
                    children: [
                      {
                        path: "create",
                        lazy: () => import("./api-key-management-create-4LU2GPN3-6GI3UBAL.js")
                      }
                    ]
                  }
                ]
              },
              {
                path: ":id",
                lazy: () => import("./api-key-management-detail-U4SQ4TQ5-GO5BLNLK.js"),
                handle: {
                  crumb: (data) => {
                    return data.api_key.title;
                  }
                },
                children: [
                  {
                    path: "edit",
                    lazy: () => import("./api-key-management-edit-TTHWCNBU-2LLRLLW5.js")
                  },
                  {
                    path: "sales-channels",
                    lazy: () => import("./api-key-management-sales-channels-WVAOPOJT-MET3F335.js")
                  }
                ]
              }
            ]
          },
          {
            path: "secret-api-keys",
            errorElement: (0, import_jsx_runtime16.jsx)(ErrorBoundary, {}),
            element: (0, import_jsx_runtime16.jsx)(Outlet, {}),
            handle: {
              crumb: () => "Secret API Keys"
            },
            children: [
              {
                path: "",
                element: (0, import_jsx_runtime16.jsx)(Outlet, {}),
                children: [
                  {
                    path: "",
                    lazy: () => import("./api-key-management-list-B45Q4THV-LNMJPASP.js"),
                    children: [
                      {
                        path: "create",
                        lazy: () => import("./api-key-management-create-4LU2GPN3-6GI3UBAL.js")
                      }
                    ]
                  }
                ]
              },
              {
                path: ":id",
                lazy: () => import("./api-key-management-detail-U4SQ4TQ5-GO5BLNLK.js"),
                handle: {
                  crumb: (data) => {
                    return data.api_key.title;
                  }
                },
                children: [
                  {
                    path: "edit",
                    lazy: () => import("./api-key-management-edit-TTHWCNBU-2LLRLLW5.js")
                  }
                ]
              }
            ]
          },
          {
            path: "tax-regions",
            errorElement: (0, import_jsx_runtime16.jsx)(ErrorBoundary, {}),
            element: (0, import_jsx_runtime16.jsx)(Outlet, {}),
            handle: {
              crumb: () => "Tax Regions"
            },
            children: [
              {
                path: "",
                lazy: () => import("./tax-region-list-XFOXYK4H-MQ5UOKCE.js"),
                children: [
                  {
                    path: "create",
                    lazy: () => import("./tax-region-create-GSMVM7XZ-R7FNUAMV.js")
                  }
                ]
              },
              {
                path: ":id",
                Component: Outlet,
                loader: taxRegionLoader,
                handle: {
                  crumb: (data) => {
                    var _a2, _b;
                    return ((_a2 = getCountryByIso2(data.tax_region.country_code)) == null ? void 0 : _a2.display_name) || ((_b = data.tax_region.country_code) == null ? void 0 : _b.toUpperCase());
                  }
                },
                children: [
                  {
                    path: "",
                    lazy: () => import("./tax-region-detail-Y3WBSKKS-3GQSX27O.js"),
                    children: [
                      {
                        path: "provinces/create",
                        lazy: () => import("./tax-region-province-create-NSHGFAJS-RPFINP5B.js")
                      },
                      {
                        path: "overrides/create",
                        lazy: () => import("./tax-region-tax-override-create-SQHSJF6X-2PQWIEJW.js")
                      },
                      {
                        path: "overrides/:tax_rate_id/edit",
                        lazy: () => import("./tax-region-tax-override-edit-VNY7MZLX-SOG6HH65.js")
                      },
                      {
                        path: "tax-rates/create",
                        lazy: () => import("./tax-region-tax-rate-create-WGVRXBBY-GHJ36MLI.js")
                      },
                      {
                        path: "tax-rates/:tax_rate_id/edit",
                        lazy: () => import("./tax-region-tax-rate-edit-I5D5GXOJ-FVZUWKXP.js")
                      }
                    ]
                  },
                  {
                    path: "provinces/:province_id",
                    lazy: () => import("./tax-region-province-detail-HJJ3RSGN-EM3IONFR.js"),
                    handle: {
                      crumb: (data) => {
                        var _a2, _b;
                        const countryCode = (_a2 = data.tax_region.country_code) == null ? void 0 : _a2.toUpperCase();
                        const provinceCode = (_b = data.tax_region.province_code) == null ? void 0 : _b.toUpperCase();
                        const isValid = isProvinceInCountry(
                          countryCode,
                          provinceCode
                        );
                        return isValid ? getProvinceByIso2(provinceCode) : provinceCode;
                      }
                    },
                    children: [
                      {
                        path: "tax-rates/create",
                        lazy: () => import("./tax-region-tax-rate-create-WGVRXBBY-GHJ36MLI.js")
                      },
                      {
                        path: "tax-rates/:tax_rate_id/edit",
                        lazy: () => import("./tax-region-tax-rate-edit-I5D5GXOJ-FVZUWKXP.js")
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            path: "return-reasons",
            errorElement: (0, import_jsx_runtime16.jsx)(ErrorBoundary, {}),
            element: (0, import_jsx_runtime16.jsx)(Outlet, {}),
            handle: {
              crumb: () => "Return Reasons"
            },
            children: [
              {
                path: "",
                lazy: () => import("./return-reason-list-VDWGKFYC-SNQUEBTO.js"),
                children: [
                  {
                    path: "create",
                    lazy: () => import("./return-reason-create-ZRWM6YPV-4UAK5B4D.js")
                  },
                  {
                    path: ":id",
                    children: [
                      {
                        path: "edit",
                        lazy: () => import("./return-reason-edit-JL4T6NVQ-YTFH3MSX.js")
                      }
                    ]
                  }
                ]
              }
            ]
          },
          ...SettingsExtensions
        ]
      }
    ]
  }
];
var router = createBrowserRouter(RouteMap, {
  basename: __BASE__ || "/"
});
var RouterProvider2 = () => {
  return (0, import_jsx_runtime17.jsx)(RouterProvider, { router });
};
function App() {
  return (0, import_jsx_runtime18.jsx)(HelmetProvider, { children: (0, import_jsx_runtime18.jsx)(QueryClientProvider, { client: queryClient, children: (0, import_jsx_runtime18.jsxs)(ThemeProvider, { children: [
    (0, import_jsx_runtime18.jsx)(I18n, {}),
    (0, import_jsx_runtime18.jsx)(TooltipProvider, { children: (0, import_jsx_runtime18.jsx)(I18nProvider2, { children: (0, import_jsx_runtime18.jsx)(RouterProvider2, {}) }) }),
    (0, import_jsx_runtime18.jsx)(Toaster, {})
  ] }) }) });
}
var app_default = App;
export {
  app_default as default
};
//# sourceMappingURL=@medusajs_dashboard.js.map
