import {
  useShippingOptionPriceColumns
} from "./chunk-AYHVYYPA.js";
import {
  DataGrid
} from "./chunk-IW7WG74X.js";
import "./chunk-55MYIBGD.js";
import "./chunk-TI6Y7EUW.js";
import {
  castNumber
} from "./chunk-LKYIPMJI.js";
import {
  RouteFocusModal,
  useRouteModal
} from "./chunk-3P6F4Q7W.js";
import "./chunk-7PAMQDEU.js";
import "./chunk-O47TKOMU.js";
import {
  useShippingOption,
  useUpdateShippingOptions
} from "./chunk-YEEFU7KP.js";
import "./chunk-VN2HND4I.js";
import {
  useStore
} from "./chunk-ICPBA7GK.js";
import {
  useRegions
} from "./chunk-FREJU5EQ.js";
import {
  usePricePreferences
} from "./chunk-4UBJQZN6.js";
import "./chunk-YSLQHU2M.js";
import "./chunk-SWXOOP7W.js";
import "./chunk-4UMAAWOP.js";
import "./chunk-Y5OEN2X7.js";
import {
  t
} from "./chunk-NMISSY3S.js";
import {
  numberType,
  objectType,
  recordType,
  stringType
} from "./chunk-D6YTPD33.js";
import {
  useForm
} from "./chunk-TKBVWLOU.js";
import "./chunk-QDFILGGU.js";
import "./chunk-ZSXFNTF6.js";
import {
  Button,
  toast,
  useTranslation
} from "./chunk-ZUPX4YFG.js";
import {
  json,
  useParams
} from "./chunk-HTGWU6KF.js";
import "./chunk-64MXM5QD.js";
import "./chunk-3VI6QF3M.js";
import {
  require_jsx_runtime
} from "./chunk-P6CFP5BP.js";
import {
  __toESM,
  require_react
} from "./chunk-H5NG3XTT.js";

// node_modules/@medusajs/dashboard/dist/location-service-zone-shipping-option-pricing-GATN546G.mjs
var import_react = __toESM(require_react(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var getInitialCurrencyPrices = (prices) => {
  const ret = {};
  prices.forEach((p) => {
    if (p.price_rules.length) {
      return;
    }
    ret[p.currency_code] = p.amount;
  });
  return ret;
};
var getInitialRegionPrices = (prices) => {
  const ret = {};
  prices.forEach((p) => {
    if (p.price_rules.length) {
      const regionId = p.price_rules[0].value;
      ret[regionId] = p.amount;
    }
  });
  return ret;
};
var EditShippingOptionPricingSchema = objectType({
  region_prices: recordType(
    stringType(),
    stringType().or(numberType()).optional()
  ),
  currency_prices: recordType(
    stringType(),
    stringType().or(numberType()).optional()
  )
});
function EditShippingOptionsPricingForm({
  shippingOption
}) {
  const { t: t2 } = useTranslation();
  const { handleSuccess } = useRouteModal();
  const form = useForm({
    defaultValues: {
      region_prices: getInitialRegionPrices(shippingOption.prices),
      currency_prices: getInitialCurrencyPrices(shippingOption.prices)
    },
    resolver: t(EditShippingOptionPricingSchema)
  });
  const { mutateAsync, isPending } = useUpdateShippingOptions(shippingOption.id);
  const {
    store,
    isLoading: isStoreLoading,
    isError: isStoreError,
    error: storeError
  } = useStore();
  const currencies = (0, import_react.useMemo)(
    () => {
      var _a;
      return ((_a = store == null ? void 0 : store.supported_currencies) == null ? void 0 : _a.map((c) => c.currency_code)) || [];
    },
    [store]
  );
  const {
    regions,
    isLoading: isRegionsLoading,
    isError: isRegionsError,
    error: regionsError
  } = useRegions({
    fields: "id,name,currency_code",
    limit: 999
  });
  const { price_preferences: pricePreferences } = usePricePreferences({});
  const { setCloseOnEscape } = useRouteModal();
  const columns = useShippingOptionPriceColumns({
    currencies,
    regions,
    pricePreferences
  });
  const data = (0, import_react.useMemo)(
    () => [[...currencies || [], ...regions || []]],
    [currencies, regions]
  );
  const handleSubmit = form.handleSubmit(async (data2) => {
    const currencyPrices = Object.entries(data2.currency_prices).map(([code, value]) => {
      if (value === "" || value === void 0) {
        return void 0;
      }
      const currencyExists = currencies.some((currencyCode) => currencyCode.toLowerCase() == code.toLowerCase());
      if (!currencyExists) {
        return void 0;
      }
      const amount = castNumber(value);
      const priceRecord = {
        currency_code: code,
        amount
      };
      const price = shippingOption.prices.find(
        (p) => p.currency_code === code && !p.price_rules.length
      );
      if (price) {
        priceRecord["id"] = price.id;
      }
      return priceRecord;
    }).filter((p) => !!p);
    const regionPrices = Object.entries(data2.region_prices).map(([region_id, value]) => {
      if (value === "" || value === void 0) {
        return void 0;
      }
      const regionExists = regions == null ? void 0 : regions.some((region) => region.id === region_id);
      if (!regionExists) {
        return void 0;
      }
      const amount = castNumber(value);
      const priceRecord = {
        region_id,
        amount
      };
      return priceRecord;
    }).filter((p) => !!p);
    await mutateAsync(
      {
        prices: [...currencyPrices, ...regionPrices]
      },
      {
        onSuccess: () => {
          toast.success(t2("general.success"));
          handleSuccess();
        },
        onError: (e) => {
          toast.error(e.message);
        }
      }
    );
  });
  const isLoading = isStoreLoading || isRegionsLoading || !currencies || !regions;
  if (isStoreError) {
    throw storeError;
  }
  if (isRegionsError) {
    throw regionsError;
  }
  return (0, import_jsx_runtime.jsx)(RouteFocusModal.Form, { form, children: (0, import_jsx_runtime.jsxs)(
    "form",
    {
      className: "flex h-full flex-col overflow-hidden",
      onSubmit: handleSubmit,
      children: [
        (0, import_jsx_runtime.jsx)(RouteFocusModal.Header, {}),
        (0, import_jsx_runtime.jsx)(RouteFocusModal.Body, { children: (0, import_jsx_runtime.jsx)("div", { className: "flex size-full flex-col divide-y overflow-hidden", children: (0, import_jsx_runtime.jsx)(
          DataGrid,
          {
            isLoading,
            data,
            columns,
            state: form,
            onEditingChange: (editing) => setCloseOnEscape(!editing)
          }
        ) }) }),
        (0, import_jsx_runtime.jsx)(RouteFocusModal.Footer, { children: (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center justify-end gap-x-2", children: [
          (0, import_jsx_runtime.jsx)(RouteFocusModal.Close, { asChild: true, children: (0, import_jsx_runtime.jsx)(Button, { variant: "secondary", size: "small", children: t2("actions.cancel") }) }),
          (0, import_jsx_runtime.jsx)(
            Button,
            {
              size: "small",
              className: "whitespace-nowrap",
              isLoading: isPending,
              onClick: handleSubmit,
              type: "button",
              children: t2("actions.save")
            }
          )
        ] }) })
      ]
    }
  ) });
}
function LocationServiceZoneShippingOptionPricing() {
  const { so_id, location_id } = useParams();
  if (!so_id) {
    throw json({
      message: "Shipping Option ID paramater is missing",
      status: 404
    });
  }
  const { shipping_option: shippingOption, isError, error } = useShippingOption(so_id, {
    fields: "*prices,*prices.price_rules"
  });
  if (isError) {
    throw error;
  }
  return (0, import_jsx_runtime2.jsx)(RouteFocusModal, { prev: `/settings/locations/${location_id}`, children: shippingOption && (0, import_jsx_runtime2.jsx)(EditShippingOptionsPricingForm, { shippingOption }) });
}
export {
  LocationServiceZoneShippingOptionPricing as Component
};
//# sourceMappingURL=location-service-zone-shipping-option-pricing-GATN546G-D2SLGZS2.js.map
