import {
  useShippingOptionPriceColumns
} from "./chunk-AYHVYYPA.js";
import {
  ShippingOptionPriceType
} from "./chunk-6RW6WFUL.js";
import {
  formatProvider
} from "./chunk-6EUK4TFP.js";
import {
  useComboboxData
} from "./chunk-7TICE4UP.js";
import {
  Combobox
} from "./chunk-EWBNMDEK.js";
import {
  DataGrid
} from "./chunk-IW7WG74X.js";
import "./chunk-55MYIBGD.js";
import "./chunk-TI6Y7EUW.js";
import {
  SwitchBox
} from "./chunk-52JADW6C.js";
import {
  castNumber
} from "./chunk-LKYIPMJI.js";
import {
  RouteFocusModal,
  useRouteModal
} from "./chunk-3P6F4Q7W.js";
import "./chunk-2T2WSTEX.js";
import "./chunk-7PAMQDEU.js";
import "./chunk-O47TKOMU.js";
import {
  Divider
} from "./chunk-LRCLMHMB.js";
import {
  useCreateShippingOptions
} from "./chunk-YEEFU7KP.js";
import {
  useStockLocation
} from "./chunk-VN2HND4I.js";
import {
  useStore
} from "./chunk-ICPBA7GK.js";
import {
  useRegions
} from "./chunk-FREJU5EQ.js";
import {
  usePricePreferences
} from "./chunk-4UBJQZN6.js";
import "./chunk-YSLQHU2M.js";
import "./chunk-K4BQKT4B.js";
import "./chunk-SWXOOP7W.js";
import "./chunk-4UMAAWOP.js";
import "./chunk-Y5OEN2X7.js";
import {
  t
} from "./chunk-NMISSY3S.js";
import {
  z
} from "./chunk-D6YTPD33.js";
import {
  Form,
  useForm
} from "./chunk-TKBVWLOU.js";
import "./chunk-QDFILGGU.js";
import {
  sdk
} from "./chunk-ZSXFNTF6.js";
import {
  Button,
  Heading,
  Input,
  ProgressTabs,
  RadioGroup,
  Text,
  toast,
  useTranslation
} from "./chunk-ZUPX4YFG.js";
import {
  json,
  useParams,
  useSearchParams
} from "./chunk-HTGWU6KF.js";
import "./chunk-64MXM5QD.js";
import "./chunk-3VI6QF3M.js";
import {
  require_jsx_runtime
} from "./chunk-P6CFP5BP.js";
import {
  __toESM,
  require_react
} from "./chunk-H5NG3XTT.js";

// node_modules/@medusajs/dashboard/dist/location-service-zone-shipping-option-create-T6Q7NWEI.mjs
var import_react = __toESM(require_react(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_react2 = __toESM(require_react(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1);
var CreateShippingOptionDetailsForm = ({
  form,
  isReturn = false,
  zone,
  locationId
}) => {
  const { t: t2 } = useTranslation();
  const shippingProfiles = useComboboxData({
    queryFn: (params) => sdk.admin.shippingProfile.list(params),
    queryKey: ["shipping_profiles"],
    getOptions: (data) => data.shipping_profiles.map((profile) => ({
      label: profile.name,
      value: profile.id
    }))
  });
  const fulfillmentProviders = useComboboxData({
    queryFn: (params) => sdk.admin.fulfillmentProvider.list({
      ...params,
      stock_location_id: locationId
    }),
    queryKey: ["fulfillment_providers"],
    getOptions: (data) => data.fulfillment_providers.map((provider) => ({
      label: formatProvider(provider.id),
      value: provider.id
    }))
  });
  return (0, import_jsx_runtime.jsx)("div", { className: "flex flex-1 flex-col items-center overflow-y-auto", children: (0, import_jsx_runtime.jsxs)("div", { className: "flex w-full max-w-[720px] flex-col gap-y-8 px-2 py-16", children: [
    (0, import_jsx_runtime.jsxs)("div", { children: [
      (0, import_jsx_runtime.jsx)(Heading, { children: t2(
        `stockLocations.shippingOptions.create.${isReturn ? "returns" : "shipping"}.header`,
        {
          zone: zone.name
        }
      ) }),
      (0, import_jsx_runtime.jsx)(Text, { size: "small", className: "text-ui-fg-subtle", children: t2(
        `stockLocations.shippingOptions.create.${isReturn ? "returns" : "shipping"}.hint`
      ) })
    ] }),
    (0, import_jsx_runtime.jsx)(
      Form.Field,
      {
        control: form.control,
        name: "price_type",
        render: ({ field }) => {
          return (0, import_jsx_runtime.jsxs)(Form.Item, { children: [
            (0, import_jsx_runtime.jsx)(Form.Label, { children: t2("stockLocations.shippingOptions.fields.priceType.label") }),
            (0, import_jsx_runtime.jsx)(Form.Control, { children: (0, import_jsx_runtime.jsxs)(
              RadioGroup,
              {
                className: "grid grid-cols-1 gap-4 md:grid-cols-2",
                ...field,
                onValueChange: field.onChange,
                children: [
                  (0, import_jsx_runtime.jsx)(
                    RadioGroup.ChoiceBox,
                    {
                      className: "flex-1",
                      value: "flat",
                      label: t2(
                        "stockLocations.shippingOptions.fields.priceType.options.fixed.label"
                      ),
                      description: t2(
                        "stockLocations.shippingOptions.fields.priceType.options.fixed.hint"
                      )
                    }
                  ),
                  (0, import_jsx_runtime.jsx)(
                    RadioGroup.ChoiceBox,
                    {
                      className: "flex-1",
                      value: "calculated",
                      label: t2(
                        "stockLocations.shippingOptions.fields.priceType.options.calculated.label"
                      ),
                      description: t2(
                        "stockLocations.shippingOptions.fields.priceType.options.calculated.hint"
                      )
                    }
                  )
                ]
              }
            ) }),
            (0, import_jsx_runtime.jsx)(Form.ErrorMessage, {})
          ] });
        }
      }
    ),
    (0, import_jsx_runtime.jsx)("div", { className: "grid grid-cols-1 gap-4 md:grid-cols-2", children: (0, import_jsx_runtime.jsx)(
      Form.Field,
      {
        control: form.control,
        name: "name",
        render: ({ field }) => {
          return (0, import_jsx_runtime.jsxs)(Form.Item, { children: [
            (0, import_jsx_runtime.jsx)(Form.Label, { children: t2("fields.name") }),
            (0, import_jsx_runtime.jsx)(Form.Control, { children: (0, import_jsx_runtime.jsx)(Input, { ...field }) }),
            (0, import_jsx_runtime.jsx)(Form.ErrorMessage, {})
          ] });
        }
      }
    ) }),
    (0, import_jsx_runtime.jsxs)("div", { className: "grid grid-cols-1 gap-4 md:grid-cols-2", children: [
      (0, import_jsx_runtime.jsx)(
        Form.Field,
        {
          control: form.control,
          name: "shipping_profile_id",
          render: ({ field }) => {
            return (0, import_jsx_runtime.jsxs)(Form.Item, { children: [
              (0, import_jsx_runtime.jsx)(Form.Label, { children: t2("stockLocations.shippingOptions.fields.profile") }),
              (0, import_jsx_runtime.jsx)(Form.Control, { children: (0, import_jsx_runtime.jsx)(
                Combobox,
                {
                  ...field,
                  options: shippingProfiles.options,
                  searchValue: shippingProfiles.searchValue,
                  onSearchValueChange: shippingProfiles.onSearchValueChange,
                  disabled: shippingProfiles.disabled
                }
              ) }),
              (0, import_jsx_runtime.jsx)(Form.ErrorMessage, {})
            ] });
          }
        }
      ),
      (0, import_jsx_runtime.jsx)(
        Form.Field,
        {
          control: form.control,
          name: "provider_id",
          render: ({ field }) => {
            return (0, import_jsx_runtime.jsxs)(Form.Item, { children: [
              (0, import_jsx_runtime.jsx)(
                Form.Label,
                {
                  tooltip: t2(
                    "stockLocations.fulfillmentProviders.shippingOptionsTooltip"
                  ),
                  children: t2("stockLocations.shippingOptions.fields.provider")
                }
              ),
              (0, import_jsx_runtime.jsx)(Form.Control, { children: (0, import_jsx_runtime.jsx)(
                Combobox,
                {
                  ...field,
                  options: fulfillmentProviders.options,
                  searchValue: fulfillmentProviders.searchValue,
                  onSearchValueChange: fulfillmentProviders.onSearchValueChange,
                  disabled: fulfillmentProviders.disabled
                }
              ) }),
              (0, import_jsx_runtime.jsx)(Form.ErrorMessage, {})
            ] });
          }
        }
      )
    ] }),
    (0, import_jsx_runtime.jsx)(Divider, {}),
    (0, import_jsx_runtime.jsx)(
      SwitchBox,
      {
        control: form.control,
        name: "enabled_in_store",
        label: t2("stockLocations.shippingOptions.fields.enableInStore.label"),
        description: t2(
          "stockLocations.shippingOptions.fields.enableInStore.hint"
        )
      }
    )
  ] }) });
};
var CreateShippingOptionsPricesForm = ({
  form
}) => {
  const {
    store,
    isLoading: isStoreLoading,
    isError: isStoreError,
    error: storeError
  } = useStore();
  const currencies = (0, import_react2.useMemo)(
    () => {
      var _a;
      return ((_a = store == null ? void 0 : store.supported_currencies) == null ? void 0 : _a.map((c) => c.currency_code)) || [];
    },
    [store]
  );
  const {
    regions,
    isLoading: isRegionsLoading,
    isError: isRegionsError,
    error: regionsError
  } = useRegions({
    fields: "id,name,currency_code",
    limit: 999
  });
  const { price_preferences: pricePreferences } = usePricePreferences({});
  const { setCloseOnEscape } = useRouteModal();
  const columns = useShippingOptionPriceColumns({
    currencies,
    regions,
    pricePreferences
  });
  const isLoading = isStoreLoading || !store || isRegionsLoading || !regions;
  const data = (0, import_react2.useMemo)(
    () => [[...currencies || [], ...regions || []]],
    [currencies, regions]
  );
  if (isStoreError) {
    throw storeError;
  }
  if (isRegionsError) {
    throw regionsError;
  }
  return (0, import_jsx_runtime2.jsx)("div", { className: "flex size-full flex-col divide-y overflow-hidden", children: (0, import_jsx_runtime2.jsx)(
    DataGrid,
    {
      isLoading,
      data,
      columns,
      state: form,
      onEditingChange: (editing) => setCloseOnEscape(!editing)
    }
  ) });
};
var CreateShippingOptionDetailsSchema = z.object({
  name: z.string().min(1),
  price_type: z.nativeEnum(ShippingOptionPriceType),
  enabled_in_store: z.boolean(),
  shipping_profile_id: z.string().min(1),
  provider_id: z.string().min(1)
});
var CreateShippingOptionSchema = z.object({
  region_prices: z.record(z.string(), z.string().optional()),
  currency_prices: z.record(z.string(), z.string().optional())
}).merge(CreateShippingOptionDetailsSchema);
function CreateShippingOptionsForm({
  zone,
  isReturn,
  locationId
}) {
  var _a, _b;
  const [activeTab, setActiveTab] = (0, import_react.useState)(
    "details"
    /* DETAILS */
  );
  const [validDetails, setValidDetails] = (0, import_react.useState)(false);
  const { t: t2 } = useTranslation();
  const { handleSuccess } = useRouteModal();
  const form = useForm({
    defaultValues: {
      name: "",
      price_type: "flat",
      enabled_in_store: true,
      shipping_profile_id: "",
      provider_id: "",
      region_prices: {},
      currency_prices: {}
    },
    resolver: t(CreateShippingOptionSchema)
  });
  const isCalculatedPriceType = form.watch("price_type") === "calculated";
  const { mutateAsync, isPending: isLoading } = useCreateShippingOptions();
  const handleSubmit = form.handleSubmit(async (data) => {
    const currencyPrices = Object.entries(data.currency_prices).map(([code, value]) => {
      if (value === "" || value === void 0) {
        return void 0;
      }
      return {
        currency_code: code,
        amount: castNumber(value)
      };
    }).filter((o) => !!o);
    const regionPrices = Object.entries(data.region_prices).map(([region_id, value]) => {
      if (value === "" || value === void 0) {
        return void 0;
      }
      return {
        region_id,
        amount: castNumber(value)
      };
    }).filter((o) => !!o);
    await mutateAsync(
      {
        name: data.name,
        price_type: data.price_type,
        service_zone_id: zone.id,
        shipping_profile_id: data.shipping_profile_id,
        provider_id: data.provider_id,
        prices: [...currencyPrices, ...regionPrices],
        rules: [
          {
            // eslint-disable-next-line
            value: isReturn ? '"true"' : '"false"',
            // we want JSONB saved as string
            attribute: "is_return",
            operator: "eq"
          },
          {
            // eslint-disable-next-line
            value: data.enabled_in_store ? '"true"' : '"false"',
            // we want JSONB saved as string
            attribute: "enabled_in_store",
            operator: "eq"
          }
        ],
        type: {
          // TODO: FETCH TYPES
          label: "Type label",
          description: "Type description",
          code: "type-code"
        }
      },
      {
        onSuccess: ({ shipping_option }) => {
          toast.success(
            t2(
              `stockLocations.shippingOptions.create.${isReturn ? "returns" : "shipping"}.successToast`,
              {
                name: shipping_option.name
              }
            )
          );
          handleSuccess(`/settings/locations/${locationId}`);
        },
        onError: (e) => {
          toast.error(e.message);
        }
      }
    );
  });
  const onTabChange = (tab) => {
    if (tab === "pricing") {
      form.clearErrors();
      const result = CreateShippingOptionDetailsSchema.safeParse({
        ...form.getValues()
      });
      if (!result.success) {
        const [firstError, ...rest] = result.error.errors;
        for (const error of rest) {
          const _path = error.path.join(".");
          form.setError(_path, {
            message: error.message,
            type: error.code
          });
        }
        form.setError(
          firstError.path.join("."),
          {
            message: firstError.message,
            type: firstError.code
          },
          {
            shouldFocus: true
          }
        );
        setValidDetails(false);
        return;
      }
      setValidDetails(true);
    }
    setActiveTab(tab);
  };
  const pricesStatus = ((_a = form.getFieldState("currency_prices")) == null ? void 0 : _a.isDirty) || ((_b = form.getFieldState("region_prices")) == null ? void 0 : _b.isDirty) || activeTab === "pricing" ? "in-progress" : "not-started";
  const detailsStatus = validDetails ? "completed" : "in-progress";
  return (0, import_jsx_runtime3.jsx)(RouteFocusModal.Form, { form, children: (0, import_jsx_runtime3.jsx)(
    ProgressTabs,
    {
      value: activeTab,
      className: "flex h-full flex-col overflow-hidden",
      onValueChange: (tab) => onTabChange(tab),
      children: (0, import_jsx_runtime3.jsxs)("form", { className: "flex h-full flex-col", onSubmit: handleSubmit, children: [
        (0, import_jsx_runtime3.jsxs)(RouteFocusModal.Header, { children: [
          (0, import_jsx_runtime3.jsxs)(ProgressTabs.List, { className: "border-ui-border-base -my-2 ml-2 min-w-0 flex-1 border-l", children: [
            (0, import_jsx_runtime3.jsx)(
              ProgressTabs.Trigger,
              {
                value: "details",
                status: detailsStatus,
                className: "w-full max-w-[200px]",
                children: (0, import_jsx_runtime3.jsx)("span", { className: "w-full cursor-auto overflow-hidden text-ellipsis whitespace-nowrap", children: t2("stockLocations.shippingOptions.create.tabs.details") })
              }
            ),
            !isCalculatedPriceType && (0, import_jsx_runtime3.jsx)(
              ProgressTabs.Trigger,
              {
                value: "pricing",
                status: pricesStatus,
                className: "w-full max-w-[200px]",
                children: (0, import_jsx_runtime3.jsx)("span", { className: "w-full overflow-hidden text-ellipsis whitespace-nowrap", children: t2("stockLocations.shippingOptions.create.tabs.prices") })
              }
            )
          ] }),
          (0, import_jsx_runtime3.jsxs)("div", { className: "flex items-center justify-end gap-x-2", children: [
            (0, import_jsx_runtime3.jsx)(RouteFocusModal.Close, { asChild: true, children: (0, import_jsx_runtime3.jsx)(Button, { variant: "secondary", size: "small", children: t2("actions.cancel") }) }),
            activeTab === "pricing" || isCalculatedPriceType ? (0, import_jsx_runtime3.jsx)(
              Button,
              {
                size: "small",
                className: "whitespace-nowrap",
                isLoading,
                type: "submit",
                children: t2("actions.save")
              },
              "submit-btn"
            ) : (0, import_jsx_runtime3.jsx)(
              Button,
              {
                size: "small",
                className: "whitespace-nowrap",
                isLoading,
                onClick: () => onTabChange(
                  "pricing"
                  /* PRICING */
                ),
                type: "button",
                children: t2("actions.continue")
              },
              "continue-btn"
            )
          ] })
        ] }),
        (0, import_jsx_runtime3.jsxs)(RouteFocusModal.Body, { className: "size-full overflow-hidden", children: [
          (0, import_jsx_runtime3.jsx)(
            ProgressTabs.Content,
            {
              value: "details",
              className: "size-full overflow-y-auto",
              children: (0, import_jsx_runtime3.jsx)(
                CreateShippingOptionDetailsForm,
                {
                  form,
                  zone,
                  isReturn,
                  locationId
                }
              )
            }
          ),
          (0, import_jsx_runtime3.jsx)(ProgressTabs.Content, { value: "pricing", className: "size-full", children: (0, import_jsx_runtime3.jsx)(CreateShippingOptionsPricesForm, { form }) })
        ] })
      ] })
    }
  ) });
}
var LOC_CREATE_SHIPPING_OPTION_FIELDS = "*fulfillment_sets,*fulfillment_sets.service_zones,*fulfillment_sets.service_zones.shipping_options";
function LocationServiceZoneShippingOptionCreate() {
  var _a, _b, _c;
  const { location_id, fset_id, zone_id } = useParams();
  const [searchParams] = useSearchParams();
  const isReturn = searchParams.has("is_return");
  const { stock_location, isPending, isFetching, isError, error } = useStockLocation(location_id, {
    fields: LOC_CREATE_SHIPPING_OPTION_FIELDS
  });
  const zone = (_c = (_b = (_a = stock_location == null ? void 0 : stock_location.fulfillment_sets) == null ? void 0 : _a.find((f) => f.id === fset_id)) == null ? void 0 : _b.service_zones) == null ? void 0 : _c.find((z2) => z2.id === zone_id);
  if (!isPending && !isFetching && !zone) {
    throw json(
      { message: `Service zone with ID ${zone_id} was not found` },
      404
    );
  }
  if (isError) {
    throw error;
  }
  return (0, import_jsx_runtime4.jsx)(RouteFocusModal, { prev: `/settings/locations/${location_id}`, children: zone && (0, import_jsx_runtime4.jsx)(
    CreateShippingOptionsForm,
    {
      zone,
      isReturn,
      locationId: location_id
    }
  ) });
}
export {
  LocationServiceZoneShippingOptionCreate as Component
};
//# sourceMappingURL=location-service-zone-shipping-option-create-T6Q7NWEI-QICXW32F.js.map
