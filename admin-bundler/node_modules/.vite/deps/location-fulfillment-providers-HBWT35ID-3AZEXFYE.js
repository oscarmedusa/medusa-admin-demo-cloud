import {
  formatProvider
} from "./chunk-6EUK4TFP.js";
import {
  TextCell,
  TextHeader
} from "./chunk-KTHKGBUF.js";
import "./chunk-OMKZ5MFX.js";
import "./chunk-5PWCBVWI.js";
import "./chunk-YL5PYK4Z.js";
import "./chunk-BBMUTALB.js";
import "./chunk-2V24OE65.js";
import {
  useDateTableFilters
} from "./chunk-UUWWOB5Y.js";
import "./chunk-JAJBH2XW.js";
import "./chunk-X4DMS4TJ.js";
import "./chunk-3LONSD4H.js";
import "./chunk-OCUAOOGJ.js";
import "./chunk-EGRHWZRV.js";
import "./chunk-QZUCBNNJ.js";
import {
  DataTable,
  useDataTable
} from "./chunk-JH6E7Y6M.js";
import "./chunk-EIGZCZHJ.js";
import "./chunk-CEIAMOT7.js";
import "./chunk-EYAVSJ2J.js";
import {
  createColumnHelper
} from "./chunk-TI6Y7EUW.js";
import {
  useQueryParams
} from "./chunk-JEFCFQ36.js";
import "./chunk-Z74QHE3B.js";
import "./chunk-6VC5CKXS.js";
import "./chunk-4HJQONUH.js";
import "./chunk-IANM7SMM.js";
import {
  RouteFocusModal,
  useRouteModal
} from "./chunk-3P6F4Q7W.js";
import "./chunk-O47TKOMU.js";
import "./chunk-E26TGYVV.js";
import "./chunk-BCDFWL4W.js";
import "./chunk-VOJT3GRC.js";
import "./chunk-4I3TSILH.js";
import "./chunk-P5R3EHIV.js";
import "./chunk-2TBOMIQA.js";
import "./chunk-7VADNSL7.js";
import "./chunk-AJ3DXG4K.js";
import "./chunk-FYV5O3WI.js";
import "./chunk-ENW5Z6NU.js";
import "./chunk-MKU523AN.js";
import "./chunk-EFAG6P6Z.js";
import "./chunk-NJ7HRVAN.js";
import "./chunk-KNWZIBC3.js";
import "./chunk-5RUNMRCW.js";
import "./chunk-CFFZHLR2.js";
import "./chunk-YEEFU7KP.js";
import "./chunk-6MTGJSDM.js";
import "./chunk-Z34GYBFG.js";
import {
  useFulfillmentProviders,
  useStockLocation,
  useUpdateStockLocationFulfillmentProviders
} from "./chunk-VN2HND4I.js";
import "./chunk-ACJP53PC.js";
import "./chunk-3AX2W3RD.js";
import "./chunk-ICPBA7GK.js";
import "./chunk-FREJU5EQ.js";
import "./chunk-4UBJQZN6.js";
import "./chunk-QSXBBOKN.js";
import "./chunk-YSLQHU2M.js";
import "./chunk-RLHQ5IGU.js";
import "./chunk-HZGR4LPF.js";
import "./chunk-3FGSU2DA.js";
import "./chunk-YUBPGLTM.js";
import "./chunk-K4BQKT4B.js";
import "./chunk-SWXOOP7W.js";
import "./chunk-ROURSU5C.js";
import "./chunk-ABZDCU5X.js";
import "./chunk-3VJMO5NN.js";
import "./chunk-IH74SCJ5.js";
import "./chunk-4UMAAWOP.js";
import "./chunk-Y5OEN2X7.js";
import {
  t
} from "./chunk-NMISSY3S.js";
import {
  arrayType,
  objectType,
  stringType
} from "./chunk-D6YTPD33.js";
import {
  useForm
} from "./chunk-TKBVWLOU.js";
import "./chunk-2ZDF4QRQ.js";
import "./chunk-QDFILGGU.js";
import {
  keepPreviousData
} from "./chunk-ZSXFNTF6.js";
import {
  Button,
  Checkbox,
  toast,
  useTranslation
} from "./chunk-ZUPX4YFG.js";
import {
  useParams
} from "./chunk-HTGWU6KF.js";
import "./chunk-64MXM5QD.js";
import "./chunk-3VI6QF3M.js";
import {
  require_jsx_runtime
} from "./chunk-P6CFP5BP.js";
import {
  __toESM,
  require_react
} from "./chunk-H5NG3XTT.js";

// node_modules/@medusajs/dashboard/dist/location-fulfillment-providers-HBWT35ID.mjs
var import_react = __toESM(require_react(), 1);
var import_react2 = __toESM(require_react(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
var columnHelper = createColumnHelper();
var useFulfillmentProviderTableColumns = () => {
  const { t: t2 } = useTranslation();
  return (0, import_react2.useMemo)(
    () => [
      columnHelper.accessor("id", {
        header: () => (0, import_jsx_runtime.jsx)(TextHeader, { text: "Provider" }),
        cell: ({ getValue }) => (0, import_jsx_runtime.jsx)(TextCell, { text: formatProvider(getValue()) })
      })
    ],
    [t2]
  );
};
var useFulfillmentProvidersTableQuery = ({
  prefix,
  pageSize = 20
}) => {
  const queryObject = useQueryParams(
    ["offset", "q", "stock_location_id"],
    prefix
  );
  const { offset, q, stock_location_id } = queryObject;
  const searchParams = {
    limit: pageSize,
    offset: offset ? Number(offset) : 0,
    stock_location_id,
    q
  };
  return {
    searchParams,
    raw: queryObject
  };
};
var EditFulfillmentProvidersFormSchema = objectType({
  fulfillment_providers: arrayType(stringType()).optional()
});
var PAGE_SIZE = 50;
var LocationEditFulfillmentProvidersForm = ({
  location
}) => {
  var _a, _b;
  const { t: t2 } = useTranslation();
  const { handleSuccess } = useRouteModal();
  const form = useForm({
    defaultValues: {
      fulfillment_providers: ((_a = location.fulfillment_providers) == null ? void 0 : _a.map((fp) => fp.id)) ?? []
    },
    resolver: t(EditFulfillmentProvidersFormSchema)
  });
  const { setValue } = form;
  const initialState = ((_b = location.fulfillment_providers) == null ? void 0 : _b.reduce((acc, curr) => {
    acc[curr.id] = true;
    return acc;
  }, {})) ?? {};
  const [rowSelection, setRowSelection] = (0, import_react.useState)(initialState);
  (0, import_react.useEffect)(() => {
    const ids = Object.keys(rowSelection);
    setValue("fulfillment_providers", ids, {
      shouldDirty: true,
      shouldTouch: true
    });
  }, [rowSelection, setValue]);
  const { searchParams, raw } = useFulfillmentProvidersTableQuery({
    pageSize: PAGE_SIZE
  });
  const { fulfillment_providers, count, isLoading, isError, error } = useFulfillmentProviders(
    { ...searchParams, is_enabled: true },
    { placeholderData: keepPreviousData }
  );
  const filters = useDateTableFilters();
  const columns = useColumns();
  const { table } = useDataTable({
    data: fulfillment_providers ?? [],
    columns,
    count,
    enablePagination: true,
    enableRowSelection: true,
    rowSelection: {
      state: rowSelection,
      updater: setRowSelection
    },
    getRowId: (row) => row.id,
    pageSize: PAGE_SIZE
  });
  const { mutateAsync, isPending: isMutating } = useUpdateStockLocationFulfillmentProviders(location.id);
  const handleSubmit = form.handleSubmit(async (data) => {
    var _a2;
    const originalIds = (_a2 = location.fulfillment_providers) == null ? void 0 : _a2.map((sc) => sc.id);
    const arr = data.fulfillment_providers ?? [];
    await mutateAsync(
      {
        add: arr.filter((i) => !(originalIds == null ? void 0 : originalIds.includes(i))),
        remove: originalIds == null ? void 0 : originalIds.filter((i) => !arr.includes(i))
      },
      {
        onSuccess: () => {
          toast.success(t2("stockLocations.fulfillmentProviders.successToast"));
          handleSuccess(`/settings/locations/${location.id}`);
        },
        onError: (e) => {
          toast.error(e.message);
        }
      }
    );
  });
  if (isError) {
    throw error;
  }
  return (0, import_jsx_runtime2.jsx)(RouteFocusModal.Form, { form, children: (0, import_jsx_runtime2.jsxs)("div", { className: "flex h-full flex-col overflow-hidden", children: [
    (0, import_jsx_runtime2.jsx)(RouteFocusModal.Body, { children: (0, import_jsx_runtime2.jsx)(
      DataTable,
      {
        table,
        columns,
        pageSize: PAGE_SIZE,
        isLoading,
        count,
        filters,
        search: "autofocus",
        pagination: true,
        orderBy: ["id", "created_at", "updated_at"],
        queryObject: raw,
        layout: "fill"
      }
    ) }),
    (0, import_jsx_runtime2.jsx)(RouteFocusModal.Footer, { children: (0, import_jsx_runtime2.jsxs)("div", { className: "flex items-center justify-end gap-x-2", children: [
      (0, import_jsx_runtime2.jsx)(RouteFocusModal.Close, { asChild: true, children: (0, import_jsx_runtime2.jsx)(Button, { size: "small", variant: "secondary", children: t2("actions.cancel") }) }),
      (0, import_jsx_runtime2.jsx)(Button, { size: "small", isLoading: isMutating, onClick: handleSubmit, children: t2("actions.save") })
    ] }) })
  ] }) });
};
var columnHelper2 = createColumnHelper();
var useColumns = () => {
  const columns = useFulfillmentProviderTableColumns();
  return (0, import_react.useMemo)(
    () => [
      columnHelper2.display({
        id: "select",
        header: ({ table }) => {
          return (0, import_jsx_runtime2.jsx)(
            Checkbox,
            {
              checked: table.getIsSomePageRowsSelected() ? "indeterminate" : table.getIsAllPageRowsSelected(),
              onCheckedChange: (value) => table.toggleAllPageRowsSelected(!!value)
            }
          );
        },
        cell: ({ row }) => {
          return (0, import_jsx_runtime2.jsx)(
            Checkbox,
            {
              checked: row.getIsSelected(),
              onCheckedChange: (value) => row.toggleSelected(!!value),
              onClick: (e) => {
                e.stopPropagation();
              }
            }
          );
        }
      }),
      ...columns
    ],
    [columns]
  );
};
var LocationFulfillmentProviders = () => {
  const { location_id } = useParams();
  const { stock_location, isPending, isFetching, isError, error } = useStockLocation(location_id, { fields: "id,*fulfillment_providers" });
  const ready = !isPending && !isFetching && !!stock_location;
  if (isError) {
    throw error;
  }
  return (0, import_jsx_runtime3.jsx)(RouteFocusModal, { children: ready && (0, import_jsx_runtime3.jsx)(LocationEditFulfillmentProvidersForm, { location: stock_location }) });
};
export {
  LocationFulfillmentProviders as Component
};
//# sourceMappingURL=location-fulfillment-providers-HBWT35ID-3AZEXFYE.js.map
