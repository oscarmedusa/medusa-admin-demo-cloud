import {
  useSalesChannelTableColumns
} from "./chunk-TLUJIKG2.js";
import "./chunk-CKRB62SG.js";
import "./chunk-KTHKGBUF.js";
import "./chunk-4TA2GWZH.js";
import {
  useSalesChannelTableQuery
} from "./chunk-QOLDQVU6.js";
import "./chunk-EGRHWZRV.js";
import "./chunk-QZUCBNNJ.js";
import {
  DataTable,
  useDataTable
} from "./chunk-JH6E7Y6M.js";
import "./chunk-EIGZCZHJ.js";
import "./chunk-CEIAMOT7.js";
import "./chunk-EYAVSJ2J.js";
import {
  createColumnHelper
} from "./chunk-TI6Y7EUW.js";
import "./chunk-JEFCFQ36.js";
import "./chunk-Z74QHE3B.js";
import "./chunk-6VC5CKXS.js";
import "./chunk-4HJQONUH.js";
import "./chunk-IANM7SMM.js";
import {
  RouteFocusModal,
  useRouteModal
} from "./chunk-3P6F4Q7W.js";
import "./chunk-O47TKOMU.js";
import {
  useApiKey,
  useBatchAddSalesChannelsToApiKey
} from "./chunk-P5R3EHIV.js";
import "./chunk-YSLQHU2M.js";
import "./chunk-RLHQ5IGU.js";
import "./chunk-HZGR4LPF.js";
import "./chunk-3FGSU2DA.js";
import "./chunk-YUBPGLTM.js";
import "./chunk-K4BQKT4B.js";
import "./chunk-SWXOOP7W.js";
import "./chunk-ROURSU5C.js";
import {
  useSalesChannels
} from "./chunk-ABZDCU5X.js";
import "./chunk-3VJMO5NN.js";
import "./chunk-IH74SCJ5.js";
import "./chunk-4UMAAWOP.js";
import "./chunk-Y5OEN2X7.js";
import {
  t
} from "./chunk-NMISSY3S.js";
import {
  arrayType,
  objectType,
  stringType
} from "./chunk-D6YTPD33.js";
import {
  useForm
} from "./chunk-TKBVWLOU.js";
import "./chunk-QDFILGGU.js";
import {
  keepPreviousData
} from "./chunk-ZSXFNTF6.js";
import {
  Button,
  Checkbox,
  Hint,
  Tooltip,
  toast,
  useTranslation
} from "./chunk-ZUPX4YFG.js";
import {
  useParams
} from "./chunk-HTGWU6KF.js";
import "./chunk-64MXM5QD.js";
import "./chunk-3VI6QF3M.js";
import {
  require_jsx_runtime
} from "./chunk-P6CFP5BP.js";
import {
  __toESM,
  require_react
} from "./chunk-H5NG3XTT.js";

// node_modules/@medusajs/dashboard/dist/api-key-management-sales-channels-WVAOPOJT.mjs
var import_react = __toESM(require_react(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var AddSalesChannelsToApiKeySchema = objectType({
  sales_channel_ids: arrayType(stringType())
});
var PAGE_SIZE = 50;
var ApiKeySalesChannelsForm = ({
  apiKey,
  preSelected = []
}) => {
  const { t: t2 } = useTranslation();
  const { handleSuccess } = useRouteModal();
  const form = useForm({
    defaultValues: {
      sales_channel_ids: []
    },
    resolver: t(AddSalesChannelsToApiKeySchema)
  });
  const { setValue } = form;
  const [rowSelection, setRowSelection] = (0, import_react.useState)({});
  const { mutateAsync, isPending } = useBatchAddSalesChannelsToApiKey(apiKey);
  const { raw, searchParams } = useSalesChannelTableQuery({
    pageSize: PAGE_SIZE
  });
  const columns = useColumns();
  const { sales_channels, count, isLoading } = useSalesChannels(
    { ...searchParams },
    {
      placeholderData: keepPreviousData
    }
  );
  const updater = (fn) => {
    const state = typeof fn === "function" ? fn(rowSelection) : fn;
    const ids = Object.keys(state);
    setValue("sales_channel_ids", ids, {
      shouldDirty: true,
      shouldTouch: true
    });
    setRowSelection(state);
  };
  const { table } = useDataTable({
    data: sales_channels ?? [],
    columns,
    count,
    enablePagination: true,
    enableRowSelection: (row) => {
      return !preSelected.includes(row.original.id);
    },
    getRowId: (row) => row.id,
    pageSize: PAGE_SIZE,
    rowSelection: {
      state: rowSelection,
      updater
    }
  });
  const handleSubmit = form.handleSubmit(async (values) => {
    await mutateAsync(values.sales_channel_ids, {
      onSuccess: () => {
        toast.success(
          t2("apiKeyManagement.salesChannels.successToast", {
            count: values.sales_channel_ids.length
          })
        );
        handleSuccess();
      },
      onError: (err) => {
        toast.error(err.message);
      }
    });
  });
  return (0, import_jsx_runtime.jsx)(RouteFocusModal.Form, { form, children: (0, import_jsx_runtime.jsxs)(
    "form",
    {
      onSubmit: handleSubmit,
      className: "flex h-full flex-col overflow-hidden",
      children: [
        (0, import_jsx_runtime.jsx)(RouteFocusModal.Header, { children: (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center justify-end gap-x-2", children: [
          form.formState.errors.sales_channel_ids && (0, import_jsx_runtime.jsx)(Hint, { variant: "error", children: form.formState.errors.sales_channel_ids.message }),
          (0, import_jsx_runtime.jsx)(RouteFocusModal.Close, { asChild: true, children: (0, import_jsx_runtime.jsx)(Button, { size: "small", variant: "secondary", children: t2("actions.cancel") }) }),
          (0, import_jsx_runtime.jsx)(Button, { size: "small", type: "submit", isLoading: isPending, children: t2("actions.save") })
        ] }) }),
        (0, import_jsx_runtime.jsx)(RouteFocusModal.Body, { children: (0, import_jsx_runtime.jsx)(
          DataTable,
          {
            table,
            columns,
            count,
            pageSize: PAGE_SIZE,
            pagination: true,
            search: "autofocus",
            isLoading,
            queryObject: raw,
            orderBy: ["name", "created_at", "updated_at"],
            layout: "fill",
            noRecords: {
              message: t2(
                "apiKeyManagement.addSalesChannels.list.noRecordsMessage"
              )
            }
          }
        ) })
      ]
    }
  ) });
};
var columnHelper = createColumnHelper();
var useColumns = () => {
  const { t: t2 } = useTranslation();
  const base = useSalesChannelTableColumns();
  return (0, import_react.useMemo)(
    () => [
      columnHelper.display({
        id: "select",
        header: ({ table }) => {
          return (0, import_jsx_runtime.jsx)(
            Checkbox,
            {
              checked: table.getIsSomePageRowsSelected() ? "indeterminate" : table.getIsAllPageRowsSelected(),
              onCheckedChange: (value) => table.toggleAllPageRowsSelected(!!value)
            }
          );
        },
        cell: ({ row }) => {
          const isPreSelected = !row.getCanSelect();
          const isSelected = row.getIsSelected() || isPreSelected;
          const Component = (0, import_jsx_runtime.jsx)(
            Checkbox,
            {
              checked: isSelected,
              disabled: isPreSelected,
              onCheckedChange: (value) => row.toggleSelected(!!value),
              onClick: (e) => {
                e.stopPropagation();
              }
            }
          );
          if (isPreSelected) {
            return (0, import_jsx_runtime.jsx)(
              Tooltip,
              {
                content: t2(
                  "apiKeyManagement.salesChannels.alreadyAddedTooltip"
                ),
                side: "right",
                children: Component
              }
            );
          }
          return Component;
        }
      }),
      ...base
    ],
    [t2, base]
  );
};
var ApiKeyManagementAddSalesChannels = () => {
  var _a;
  const { id } = useParams();
  const { api_key, isLoading, isError, error } = useApiKey(id);
  const preSelected = (_a = api_key == null ? void 0 : api_key.sales_channels) == null ? void 0 : _a.map((sc) => sc.id);
  const ready = !isLoading && api_key;
  if (isError) {
    throw error;
  }
  return (0, import_jsx_runtime2.jsx)(RouteFocusModal, { children: ready && (0, import_jsx_runtime2.jsx)(ApiKeySalesChannelsForm, { apiKey: id, preSelected }) });
};
export {
  ApiKeyManagementAddSalesChannels as Component
};
//# sourceMappingURL=api-key-management-sales-channels-WVAOPOJT-MET3F335.js.map
