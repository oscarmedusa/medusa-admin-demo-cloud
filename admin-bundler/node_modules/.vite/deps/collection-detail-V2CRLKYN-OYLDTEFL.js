import {
  useProductTableColumns
} from "./chunk-BOUEFVQ5.js";
import "./chunk-B76TY3YZ.js";
import "./chunk-XKOLLBFA.js";
import "./chunk-4TA2GWZH.js";
import {
  useProductTableQuery
} from "./chunk-HV4CT7SS.js";
import {
  useProductTableFilters
} from "./chunk-3LONSD4H.js";
import {
  JsonViewSection
} from "./chunk-GV2TOR46.js";
import "./chunk-EGRHWZRV.js";
import "./chunk-QZUCBNNJ.js";
import {
  DataTable,
  useDataTable
} from "./chunk-JH6E7Y6M.js";
import "./chunk-EIGZCZHJ.js";
import "./chunk-CEIAMOT7.js";
import "./chunk-EYAVSJ2J.js";
import {
  createColumnHelper
} from "./chunk-TI6Y7EUW.js";
import "./chunk-JEFCFQ36.js";
import "./chunk-Z74QHE3B.js";
import "./chunk-6VC5CKXS.js";
import "./chunk-4HJQONUH.js";
import "./chunk-IANM7SMM.js";
import "./chunk-E26TGYVV.js";
import "./chunk-BCDFWL4W.js";
import "./chunk-VOJT3GRC.js";
import "./chunk-4I3TSILH.js";
import "./chunk-P5R3EHIV.js";
import "./chunk-2TBOMIQA.js";
import "./chunk-7VADNSL7.js";
import "./chunk-AJ3DXG4K.js";
import "./chunk-FYV5O3WI.js";
import "./chunk-ENW5Z6NU.js";
import "./chunk-MKU523AN.js";
import "./chunk-EFAG6P6Z.js";
import {
  collectionsQueryKeys,
  useCollection,
  useDeleteCollection,
  useUpdateCollectionProducts
} from "./chunk-NJ7HRVAN.js";
import "./chunk-KNWZIBC3.js";
import "./chunk-5RUNMRCW.js";
import "./chunk-CFFZHLR2.js";
import "./chunk-YEEFU7KP.js";
import "./chunk-6MTGJSDM.js";
import "./chunk-Z34GYBFG.js";
import "./chunk-VN2HND4I.js";
import "./chunk-ACJP53PC.js";
import "./chunk-3AX2W3RD.js";
import "./chunk-ICPBA7GK.js";
import "./chunk-FREJU5EQ.js";
import "./chunk-4UBJQZN6.js";
import "./chunk-QSXBBOKN.js";
import "./chunk-YSLQHU2M.js";
import {
  ActionMenu
} from "./chunk-IE22HJTV.js";
import "./chunk-RLHQ5IGU.js";
import "./chunk-HZGR4LPF.js";
import "./chunk-3FGSU2DA.js";
import "./chunk-YUBPGLTM.js";
import "./chunk-K4BQKT4B.js";
import "./chunk-SWXOOP7W.js";
import "./chunk-ROURSU5C.js";
import "./chunk-ABZDCU5X.js";
import {
  useProducts
} from "./chunk-3VJMO5NN.js";
import "./chunk-IH74SCJ5.js";
import {
  queryClient
} from "./chunk-4UMAAWOP.js";
import "./chunk-Y5OEN2X7.js";
import "./chunk-2ZDF4QRQ.js";
import "./chunk-QDFILGGU.js";
import {
  keepPreviousData,
  sdk
} from "./chunk-ZSXFNTF6.js";
import {
  Checkbox,
  Container,
  Heading,
  PencilSquare,
  Plus,
  Text,
  Trash,
  toast,
  usePrompt,
  useTranslation
} from "./chunk-ZUPX4YFG.js";
import {
  Outlet,
  json,
  useLoaderData,
  useNavigate,
  useParams
} from "./chunk-HTGWU6KF.js";
import "./chunk-64MXM5QD.js";
import "./chunk-3VI6QF3M.js";
import {
  require_jsx_runtime
} from "./chunk-P6CFP5BP.js";
import {
  __toESM,
  require_react
} from "./chunk-H5NG3XTT.js";

// node_modules/@medusajs/dashboard/dist/collection-detail-V2CRLKYN.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_react = __toESM(require_react(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
import after from "virtual:medusa/widgets/product_collection/details/after";
import before from "virtual:medusa/widgets/product_collection/details/before";
var CollectionGeneralSection = ({
  collection
}) => {
  const { t } = useTranslation();
  const prompt = usePrompt();
  const navigate = useNavigate();
  const { mutateAsync } = useDeleteCollection(collection.id);
  const handleDelete = async () => {
    const res = await prompt({
      title: t("general.areYouSure"),
      description: t("collections.deleteWarning", {
        count: 1,
        title: collection.title
      })
    });
    if (!res) {
      return;
    }
    await mutateAsync();
    navigate("../", { replace: true });
  };
  return (0, import_jsx_runtime.jsxs)(Container, { className: "divide-y p-0", children: [
    (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center justify-between px-6 py-4", children: [
      (0, import_jsx_runtime.jsx)(Heading, { children: collection.title }),
      (0, import_jsx_runtime.jsx)(
        ActionMenu,
        {
          groups: [
            {
              actions: [
                {
                  icon: (0, import_jsx_runtime.jsx)(PencilSquare, {}),
                  label: t("actions.edit"),
                  to: `/collections/${collection.id}/edit`,
                  disabled: !collection.id
                }
              ]
            },
            {
              actions: [
                {
                  icon: (0, import_jsx_runtime.jsx)(Trash, {}),
                  label: t("actions.delete"),
                  onClick: handleDelete,
                  disabled: !collection.id
                }
              ]
            }
          ]
        }
      )
    ] }),
    (0, import_jsx_runtime.jsxs)("div", { className: "text-ui-fg-subtle grid grid-cols-2 items-center px-6 py-4", children: [
      (0, import_jsx_runtime.jsx)(Text, { size: "small", leading: "compact", weight: "plus", children: t("fields.handle") }),
      (0, import_jsx_runtime.jsxs)(Text, { size: "small", children: [
        "/",
        collection.handle
      ] })
    ] })
  ] });
};
var PAGE_SIZE = 10;
var CollectionProductSection = ({
  collection
}) => {
  const { t } = useTranslation();
  const { searchParams, raw } = useProductTableQuery({ pageSize: PAGE_SIZE });
  const { products, count, isLoading, isError, error } = useProducts(
    {
      limit: PAGE_SIZE,
      ...searchParams,
      collection_id: [collection.id]
    },
    {
      placeholderData: keepPreviousData
    }
  );
  const filters = useProductTableFilters(["collections"]);
  const columns = useColumns();
  const { table } = useDataTable({
    data: products ?? [],
    columns,
    getRowId: (row) => row.id,
    count,
    enablePagination: true,
    enableRowSelection: true,
    pageSize: PAGE_SIZE,
    meta: {
      collectionId: collection.id
    }
  });
  const prompt = usePrompt();
  const { mutateAsync } = useUpdateCollectionProducts(collection.id);
  const handleRemove = async (selection) => {
    const ids = Object.keys(selection);
    const res = await prompt({
      title: t("general.areYouSure"),
      description: t("collections.removeProductsWarning", {
        count: ids.length
      }),
      confirmText: t("actions.remove"),
      cancelText: t("actions.cancel")
    });
    if (!res) {
      return;
    }
    await mutateAsync(
      {
        remove: ids
      },
      {
        onSuccess: () => {
          toast.success(
            t("collections.products.remove.successToast", {
              count: ids.length
            })
          );
        },
        onError: (e) => {
          toast.error(e.message);
        }
      }
    );
  };
  if (isError) {
    throw error;
  }
  return (0, import_jsx_runtime2.jsxs)(Container, { className: "divide-y p-0", children: [
    (0, import_jsx_runtime2.jsxs)("div", { className: "flex items-center justify-between px-6 py-4", children: [
      (0, import_jsx_runtime2.jsx)(Heading, { level: "h2", children: t("products.domain") }),
      (0, import_jsx_runtime2.jsx)(
        ActionMenu,
        {
          groups: [
            {
              actions: [
                {
                  icon: (0, import_jsx_runtime2.jsx)(Plus, {}),
                  label: t("actions.add"),
                  to: "products"
                }
              ]
            }
          ]
        }
      )
    ] }),
    (0, import_jsx_runtime2.jsx)(
      DataTable,
      {
        table,
        columns,
        search: true,
        pagination: true,
        pageSize: PAGE_SIZE,
        navigateTo: ({ original }) => `/products/${original.id}`,
        count,
        filters,
        isLoading,
        orderBy: ["title", "created_at", "updated_at"],
        queryObject: raw,
        commands: [
          {
            action: handleRemove,
            label: t("actions.remove"),
            shortcut: "r"
          }
        ],
        noRecords: {
          message: t("collections.products.list.noRecordsMessage")
        }
      }
    )
  ] });
};
var ProductActions = ({
  product,
  collectionId
}) => {
  const { t } = useTranslation();
  const prompt = usePrompt();
  const { mutateAsync } = useUpdateCollectionProducts(collectionId);
  const handleRemove = async () => {
    const res = await prompt({
      title: t("general.areYouSure"),
      description: t("collections.removeSingleProductWarning", {
        title: product.title
      }),
      confirmText: t("actions.remove"),
      cancelText: t("actions.cancel")
    });
    if (!res) {
      return;
    }
    await mutateAsync(
      {
        remove: [product.id]
      },
      {
        onSuccess: () => {
          toast.success(
            t("collections.products.remove.successToast", {
              count: 1
            })
          );
        },
        onError: (e) => {
          toast.error(e.message);
        }
      }
    );
  };
  return (0, import_jsx_runtime2.jsx)(
    ActionMenu,
    {
      groups: [
        {
          actions: [
            {
              icon: (0, import_jsx_runtime2.jsx)(PencilSquare, {}),
              label: t("actions.edit"),
              to: `/products/${product.id}/edit`
            }
          ]
        },
        {
          actions: [
            {
              icon: (0, import_jsx_runtime2.jsx)(Trash, {}),
              label: t("actions.remove"),
              onClick: handleRemove
            }
          ]
        }
      ]
    }
  );
};
var columnHelper = createColumnHelper();
var useColumns = () => {
  const columns = useProductTableColumns();
  return (0, import_react.useMemo)(
    () => [
      columnHelper.display({
        id: "select",
        header: ({ table }) => {
          return (0, import_jsx_runtime2.jsx)(
            Checkbox,
            {
              checked: table.getIsSomePageRowsSelected() ? "indeterminate" : table.getIsAllPageRowsSelected(),
              onCheckedChange: (value) => table.toggleAllPageRowsSelected(!!value)
            }
          );
        },
        cell: ({ row }) => {
          return (0, import_jsx_runtime2.jsx)(
            Checkbox,
            {
              checked: row.getIsSelected(),
              onCheckedChange: (value) => row.toggleSelected(!!value),
              onClick: (e) => {
                e.stopPropagation();
              }
            }
          );
        }
      }),
      ...columns,
      columnHelper.display({
        id: "actions",
        cell: ({ row, table }) => {
          const { collectionId } = table.options.meta;
          return (0, import_jsx_runtime2.jsx)(
            ProductActions,
            {
              product: row.original,
              collectionId
            }
          );
        }
      })
    ],
    [columns]
  );
};
var CollectionDetail = () => {
  const initialData = useLoaderData();
  const { id } = useParams();
  const { collection, isLoading, isError, error } = useCollection(id, {
    initialData
  });
  if (isLoading) {
    return (0, import_jsx_runtime3.jsx)("div", { children: "Loading..." });
  }
  if (isError || !collection) {
    if (error) {
      throw error;
    }
    throw json("An unknown error occurred", 500);
  }
  return (0, import_jsx_runtime3.jsxs)("div", { className: "flex flex-col gap-y-3", children: [
    before.widgets.map((w, i) => {
      return (0, import_jsx_runtime3.jsx)("div", { children: (0, import_jsx_runtime3.jsx)(w.Component, { data: collection }) }, i);
    }),
    (0, import_jsx_runtime3.jsx)(CollectionGeneralSection, { collection }),
    (0, import_jsx_runtime3.jsx)(CollectionProductSection, { collection }),
    after.widgets.map((w, i) => {
      return (0, import_jsx_runtime3.jsx)("div", { children: (0, import_jsx_runtime3.jsx)(w.Component, { data: collection }) }, i);
    }),
    (0, import_jsx_runtime3.jsx)(JsonViewSection, { data: collection }),
    (0, import_jsx_runtime3.jsx)(Outlet, {})
  ] });
};
var collectionDetailQuery = (id) => ({
  queryKey: collectionsQueryKeys.detail(id),
  queryFn: async () => sdk.admin.productCollection.retrieve(id)
});
var collectionLoader = async ({ params }) => {
  const id = params.id;
  const query = collectionDetailQuery(id);
  return queryClient.getQueryData(
    query.queryKey
  ) ?? await queryClient.fetchQuery(query);
};
export {
  CollectionDetail as Component,
  collectionLoader as loader
};
//# sourceMappingURL=collection-detail-V2CRLKYN-OYLDTEFL.js.map
