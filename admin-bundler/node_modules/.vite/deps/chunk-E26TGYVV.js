import {
  ordersQueryKeys
} from "./chunk-ACJP53PC.js";
import {
  queryClient
} from "./chunk-4UMAAWOP.js";
import {
  queryKeysFactory
} from "./chunk-Y5OEN2X7.js";
import {
  sdk,
  useMutation,
  useQuery
} from "./chunk-ZSXFNTF6.js";

// node_modules/@medusajs/dashboard/dist/chunk-V5VCT6TO.mjs
var REFUND_REASON_QUERY_KEY = "refund-reason";
var refundReasonQueryKeys = queryKeysFactory(REFUND_REASON_QUERY_KEY);
var useRefundReasons = (query, options) => {
  const { data, ...rest } = useQuery({
    queryFn: () => sdk.admin.refundReason.list(query),
    queryKey: [],
    ...options
  });
  return { ...data, ...rest };
};
var FULFILLMENTS_QUERY_KEY = "fulfillments";
var fulfillmentsQueryKeys = queryKeysFactory(FULFILLMENTS_QUERY_KEY);
var NOTIFICATION_QUERY_KEY = "notification";
var notificationQueryKeys = queryKeysFactory(NOTIFICATION_QUERY_KEY);
var useNotifications = (query, options) => {
  const { data, ...rest } = useQuery({
    queryFn: () => sdk.admin.notification.list(query),
    queryKey: notificationQueryKeys.list(query),
    ...options
  });
  return { ...data, ...rest };
};
var PAYMENT_COLLECTION_QUERY_KEY = "payment-collection";
var paymentCollectionQueryKeys = queryKeysFactory(
  PAYMENT_COLLECTION_QUERY_KEY
);
var useMarkPaymentCollectionAsPaid = (orderId, paymentCollectionId, options) => {
  return useMutation({
    mutationFn: (payload) => sdk.admin.paymentCollection.markAsPaid(paymentCollectionId, payload),
    onSuccess: (data, variables, context) => {
      var _a;
      queryClient.invalidateQueries({
        queryKey: ordersQueryKeys.details()
      });
      queryClient.invalidateQueries({
        queryKey: ordersQueryKeys.preview(orderId)
      });
      queryClient.invalidateQueries({
        queryKey: paymentCollectionQueryKeys.all
      });
      (_a = options == null ? void 0 : options.onSuccess) == null ? void 0 : _a.call(options, data, variables, context);
    },
    ...options
  });
};
var PRODUCT_VARIANT_QUERY_KEY = "product_variant";
var productVariantQueryKeys = queryKeysFactory(
  PRODUCT_VARIANT_QUERY_KEY
);
var useVariants = (query, options) => {
  const { data, ...rest } = useQuery({
    queryFn: () => sdk.admin.productVariant.list(query),
    queryKey: productVariantQueryKeys.list(query),
    ...options
  });
  return { ...data, ...rest };
};

export {
  useRefundReasons,
  notificationQueryKeys,
  useNotifications,
  useMarkPaymentCollectionAsPaid,
  useVariants
};
//# sourceMappingURL=chunk-E26TGYVV.js.map
