import {
  RouteDrawer,
  useRouteModal
} from "./chunk-3P6F4Q7W.js";
import {
  useMe,
  useUpdateUser
} from "./chunk-EFAG6P6Z.js";
import {
  languages
} from "./chunk-HZGR4LPF.js";
import "./chunk-YUBPGLTM.js";
import "./chunk-4UMAAWOP.js";
import "./chunk-Y5OEN2X7.js";
import {
  t
} from "./chunk-NMISSY3S.js";
import {
  booleanType,
  objectType,
  stringType
} from "./chunk-D6YTPD33.js";
import {
  Form,
  useForm
} from "./chunk-TKBVWLOU.js";
import "./chunk-QDFILGGU.js";
import "./chunk-ZSXFNTF6.js";
import {
  Button,
  Heading,
  Input,
  Select,
  Switch,
  Trans,
  toast,
  useTranslation
} from "./chunk-ZUPX4YFG.js";
import "./chunk-HTGWU6KF.js";
import "./chunk-64MXM5QD.js";
import "./chunk-3VI6QF3M.js";
import {
  require_jsx_runtime
} from "./chunk-P6CFP5BP.js";
import {
  __toESM
} from "./chunk-H5NG3XTT.js";

// node_modules/@medusajs/dashboard/dist/profile-edit-SORW2ZPG.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var EditProfileSchema = objectType({
  first_name: stringType().optional(),
  last_name: stringType().optional(),
  language: stringType(),
  usage_insights: booleanType()
});
var EditProfileForm = ({ user, usageInsights }) => {
  const { t: t2, i18n } = useTranslation();
  const { handleSuccess } = useRouteModal();
  const form = useForm({
    defaultValues: {
      first_name: user.first_name ?? "",
      last_name: user.last_name ?? "",
      language: i18n.language,
      usage_insights: usageInsights
    },
    resolver: t(EditProfileSchema)
  });
  const changeLanguage = async (code) => {
    await i18n.changeLanguage(code);
  };
  const sortedLanguages = languages.sort(
    (a, b) => a.display_name.localeCompare(b.display_name)
  );
  const { mutateAsync, isPending } = useUpdateUser(user.id);
  const handleSubmit = form.handleSubmit(async (values) => {
    try {
      await mutateAsync({
        first_name: values.first_name,
        last_name: values.last_name
      });
      await changeLanguage(values.language);
      toast.success(t2("profile.toast.edit"));
      handleSuccess();
    } catch (e) {
      toast.error(e.message);
    }
  });
  return (0, import_jsx_runtime.jsx)(RouteDrawer.Form, { form, children: (0, import_jsx_runtime.jsxs)("form", { onSubmit: handleSubmit, className: "flex flex-1 flex-col", children: [
    (0, import_jsx_runtime.jsx)(RouteDrawer.Body, { children: (0, import_jsx_runtime.jsxs)("div", { className: "flex flex-col gap-y-8", children: [
      (0, import_jsx_runtime.jsxs)("div", { className: "grid grid-cols-2 gap-4", children: [
        (0, import_jsx_runtime.jsx)(
          Form.Field,
          {
            control: form.control,
            name: "first_name",
            render: ({ field }) => (0, import_jsx_runtime.jsxs)(Form.Item, { children: [
              (0, import_jsx_runtime.jsx)(Form.Label, { children: t2("fields.firstName") }),
              (0, import_jsx_runtime.jsx)(Form.Control, { children: (0, import_jsx_runtime.jsx)(Input, { ...field }) }),
              (0, import_jsx_runtime.jsx)(Form.ErrorMessage, {})
            ] })
          }
        ),
        (0, import_jsx_runtime.jsx)(
          Form.Field,
          {
            control: form.control,
            name: "last_name",
            render: ({ field }) => (0, import_jsx_runtime.jsxs)(Form.Item, { children: [
              (0, import_jsx_runtime.jsx)(Form.Label, { children: t2("fields.lastName") }),
              (0, import_jsx_runtime.jsx)(Form.Control, { children: (0, import_jsx_runtime.jsx)(Input, { ...field }) }),
              (0, import_jsx_runtime.jsx)(Form.ErrorMessage, {})
            ] })
          }
        )
      ] }),
      (0, import_jsx_runtime.jsx)(
        Form.Field,
        {
          control: form.control,
          name: "language",
          render: ({ field: { ref, ...field } }) => {
            var _a;
            return (0, import_jsx_runtime.jsxs)(Form.Item, { className: "gap-y-4", children: [
              (0, import_jsx_runtime.jsxs)("div", { children: [
                (0, import_jsx_runtime.jsx)(Form.Label, { children: t2("profile.fields.languageLabel") }),
                (0, import_jsx_runtime.jsx)(Form.Hint, { children: t2("profile.edit.languageHint") })
              ] }),
              (0, import_jsx_runtime.jsxs)("div", { children: [
                (0, import_jsx_runtime.jsx)(Form.Control, { children: (0, import_jsx_runtime.jsxs)(Select, { ...field, onValueChange: field.onChange, children: [
                  (0, import_jsx_runtime.jsx)(Select.Trigger, { ref, className: "py-1 text-[13px]", children: (0, import_jsx_runtime.jsx)(
                    Select.Value,
                    {
                      placeholder: t2("profile.edit.languagePlaceholder"),
                      children: (_a = sortedLanguages.find(
                        (language) => language.code === field.value
                      )) == null ? void 0 : _a.display_name
                    }
                  ) }),
                  (0, import_jsx_runtime.jsx)(Select.Content, { children: languages.map((language) => (0, import_jsx_runtime.jsx)(
                    Select.Item,
                    {
                      value: language.code,
                      children: language.display_name
                    },
                    language.code
                  )) })
                ] }) }),
                (0, import_jsx_runtime.jsx)(Form.ErrorMessage, {})
              ] })
            ] });
          }
        }
      ),
      (0, import_jsx_runtime.jsx)(
        Form.Field,
        {
          control: form.control,
          name: "usage_insights",
          render: ({ field: { value, onChange, ...rest } }) => (0, import_jsx_runtime.jsxs)(Form.Item, { children: [
            (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center justify-between", children: [
              (0, import_jsx_runtime.jsx)(Form.Label, { children: t2("profile.fields.usageInsightsLabel") }),
              (0, import_jsx_runtime.jsx)(Form.Control, { children: (0, import_jsx_runtime.jsx)(
                Switch,
                {
                  ...rest,
                  checked: value,
                  onCheckedChange: onChange
                }
              ) })
            ] }),
            (0, import_jsx_runtime.jsx)(Form.Hint, { children: (0, import_jsx_runtime.jsx)("span", { children: (0, import_jsx_runtime.jsx)(
              Trans,
              {
                i18nKey: "profile.edit.usageInsightsHint",
                components: [
                  (0, import_jsx_runtime.jsx)(
                    "a",
                    {
                      className: "text-ui-fg-interactive hover:text-ui-fg-interactive-hover transition-fg underline",
                      href: "https://medusa-resources-git-docs-v2-medusajs.vercel.app/resources/usage#admin-analytics",
                      target: "_blank",
                      rel: "noopener noreferrer"
                    },
                    "hint-link"
                  )
                ]
              }
            ) }) }),
            (0, import_jsx_runtime.jsx)(Form.ErrorMessage, {})
          ] })
        }
      )
    ] }) }),
    (0, import_jsx_runtime.jsx)(RouteDrawer.Footer, { children: (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center gap-x-2", children: [
      (0, import_jsx_runtime.jsx)(RouteDrawer.Close, { asChild: true, children: (0, import_jsx_runtime.jsx)(Button, { size: "small", variant: "secondary", children: t2("actions.cancel") }) }),
      (0, import_jsx_runtime.jsx)(Button, { size: "small", type: "submit", isLoading: isPending, children: t2("actions.save") })
    ] }) })
  ] }) });
};
var ProfileEdit = () => {
  const { user, isPending: isLoading, isError, error } = useMe();
  const { t: t2 } = useTranslation();
  if (isError) {
    throw error;
  }
  return (0, import_jsx_runtime2.jsxs)(RouteDrawer, { children: [
    (0, import_jsx_runtime2.jsx)(RouteDrawer.Header, { className: "capitalize", children: (0, import_jsx_runtime2.jsx)(Heading, { children: t2("profile.edit.header") }) }),
    !isLoading && user && (0, import_jsx_runtime2.jsx)(EditProfileForm, { user, usageInsights: false })
  ] });
};
export {
  ProfileEdit as Component
};
//# sourceMappingURL=profile-edit-SORW2ZPG-CTTKUIPL.js.map
