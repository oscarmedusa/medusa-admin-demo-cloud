{
  "version": 3,
  "sources": ["../../../../dashboard/dist/chunk-PBIY5KWT.mjs"],
  "sourcesContent": ["import {\n  queryClient\n} from \"./chunk-2T3PD3VS.mjs\";\nimport {\n  queryKeysFactory\n} from \"./chunk-OEVIH5XG.mjs\";\nimport {\n  sdk\n} from \"./chunk-PWWSB76U.mjs\";\n\n// src/hooks/api/customers.tsx\nimport {\n  useMutation,\n  useQuery\n} from \"@tanstack/react-query\";\nvar CUSTOMERS_QUERY_KEY = \"customers\";\nvar customersQueryKeys = queryKeysFactory(CUSTOMERS_QUERY_KEY);\nvar useCustomer = (id, query, options) => {\n  const { data, ...rest } = useQuery({\n    queryKey: customersQueryKeys.detail(id),\n    queryFn: async () => sdk.admin.customer.retrieve(id, query),\n    ...options\n  });\n  return { ...data, ...rest };\n};\nvar useCustomers = (query, options) => {\n  const { data, ...rest } = useQuery({\n    queryFn: () => sdk.admin.customer.list(query),\n    queryKey: customersQueryKeys.list(query),\n    ...options\n  });\n  return { ...data, ...rest };\n};\nvar useCreateCustomer = (options) => {\n  return useMutation({\n    mutationFn: (payload) => sdk.admin.customer.create(payload),\n    onSuccess: (data, variables, context) => {\n      queryClient.invalidateQueries({ queryKey: customersQueryKeys.lists() });\n      options?.onSuccess?.(data, variables, context);\n    },\n    ...options\n  });\n};\nvar useUpdateCustomer = (id, options) => {\n  return useMutation({\n    mutationFn: (payload) => sdk.admin.customer.update(id, payload),\n    onSuccess: (data, variables, context) => {\n      queryClient.invalidateQueries({ queryKey: customersQueryKeys.lists() });\n      queryClient.invalidateQueries({ queryKey: customersQueryKeys.detail(id) });\n      options?.onSuccess?.(data, variables, context);\n    },\n    ...options\n  });\n};\nvar useDeleteCustomer = (id, options) => {\n  return useMutation({\n    mutationFn: () => sdk.admin.customer.delete(id),\n    onSuccess: (data, variables, context) => {\n      queryClient.invalidateQueries({ queryKey: customersQueryKeys.lists() });\n      queryClient.invalidateQueries({\n        queryKey: customersQueryKeys.detail(id)\n      });\n      options?.onSuccess?.(data, variables, context);\n    },\n    ...options\n  });\n};\n\nexport {\n  customersQueryKeys,\n  useCustomer,\n  useCustomers,\n  useCreateCustomer,\n  useUpdateCustomer,\n  useDeleteCustomer\n};\n"],
  "mappings": ";;;;;;;;;;;;;AAeA,IAAI,sBAAsB;AAC1B,IAAI,qBAAqB,iBAAiB,mBAAmB;AAC7D,IAAI,cAAc,CAAC,IAAI,OAAO,YAAY;AACxC,QAAM,EAAE,MAAM,GAAG,KAAK,IAAI,SAAS;AAAA,IACjC,UAAU,mBAAmB,OAAO,EAAE;AAAA,IACtC,SAAS,YAAY,IAAI,MAAM,SAAS,SAAS,IAAI,KAAK;AAAA,IAC1D,GAAG;AAAA,EACL,CAAC;AACD,SAAO,EAAE,GAAG,MAAM,GAAG,KAAK;AAC5B;AACA,IAAI,eAAe,CAAC,OAAO,YAAY;AACrC,QAAM,EAAE,MAAM,GAAG,KAAK,IAAI,SAAS;AAAA,IACjC,SAAS,MAAM,IAAI,MAAM,SAAS,KAAK,KAAK;AAAA,IAC5C,UAAU,mBAAmB,KAAK,KAAK;AAAA,IACvC,GAAG;AAAA,EACL,CAAC;AACD,SAAO,EAAE,GAAG,MAAM,GAAG,KAAK;AAC5B;AACA,IAAI,oBAAoB,CAAC,YAAY;AACnC,SAAO,YAAY;AAAA,IACjB,YAAY,CAAC,YAAY,IAAI,MAAM,SAAS,OAAO,OAAO;AAAA,IAC1D,WAAW,CAAC,MAAM,WAAW,YAAY;AApC7C;AAqCM,kBAAY,kBAAkB,EAAE,UAAU,mBAAmB,MAAM,EAAE,CAAC;AACtE,+CAAS,cAAT,iCAAqB,MAAM,WAAW;AAAA,IACxC;AAAA,IACA,GAAG;AAAA,EACL,CAAC;AACH;AACA,IAAI,oBAAoB,CAAC,IAAI,YAAY;AACvC,SAAO,YAAY;AAAA,IACjB,YAAY,CAAC,YAAY,IAAI,MAAM,SAAS,OAAO,IAAI,OAAO;AAAA,IAC9D,WAAW,CAAC,MAAM,WAAW,YAAY;AA9C7C;AA+CM,kBAAY,kBAAkB,EAAE,UAAU,mBAAmB,MAAM,EAAE,CAAC;AACtE,kBAAY,kBAAkB,EAAE,UAAU,mBAAmB,OAAO,EAAE,EAAE,CAAC;AACzE,+CAAS,cAAT,iCAAqB,MAAM,WAAW;AAAA,IACxC;AAAA,IACA,GAAG;AAAA,EACL,CAAC;AACH;AACA,IAAI,oBAAoB,CAAC,IAAI,YAAY;AACvC,SAAO,YAAY;AAAA,IACjB,YAAY,MAAM,IAAI,MAAM,SAAS,OAAO,EAAE;AAAA,IAC9C,WAAW,CAAC,MAAM,WAAW,YAAY;AAzD7C;AA0DM,kBAAY,kBAAkB,EAAE,UAAU,mBAAmB,MAAM,EAAE,CAAC;AACtE,kBAAY,kBAAkB;AAAA,QAC5B,UAAU,mBAAmB,OAAO,EAAE;AAAA,MACxC,CAAC;AACD,+CAAS,cAAT,iCAAqB,MAAM,WAAW;AAAA,IACxC;AAAA,IACA,GAAG;AAAA,EACL,CAAC;AACH;",
  "names": []
}
