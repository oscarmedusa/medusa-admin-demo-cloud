import {
  usePromotionTableColumns,
  usePromotionTableQuery
} from "./chunk-WSHOLRFZ.js";
import {
  DateRangeDisplay
} from "./chunk-AJIAKLZI.js";
import "./chunk-JC2ISTCK.js";
import "./chunk-KTHKGBUF.js";
import {
  currencies
} from "./chunk-55MYIBGD.js";
import "./chunk-4TA2GWZH.js";
import {
  usePromotionTableFilters
} from "./chunk-JAJBH2XW.js";
import {
  TwoColumnPage
} from "./chunk-JYSVBSJS.js";
import "./chunk-GV2TOR46.js";
import "./chunk-EGRHWZRV.js";
import "./chunk-QZUCBNNJ.js";
import {
  DataTable,
  useDataTable
} from "./chunk-JH6E7Y6M.js";
import "./chunk-EIGZCZHJ.js";
import "./chunk-CEIAMOT7.js";
import "./chunk-EYAVSJ2J.js";
import {
  createColumnHelper
} from "./chunk-TI6Y7EUW.js";
import "./chunk-JEFCFQ36.js";
import "./chunk-Z74QHE3B.js";
import "./chunk-6VC5CKXS.js";
import "./chunk-4HJQONUH.js";
import "./chunk-IANM7SMM.js";
import "./chunk-O47TKOMU.js";
import {
  campaignsQueryKeys,
  useAddOrRemoveCampaignPromotions,
  useCampaign,
  useDeleteCampaign,
  usePromotions
} from "./chunk-6MTGJSDM.js";
import {
  TwoColumnPageSkeleton
} from "./chunk-YSLQHU2M.js";
import {
  ActionMenu
} from "./chunk-IE22HJTV.js";
import "./chunk-RLHQ5IGU.js";
import "./chunk-HZGR4LPF.js";
import {
  isAfter,
  isBefore
} from "./chunk-3FGSU2DA.js";
import "./chunk-YUBPGLTM.js";
import "./chunk-K4BQKT4B.js";
import "./chunk-SWXOOP7W.js";
import "./chunk-ROURSU5C.js";
import {
  queryClient
} from "./chunk-4UMAAWOP.js";
import "./chunk-Y5OEN2X7.js";
import "./chunk-QDFILGGU.js";
import {
  sdk
} from "./chunk-ZSXFNTF6.js";
import {
  Badge,
  Button,
  ChartPie,
  Checkbox,
  Container,
  CurrencyDollar,
  Heading,
  PencilSquare,
  StatusBadge,
  Text,
  Trans,
  Trash,
  toast,
  usePrompt,
  useTranslation
} from "./chunk-ZUPX4YFG.js";
import {
  Link,
  useLoaderData,
  useNavigate,
  useParams
} from "./chunk-HTGWU6KF.js";
import "./chunk-64MXM5QD.js";
import "./chunk-3VI6QF3M.js";
import {
  require_jsx_runtime
} from "./chunk-P6CFP5BP.js";
import {
  __toESM,
  require_react
} from "./chunk-H5NG3XTT.js";

// node_modules/@medusajs/dashboard/dist/campaign-detail-AG7QV74F.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var import_react = __toESM(require_react(), 1);
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1);
import after from "virtual:medusa/widgets/campaign/details/after";
import before from "virtual:medusa/widgets/campaign/details/before";
import sideAfter from "virtual:medusa/widgets/campaign/details/side/after";
import sideBefore from "virtual:medusa/widgets/campaign/details/side/before";
var import_jsx_runtime5 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime6 = __toESM(require_jsx_runtime(), 1);
var CampaignBudget = ({ campaign }) => {
  var _a, _b, _c;
  const { t } = useTranslation();
  return (0, import_jsx_runtime.jsxs)(Container, { className: "flex flex-col gap-y-4 px-6 py-4", children: [
    (0, import_jsx_runtime.jsxs)("div", { className: "flex justify-between", children: [
      (0, import_jsx_runtime.jsxs)("div", { className: "flex-grow", children: [
        (0, import_jsx_runtime.jsx)("div", { className: "bg-ui-bg-base shadow-borders-base float-left flex size-7 items-center justify-center rounded-md", children: (0, import_jsx_runtime.jsx)("div", { className: "bg-ui-bg-component flex size-6 items-center justify-center rounded-[4px]", children: (0, import_jsx_runtime.jsx)(ChartPie, { className: "text-ui-fg-subtle" }) }) }),
        (0, import_jsx_runtime.jsx)(
          Heading,
          {
            className: "text-ui-fg-subtle ml-10 mt-[1.5px] font-normal",
            level: "h3",
            children: t("campaigns.fields.budget_limit")
          }
        )
      ] }),
      (0, import_jsx_runtime.jsx)(
        ActionMenu,
        {
          groups: [
            {
              actions: [
                {
                  icon: (0, import_jsx_runtime.jsx)(PencilSquare, {}),
                  label: t("actions.edit"),
                  to: `edit-budget`
                }
              ]
            }
          ]
        }
      )
    ] }),
    (0, import_jsx_runtime.jsx)("div", { children: (0, import_jsx_runtime.jsx)(
      Text,
      {
        className: "text-ui-fg-subtle border-ui-border-strong border-l-4 pl-3",
        size: "small",
        leading: "compact",
        children: (0, import_jsx_runtime.jsx)(
          Trans,
          {
            i18nKey: "campaigns.totalSpend",
            values: {
              amount: ((_a = campaign == null ? void 0 : campaign.budget) == null ? void 0 : _a.limit) || "no limit",
              currency: ((_b = campaign == null ? void 0 : campaign.budget) == null ? void 0 : _b.type) === "spend" && (campaign == null ? void 0 : campaign.budget.limit) ? (_c = campaign.budget) == null ? void 0 : _c.currency_code : ""
            },
            components: [
              (0, import_jsx_runtime.jsx)(
                "span",
                {
                  className: "text-ui-fg-base txt-compact-medium-plus text-lg"
                },
                "amount"
              ),
              (0, import_jsx_runtime.jsx)(
                "span",
                {
                  className: "text-ui-fg-base txt-compact-medium-plus text-lg"
                },
                "currency"
              )
            ]
          }
        )
      }
    ) })
  ] });
};
function campaignStatus(campaign) {
  if (campaign.ends_at) {
    if (isBefore(new Date(campaign.ends_at), /* @__PURE__ */ new Date())) {
      return "expired";
    }
  }
  if (campaign.starts_at) {
    if (isAfter(new Date(campaign.starts_at), /* @__PURE__ */ new Date())) {
      return "scheduled";
    }
  }
  return "active";
}
var statusColor = (status) => {
  switch (status) {
    case "expired":
      return "red";
    case "scheduled":
      return "orange";
    case "active":
      return "green";
    default:
      return "grey";
  }
};
var CampaignGeneralSection = ({
  campaign
}) => {
  var _a, _b;
  const { t } = useTranslation();
  const prompt = usePrompt();
  const navigate = useNavigate();
  const { mutateAsync } = useDeleteCampaign(campaign.id);
  const handleDelete = async () => {
    const res = await prompt({
      title: t("campaigns.delete.title"),
      description: t("campaigns.delete.description", {
        name: campaign.name
      }),
      confirmText: t("actions.delete"),
      cancelText: t("actions.cancel")
    });
    if (!res) {
      return;
    }
    await mutateAsync(void 0, {
      onSuccess: () => {
        toast.success(
          t("campaigns.delete.successToast", {
            name: campaign.name
          })
        );
        navigate("/campaigns", { replace: true });
      },
      onError: (error) => {
        toast.error(error.message);
      }
    });
  };
  const status = campaignStatus(campaign);
  return (0, import_jsx_runtime2.jsxs)(Container, { className: "divide-y p-0", children: [
    (0, import_jsx_runtime2.jsxs)("div", { className: "flex items-center justify-between px-6 py-4", children: [
      (0, import_jsx_runtime2.jsx)(Heading, { children: campaign.name }),
      (0, import_jsx_runtime2.jsxs)("div", { className: "flex items-center gap-x-4", children: [
        (0, import_jsx_runtime2.jsx)(StatusBadge, { color: statusColor(status), children: t(`campaigns.status.${status}`) }),
        (0, import_jsx_runtime2.jsx)(
          ActionMenu,
          {
            groups: [
              {
                actions: [
                  {
                    icon: (0, import_jsx_runtime2.jsx)(PencilSquare, {}),
                    label: t("actions.edit"),
                    to: `/campaigns/${campaign.id}/edit`
                  }
                ]
              },
              {
                actions: [
                  {
                    icon: (0, import_jsx_runtime2.jsx)(Trash, {}),
                    label: t("actions.delete"),
                    onClick: handleDelete
                  }
                ]
              }
            ]
          }
        )
      ] })
    ] }),
    (0, import_jsx_runtime2.jsxs)("div", { className: "text-ui-fg-subtle grid grid-cols-2 items-center px-6 py-4", children: [
      (0, import_jsx_runtime2.jsx)(Text, { size: "small", leading: "compact", weight: "plus", children: t("campaigns.fields.identifier") }),
      (0, import_jsx_runtime2.jsx)(Text, { size: "small", leading: "compact", children: campaign.campaign_identifier })
    ] }),
    (0, import_jsx_runtime2.jsxs)("div", { className: "text-ui-fg-subtle grid grid-cols-2 items-center px-6 py-4", children: [
      (0, import_jsx_runtime2.jsx)(Text, { size: "small", leading: "compact", weight: "plus", children: t("fields.description") }),
      (0, import_jsx_runtime2.jsx)(Text, { size: "small", leading: "compact", children: campaign.description || "-" })
    ] }),
    (campaign == null ? void 0 : campaign.budget) && campaign.budget.type === "spend" && (0, import_jsx_runtime2.jsxs)("div", { className: "text-ui-fg-subtle grid grid-cols-2 items-center px-6 py-4", children: [
      (0, import_jsx_runtime2.jsx)(Text, { size: "small", leading: "compact", weight: "plus", children: t("fields.currency") }),
      (0, import_jsx_runtime2.jsxs)("div", { children: [
        (0, import_jsx_runtime2.jsx)(Badge, { size: "xsmall", children: campaign == null ? void 0 : campaign.budget.currency_code }),
        (0, import_jsx_runtime2.jsx)(Text, { className: "inline pl-3", size: "small", leading: "compact", children: (_b = currencies[(_a = campaign == null ? void 0 : campaign.budget.currency_code) == null ? void 0 : _a.toUpperCase()]) == null ? void 0 : _b.name })
      ] })
    ] })
  ] });
};
var PAGE_SIZE = 10;
var CampaignPromotionSection = ({
  campaign
}) => {
  const [rowSelection, setRowSelection] = (0, import_react.useState)({});
  const { t } = useTranslation();
  const prompt = usePrompt();
  const columns = useColumns();
  const filters = usePromotionTableFilters();
  const { searchParams, raw } = usePromotionTableQuery({ pageSize: PAGE_SIZE });
  const { promotions, count, isLoading, isError, error } = usePromotions({
    ...searchParams,
    campaign_id: campaign.id
  });
  const { table } = useDataTable({
    data: promotions ?? [],
    columns,
    count,
    getRowId: (row) => row.id,
    enablePagination: true,
    enableRowSelection: true,
    pageSize: PAGE_SIZE,
    rowSelection: {
      state: rowSelection,
      updater: setRowSelection
    },
    meta: { campaignId: campaign.id }
  });
  if (isError) {
    throw error;
  }
  const { mutateAsync } = useAddOrRemoveCampaignPromotions(campaign.id);
  const handleRemove = async () => {
    const keys = Object.keys(rowSelection);
    const res = await prompt({
      title: t("campaigns.promotions.remove.title", { count: keys.length }),
      description: t("campaigns.promotions.remove.description", {
        count: keys.length
      }),
      confirmText: t("actions.continue"),
      cancelText: t("actions.cancel")
    });
    if (!res) {
      return;
    }
    await mutateAsync(
      { remove: keys },
      { onSuccess: () => setRowSelection({}) }
    );
  };
  return (0, import_jsx_runtime3.jsxs)(Container, { className: "divide-y p-0", children: [
    (0, import_jsx_runtime3.jsxs)("div", { className: "flex items-center justify-between px-6 py-4", children: [
      (0, import_jsx_runtime3.jsx)(Heading, { level: "h2", children: t("promotions.domain") }),
      (0, import_jsx_runtime3.jsx)(Link, { to: `/campaigns/${campaign.id}/add-promotions`, children: (0, import_jsx_runtime3.jsx)(Button, { variant: "secondary", size: "small", children: t("general.add") }) })
    ] }),
    (0, import_jsx_runtime3.jsx)(
      DataTable,
      {
        table,
        columns,
        pageSize: PAGE_SIZE,
        isLoading,
        count,
        navigateTo: (row) => `/promotions/${row.id}`,
        filters,
        search: true,
        pagination: true,
        orderBy: [
          "email",
          "first_name",
          "last_name",
          "has_account",
          "created_at",
          "updated_at"
        ],
        queryObject: raw,
        commands: [
          {
            action: handleRemove,
            label: t("actions.remove"),
            shortcut: "r"
          }
        ],
        noRecords: {
          message: t("campaigns.promotions.list.noRecordsMessage")
        }
      }
    )
  ] });
};
var PromotionActions = ({
  promotion,
  campaignId
}) => {
  const { t } = useTranslation();
  const { mutateAsync } = useAddOrRemoveCampaignPromotions(campaignId);
  const prompt = usePrompt();
  const handleRemove = async () => {
    const res = await prompt({
      title: t("campaigns.promotions.remove.title", {
        count: 1
      }),
      description: t("campaigns.promotions.remove.description", {
        count: 1
      }),
      confirmText: t("actions.continue"),
      cancelText: t("actions.cancel")
    });
    if (!res) {
      return;
    }
    await mutateAsync({
      remove: [promotion.id]
    });
  };
  return (0, import_jsx_runtime3.jsx)(
    ActionMenu,
    {
      groups: [
        {
          actions: [
            {
              icon: (0, import_jsx_runtime3.jsx)(PencilSquare, {}),
              label: t("actions.edit"),
              to: `/promotions/${promotion.id}/edit`
            }
          ]
        },
        {
          actions: [
            {
              icon: (0, import_jsx_runtime3.jsx)(Trash, {}),
              label: t("actions.remove"),
              onClick: handleRemove
            }
          ]
        }
      ]
    }
  );
};
var columnHelper = createColumnHelper();
var useColumns = () => {
  const columns = usePromotionTableColumns();
  return (0, import_react.useMemo)(
    () => [
      columnHelper.display({
        id: "select",
        header: ({ table }) => {
          return (0, import_jsx_runtime3.jsx)(
            Checkbox,
            {
              checked: table.getIsSomePageRowsSelected() ? "indeterminate" : table.getIsAllPageRowsSelected(),
              onCheckedChange: (value) => table.toggleAllPageRowsSelected(!!value)
            }
          );
        },
        cell: ({ row }) => {
          return (0, import_jsx_runtime3.jsx)(
            Checkbox,
            {
              checked: row.getIsSelected(),
              onCheckedChange: (value) => row.toggleSelected(!!value),
              onClick: (e) => {
                e.stopPropagation();
              }
            }
          );
        }
      }),
      ...columns,
      columnHelper.display({
        id: "actions",
        cell: ({ row, table }) => {
          const { campaignId } = table.options.meta;
          return (0, import_jsx_runtime3.jsx)(
            PromotionActions,
            {
              promotion: row.original,
              campaignId
            }
          );
        }
      })
    ],
    [columns]
  );
};
var CampaignSpend = ({ campaign }) => {
  var _a, _b, _c, _d;
  const { t } = useTranslation();
  return (0, import_jsx_runtime4.jsxs)(Container, { className: "flex flex-col gap-y-4 px-6 py-4", children: [
    (0, import_jsx_runtime4.jsxs)("div", { className: "mb-2 grid grid-cols-[28px_1fr] items-center gap-x-3", children: [
      (0, import_jsx_runtime4.jsx)("div", { className: "bg-ui-bg-base shadow-borders-base flex size-7 items-center justify-center rounded-md", children: (0, import_jsx_runtime4.jsx)("div", { className: "bg-ui-bg-component flex size-6 items-center justify-center rounded-[4px]", children: (0, import_jsx_runtime4.jsx)(CurrencyDollar, { className: "text-ui-fg-subtle" }) }) }),
      (0, import_jsx_runtime4.jsx)(Heading, { level: "h3", className: "text-ui-fg-subtle font-normal", children: ((_a = campaign.budget) == null ? void 0 : _a.type) === "spend" ? t("campaigns.fields.total_spend") : t("campaigns.fields.total_used") })
    ] }),
    (0, import_jsx_runtime4.jsx)("div", { children: (0, import_jsx_runtime4.jsx)(
      Text,
      {
        className: "text-ui-fg-subtle border-ui-border-strong border-l-4 pl-3",
        size: "small",
        leading: "compact",
        children: (0, import_jsx_runtime4.jsx)(
          Trans,
          {
            i18nKey: "campaigns.totalSpend",
            values: {
              amount: ((_b = campaign == null ? void 0 : campaign.budget) == null ? void 0 : _b.used) || 0,
              currency: ((_c = campaign == null ? void 0 : campaign.budget) == null ? void 0 : _c.type) === "spend" ? (_d = campaign == null ? void 0 : campaign.budget) == null ? void 0 : _d.currency_code : ""
            },
            components: [
              (0, import_jsx_runtime4.jsx)(
                "span",
                {
                  className: "text-ui-fg-base txt-compact-medium-plus text-lg"
                },
                "amount"
              ),
              (0, import_jsx_runtime4.jsx)(
                "span",
                {
                  className: "text-ui-fg-base txt-compact-medium-plus text-lg"
                },
                "currency"
              )
            ]
          }
        )
      }
    ) })
  ] });
};
var CampaignConfigurationSection = ({
  campaign
}) => {
  const { t } = useTranslation();
  return (0, import_jsx_runtime5.jsxs)(Container, { className: "flex flex-col gap-y-4", children: [
    (0, import_jsx_runtime5.jsxs)("div", { className: "flex items-center justify-between", children: [
      (0, import_jsx_runtime5.jsx)(Heading, { level: "h2", children: t("campaigns.configuration.header") }),
      (0, import_jsx_runtime5.jsx)(
        ActionMenu,
        {
          groups: [
            {
              actions: [
                {
                  label: t("actions.edit"),
                  icon: (0, import_jsx_runtime5.jsx)(PencilSquare, {}),
                  to: "configuration"
                }
              ]
            }
          ]
        }
      )
    ] }),
    (0, import_jsx_runtime5.jsx)(
      DateRangeDisplay,
      {
        startsAt: campaign.starts_at,
        endsAt: campaign.ends_at,
        showTime: true
      }
    )
  ] });
};
var CampaignDetail = () => {
  const initialData = useLoaderData();
  const { id } = useParams();
  const { campaign, isLoading, isError, error } = useCampaign(
    id,
    { fields: "+promotions.id" },
    { initialData }
  );
  if (isLoading || !campaign) {
    return (0, import_jsx_runtime6.jsx)(
      TwoColumnPageSkeleton,
      {
        mainSections: 2,
        sidebarSections: 3,
        showJSON: true,
        showMetadata: true
      }
    );
  }
  if (isError) {
    throw error;
  }
  return (0, import_jsx_runtime6.jsxs)(
    TwoColumnPage,
    {
      widgets: {
        after,
        before,
        sideAfter,
        sideBefore
      },
      hasOutlet: true,
      showJSON: true,
      showMetadata: true,
      data: campaign,
      children: [
        (0, import_jsx_runtime6.jsxs)(TwoColumnPage.Main, { children: [
          (0, import_jsx_runtime6.jsx)(CampaignGeneralSection, { campaign }),
          (0, import_jsx_runtime6.jsx)(CampaignPromotionSection, { campaign })
        ] }),
        (0, import_jsx_runtime6.jsxs)(TwoColumnPage.Sidebar, { children: [
          (0, import_jsx_runtime6.jsx)(CampaignConfigurationSection, { campaign }),
          (0, import_jsx_runtime6.jsx)(CampaignSpend, { campaign }),
          (0, import_jsx_runtime6.jsx)(CampaignBudget, { campaign })
        ] })
      ]
    }
  );
};
var campaignDetailQuery = (id) => ({
  queryKey: campaignsQueryKeys.detail(id),
  queryFn: async () => sdk.admin.campaign.retrieve(id, {
    fields: "+promotions.id"
  })
});
var campaignLoader = async ({ params }) => {
  const id = params.id;
  const query = campaignDetailQuery(id);
  return queryClient.getQueryData(query.queryKey) ?? await queryClient.fetchQuery(query);
};
export {
  CampaignDetail as Component,
  campaignLoader as loader
};
//# sourceMappingURL=campaign-detail-AG7QV74F-WWWCDLZ3.js.map
