import {
  EditProductMediaSchema,
  UploadMediaFormItem
} from "./chunk-YZ3ASHCH.js";
import "./chunk-CWUOXUSQ.js";
import "./chunk-MS77OZQ6.js";
import "./chunk-LKYIPMJI.js";
import {
  RouteFocusModal,
  useRouteModal
} from "./chunk-3P6F4Q7W.js";
import "./chunk-QUYQ44V5.js";
import "./chunk-ROURSU5C.js";
import {
  useProduct,
  useUpdateProduct
} from "./chunk-3VJMO5NN.js";
import "./chunk-IH74SCJ5.js";
import "./chunk-4UMAAWOP.js";
import "./chunk-Y5OEN2X7.js";
import {
  AnimatePresence,
  motion
} from "./chunk-V6QTDRXV.js";
import {
  t
} from "./chunk-NMISSY3S.js";
import "./chunk-D6YTPD33.js";
import {
  useFieldArray,
  useForm
} from "./chunk-TKBVWLOU.js";
import "./chunk-QDFILGGU.js";
import {
  sdk
} from "./chunk-ZSXFNTF6.js";
import {
  ArrowDownTray,
  Button,
  CheckMini,
  CommandBar,
  IconButton,
  Spinner,
  Text,
  ThumbnailBadge,
  Tooltip,
  Trash,
  TriangleLeftMini,
  TriangleRightMini,
  clx,
  usePrompt,
  useTranslation
} from "./chunk-ZUPX4YFG.js";
import {
  Link,
  useLocation,
  useParams,
  useSearchParams
} from "./chunk-HTGWU6KF.js";
import "./chunk-64MXM5QD.js";
import "./chunk-3VI6QF3M.js";
import {
  require_jsx_runtime
} from "./chunk-P6CFP5BP.js";
import {
  __toESM,
  require_react
} from "./chunk-H5NG3XTT.js";

// node_modules/@medusajs/dashboard/dist/product-media-NV7MPTFA.mjs
var import_react = __toESM(require_react(), 1);
var import_react2 = __toESM(require_react(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var import_react3 = __toESM(require_react(), 1);
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
var import_react4 = __toESM(require_react(), 1);
var import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime5 = __toESM(require_jsx_runtime(), 1);
var MediaGrid = ({
  media,
  selection,
  onCheckedChange
}) => {
  return (0, import_jsx_runtime.jsx)("div", { className: "bg-ui-bg-subtle size-full overflow-auto", children: (0, import_jsx_runtime.jsx)("div", { className: "grid h-fit auto-rows-auto grid-cols-4 gap-6 p-6", children: media.map((m) => {
    return (0, import_jsx_runtime.jsx)(
      MediaGridItem,
      {
        onCheckedChange: onCheckedChange(m.id),
        checked: !!selection[m.id],
        media: m
      },
      m.field_id
    );
  }) }) });
};
var MediaGridItem = ({
  media,
  checked,
  onCheckedChange
}) => {
  const [isLoading, setIsLoading] = (0, import_react2.useState)(true);
  const { t: t2 } = useTranslation();
  const handleToggle = (0, import_react2.useCallback)(() => {
    onCheckedChange(!checked);
  }, [checked, onCheckedChange]);
  return (0, import_jsx_runtime.jsxs)(
    "button",
    {
      type: "button",
      onClick: handleToggle,
      className: "shadow-elevation-card-rest hover:shadow-elevation-card-hover focus-visible:shadow-borders-focus bg-ui-bg-subtle-hover group relative aspect-square h-auto max-w-full overflow-hidden rounded-lg outline-none",
      children: [
        media.isThumbnail && (0, import_jsx_runtime.jsx)("div", { className: "absolute left-2 top-2", children: (0, import_jsx_runtime.jsx)(Tooltip, { content: t2("products.media.thumbnailTooltip"), children: (0, import_jsx_runtime.jsx)(ThumbnailBadge, {}) }) }),
        (0, import_jsx_runtime.jsx)(
          "div",
          {
            className: clx(
              "transition-fg absolute right-2 top-2 opacity-0 group-focus-within:opacity-100 group-hover:opacity-100 group-focus:opacity-100",
              {
                "opacity-100": checked
              }
            ),
            children: (0, import_jsx_runtime.jsx)(
              "div",
              {
                className: clx(
                  "group relative inline-flex h-4 w-4 items-center justify-center outline-none "
                ),
                children: (0, import_jsx_runtime.jsx)(
                  "div",
                  {
                    className: clx(
                      "text-ui-fg-on-inverted bg-ui-bg-component shadow-borders-base [&_path]:shadow-details-contrast-on-bg-interactive group-disabled:text-ui-fg-disabled group-disabled:!bg-ui-bg-disabled group-disabled:!shadow-borders-base transition-fg h-[14px] w-[14px] rounded-[3px]",
                      {
                        "bg-ui-bg-interactive group-hover:bg-ui-bg-interactive shadow-borders-interactive-with-shadow": checked
                      }
                    ),
                    children: checked && (0, import_jsx_runtime.jsx)("div", { className: "absolute inset-0", children: (0, import_jsx_runtime.jsx)(CheckMini, {}) })
                  }
                )
              }
            )
          }
        ),
        (0, import_jsx_runtime.jsx)(AnimatePresence, { children: isLoading && (0, import_jsx_runtime.jsx)(
          motion.div,
          {
            initial: { opacity: 1 },
            animate: { opacity: 1 },
            exit: { opacity: 0, transition: { duration: 0.5 } },
            className: "bg-ui-bg-subtle-hover absolute inset-0 flex items-center justify-center",
            children: (0, import_jsx_runtime.jsx)(Spinner, { className: "text-ui-fg-subtle animate-spin" })
          }
        ) }),
        (0, import_jsx_runtime.jsx)(
          "img",
          {
            src: media.url,
            onLoad: () => setIsLoading(false),
            alt: "",
            className: "size-full object-cover object-center"
          }
        )
      ]
    }
  );
};
var EditProductMediaForm = ({ product }) => {
  const [selection, setSelection] = (0, import_react.useState)({});
  const { t: t2 } = useTranslation();
  const { handleSuccess } = useRouteModal();
  const form = useForm({
    defaultValues: {
      media: getDefaultValues(product.images, product.thumbnail)
    },
    resolver: t(EditProductMediaSchema)
  });
  const { fields, append, remove, update } = useFieldArray({
    name: "media",
    control: form.control,
    keyName: "field_id"
  });
  const { mutateAsync, isPending } = useUpdateProduct(product.id);
  const handleSubmit = form.handleSubmit(async ({ media }) => {
    var _a;
    const filesToUpload = media.map((m, i) => ({ file: m.file, index: i })).filter((m) => !!m.file);
    let uploaded = [];
    if (filesToUpload.length) {
      const { files: uploads } = await sdk.admin.upload.create({ files: filesToUpload.map((m) => m.file) }).catch(() => {
        form.setError("media", {
          type: "invalid_file",
          message: t2("products.media.failedToUpload")
        });
        return { files: [] };
      });
      uploaded = uploads;
    }
    const withUpdatedUrls = media.map((entry, i) => {
      var _a2;
      const toUploadIndex = filesToUpload.findIndex((m) => m.index === i);
      if (toUploadIndex > -1) {
        return { ...entry, url: (_a2 = uploaded[toUploadIndex]) == null ? void 0 : _a2.url };
      }
      return entry;
    });
    const thumbnail = (_a = withUpdatedUrls.find((m) => m.isThumbnail)) == null ? void 0 : _a.url;
    await mutateAsync(
      {
        images: withUpdatedUrls.map((file) => ({ url: file.url })),
        // Set thumbnail to empty string if no thumbnail is selected, as the API does not accept null
        thumbnail: thumbnail || ""
      },
      {
        onSuccess: () => {
          handleSuccess();
        }
      }
    );
  });
  const handleCheckedChange = (0, import_react.useCallback)(
    (id) => {
      return (val) => {
        if (!val) {
          const { [id]: _, ...rest } = selection;
          setSelection(rest);
        } else {
          setSelection((prev) => ({ ...prev, [id]: true }));
        }
      };
    },
    [selection]
  );
  const handleDelete = () => {
    const ids = Object.keys(selection);
    const indices = ids.map((id) => fields.findIndex((m) => m.id === id));
    remove(indices);
    setSelection({});
  };
  const handlePromoteToThumbnail = () => {
    const ids = Object.keys(selection);
    if (!ids.length) {
      return;
    }
    const currentThumbnailIndex = fields.findIndex((m) => m.isThumbnail);
    if (currentThumbnailIndex > -1) {
      update(currentThumbnailIndex, {
        ...fields[currentThumbnailIndex],
        isThumbnail: false
      });
    }
    const index = fields.findIndex((m) => m.id === ids[0]);
    update(index, {
      ...fields[index],
      isThumbnail: true
    });
    setSelection({});
  };
  const selectionCount = Object.keys(selection).length;
  return (0, import_jsx_runtime2.jsx)(RouteFocusModal.Form, { blockSearch: true, form, children: (0, import_jsx_runtime2.jsxs)(
    "form",
    {
      className: "flex size-full flex-col overflow-hidden",
      onSubmit: handleSubmit,
      children: [
        (0, import_jsx_runtime2.jsx)(RouteFocusModal.Header, { children: (0, import_jsx_runtime2.jsxs)("div", { className: "flex items-center justify-end gap-x-2", children: [
          (0, import_jsx_runtime2.jsx)(RouteFocusModal.Close, { asChild: true, children: (0, import_jsx_runtime2.jsx)(Button, { variant: "secondary", size: "small", children: t2("actions.cancel") }) }),
          (0, import_jsx_runtime2.jsx)(Button, { variant: "secondary", size: "small", asChild: true, children: (0, import_jsx_runtime2.jsx)(Link, { to: { pathname: ".", search: void 0 }, children: t2("products.media.galleryLabel") }) }),
          (0, import_jsx_runtime2.jsx)(Button, { size: "small", type: "submit", isLoading: isPending, children: t2("actions.save") })
        ] }) }),
        (0, import_jsx_runtime2.jsx)(RouteFocusModal.Body, { className: "flex flex-col overflow-hidden", children: (0, import_jsx_runtime2.jsxs)("div", { className: "flex size-full flex-col-reverse lg:grid lg:grid-cols-[1fr_560px]", children: [
          (0, import_jsx_runtime2.jsx)(
            MediaGrid,
            {
              media: fields,
              onCheckedChange: handleCheckedChange,
              selection
            }
          ),
          (0, import_jsx_runtime2.jsx)("div", { className: "bg-ui-bg-base border-b px-6 py-4 lg:border-b-0 lg:border-l", children: (0, import_jsx_runtime2.jsx)(UploadMediaFormItem, { form, append }) })
        ] }) }),
        (0, import_jsx_runtime2.jsx)(CommandBar, { open: !!selectionCount, children: (0, import_jsx_runtime2.jsxs)(CommandBar.Bar, { children: [
          (0, import_jsx_runtime2.jsx)(CommandBar.Value, { children: t2("general.countSelected", {
            count: selectionCount
          }) }),
          (0, import_jsx_runtime2.jsx)(CommandBar.Seperator, {}),
          selectionCount === 1 && (0, import_jsx_runtime2.jsxs)(import_react.Fragment, { children: [
            (0, import_jsx_runtime2.jsx)(
              CommandBar.Command,
              {
                action: handlePromoteToThumbnail,
                label: t2("products.media.makeThumbnail"),
                shortcut: "t"
              }
            ),
            (0, import_jsx_runtime2.jsx)(CommandBar.Seperator, {})
          ] }),
          (0, import_jsx_runtime2.jsx)(
            CommandBar.Command,
            {
              action: handleDelete,
              label: t2("actions.delete"),
              shortcut: "d"
            }
          )
        ] }) })
      ]
    }
  ) });
};
var getDefaultValues = (images, thumbnail) => {
  const media = (images == null ? void 0 : images.map((image) => ({
    id: image.id,
    url: image.url,
    isThumbnail: image.url === thumbnail,
    file: null
  }))) || [];
  if (thumbnail && !media.some((mediaItem) => mediaItem.url === thumbnail)) {
    const id = Math.random().toString(36).substring(7);
    media.unshift({
      id,
      url: thumbnail,
      isThumbnail: true,
      file: null
    });
  }
  return media;
};
var ProductMediaGallery = ({ product }) => {
  const { state } = useLocation();
  const [curr, setCurr] = (0, import_react3.useState)((state == null ? void 0 : state.curr) || 0);
  const { t: t2 } = useTranslation();
  const prompt = usePrompt();
  const { mutateAsync, isLoading } = useUpdateProduct(product.id);
  const media = getMedia(product.images, product.thumbnail);
  const next = (0, import_react3.useCallback)(() => {
    if (isLoading) {
      return;
    }
    setCurr((prev2) => (prev2 + 1) % media.length);
  }, [media, isLoading]);
  const prev = (0, import_react3.useCallback)(() => {
    if (isLoading) {
      return;
    }
    setCurr((prev2) => (prev2 - 1 + media.length) % media.length);
  }, [media, isLoading]);
  const goTo = (0, import_react3.useCallback)(
    (index) => {
      if (isLoading) {
        return;
      }
      setCurr(index);
    },
    [isLoading]
  );
  const handleDownloadCurrent = () => {
    if (isLoading) {
      return;
    }
    const a = document.createElement("a");
    a.href = media[curr].url;
    a.download = "image";
    a.target = "_blank";
    a.click();
  };
  const handleDeleteCurrent = async () => {
    const current = media[curr];
    const res = await prompt({
      title: t2("general.areYouSure"),
      description: current.isThumbnail ? t2("products.media.deleteWarningWithThumbnail", { count: 1 }) : t2("products.media.deleteWarning", { count: 1 }),
      confirmText: t2("actions.delete"),
      cancelText: t2("actions.cancel")
    });
    if (!res) {
      return;
    }
    const mediaToKeep = product.images.filter((i) => i.id !== current.id).map((i) => ({ url: i.url }));
    if (curr === media.length - 1) {
      setCurr((prev2) => prev2 - 1);
    }
    await mutateAsync({
      images: mediaToKeep,
      thumbnail: current.isThumbnail ? "" : void 0
    });
  };
  (0, import_react3.useEffect)(() => {
    const handleKeyDown = (e) => {
      if (e.key === "ArrowRight") {
        next();
      } else if (e.key === "ArrowLeft") {
        prev();
      }
    };
    document.addEventListener("keydown", handleKeyDown);
    return () => {
      document.removeEventListener("keydown", handleKeyDown);
    };
  }, [next, prev]);
  const noMedia = !media.length;
  return (0, import_jsx_runtime3.jsxs)("div", { className: "flex size-full flex-col overflow-hidden", children: [
    (0, import_jsx_runtime3.jsx)(RouteFocusModal.Header, { children: (0, import_jsx_runtime3.jsxs)("div", { className: "flex items-center justify-end gap-x-2", children: [
      (0, import_jsx_runtime3.jsxs)(
        IconButton,
        {
          size: "small",
          type: "button",
          onClick: handleDeleteCurrent,
          disabled: noMedia,
          children: [
            (0, import_jsx_runtime3.jsx)(Trash, {}),
            (0, import_jsx_runtime3.jsx)("span", { className: "sr-only", children: t2("products.media.deleteImageLabel") })
          ]
        }
      ),
      (0, import_jsx_runtime3.jsxs)(
        IconButton,
        {
          size: "small",
          type: "button",
          onClick: handleDownloadCurrent,
          disabled: noMedia,
          children: [
            (0, import_jsx_runtime3.jsx)(ArrowDownTray, {}),
            (0, import_jsx_runtime3.jsx)("span", { className: "sr-only", children: t2("products.media.downloadImageLabel") })
          ]
        }
      ),
      (0, import_jsx_runtime3.jsx)(Button, { variant: "secondary", size: "small", asChild: true, children: (0, import_jsx_runtime3.jsx)(Link, { to: { pathname: ".", search: "view=edit" }, children: t2("actions.edit") }) })
    ] }) }),
    (0, import_jsx_runtime3.jsxs)(RouteFocusModal.Body, { className: "flex flex-col overflow-hidden", children: [
      (0, import_jsx_runtime3.jsx)(Canvas, { curr, media }),
      (0, import_jsx_runtime3.jsx)(
        Preview,
        {
          curr,
          media,
          prev,
          next,
          goTo
        }
      )
    ] })
  ] });
};
var Canvas = ({ media, curr }) => {
  const { t: t2 } = useTranslation();
  if (media.length === 0) {
    return (0, import_jsx_runtime3.jsxs)("div", { className: "bg-ui-bg-subtle flex size-full flex-col items-center justify-center gap-y-4 pb-8 pt-6", children: [
      (0, import_jsx_runtime3.jsxs)("div", { className: "flex flex-col items-center", children: [
        (0, import_jsx_runtime3.jsx)(
          Text,
          {
            size: "small",
            leading: "compact",
            weight: "plus",
            className: "text-ui-fg-subtle",
            children: t2("products.media.emptyState.header")
          }
        ),
        (0, import_jsx_runtime3.jsx)(Text, { size: "small", className: "text-ui-fg-muted", children: t2("products.media.emptyState.description") })
      ] }),
      (0, import_jsx_runtime3.jsx)(Button, { size: "small", variant: "secondary", asChild: true, children: (0, import_jsx_runtime3.jsx)(Link, { to: "?view=edit", children: t2("products.media.emptyState.action") }) })
    ] });
  }
  return (0, import_jsx_runtime3.jsx)("div", { className: "bg-ui-bg-subtle relative size-full overflow-hidden", children: (0, import_jsx_runtime3.jsx)("div", { className: "flex size-full items-center justify-center p-6", children: (0, import_jsx_runtime3.jsxs)("div", { className: "relative h-full w-fit", children: [
    media[curr].isThumbnail && (0, import_jsx_runtime3.jsx)("div", { className: "absolute left-2 top-2", children: (0, import_jsx_runtime3.jsx)(Tooltip, { content: t2("products.media.thumbnailTooltip"), children: (0, import_jsx_runtime3.jsx)(ThumbnailBadge, {}) }) }),
    (0, import_jsx_runtime3.jsx)(
      "img",
      {
        src: media[curr].url,
        alt: "",
        className: "object-fit shadow-elevation-card-rest size-full rounded-xl object-contain"
      }
    )
  ] }) }) });
};
var MAX_VISIBLE_ITEMS = 8;
var Preview = ({
  media,
  curr,
  prev,
  next,
  goTo
}) => {
  if (!media.length) {
    return null;
  }
  const getVisibleItems = (media2, index) => {
    if (media2.length <= MAX_VISIBLE_ITEMS) {
      return media2;
    }
    const half = Math.floor(MAX_VISIBLE_ITEMS / 2);
    const start = (index - half + media2.length) % media2.length;
    const end = (start + MAX_VISIBLE_ITEMS) % media2.length;
    if (end < start) {
      return [...media2.slice(start), ...media2.slice(0, end)];
    } else {
      return media2.slice(start, end);
    }
  };
  const visibleItems = getVisibleItems(media, curr);
  return (0, import_jsx_runtime3.jsxs)("div", { className: "flex shrink-0 items-center justify-center gap-x-2 border-t p-3", children: [
    (0, import_jsx_runtime3.jsx)(
      IconButton,
      {
        size: "small",
        variant: "transparent",
        className: "text-ui-fg-muted",
        type: "button",
        onClick: prev,
        children: (0, import_jsx_runtime3.jsx)(TriangleLeftMini, {})
      }
    ),
    (0, import_jsx_runtime3.jsx)("div", { className: "flex items-center gap-x-2", children: visibleItems.map((item) => {
      const isCurrentImage = item.id === media[curr].id;
      const originalIndex = media.findIndex((i) => i.id === item.id);
      return (0, import_jsx_runtime3.jsx)(
        "button",
        {
          type: "button",
          onClick: () => goTo(originalIndex),
          className: clx(
            "transition-fg size-7 overflow-hidden rounded-[4px] outline-none",
            {
              "shadow-borders-focus": isCurrentImage
            }
          ),
          children: (0, import_jsx_runtime3.jsx)("img", { src: item.url, alt: "", className: "size-full object-cover" })
        },
        item.id
      );
    }) }),
    (0, import_jsx_runtime3.jsx)(
      IconButton,
      {
        size: "small",
        variant: "transparent",
        className: "text-ui-fg-muted",
        type: "button",
        onClick: next,
        children: (0, import_jsx_runtime3.jsx)(TriangleRightMini, {})
      }
    )
  ] });
};
var getMedia = (images, thumbnail) => {
  const media = (images == null ? void 0 : images.map((image) => ({
    id: image.id,
    url: image.url,
    isThumbnail: image.url === thumbnail
  }))) || [];
  if (thumbnail && !media.some((mediaItem) => mediaItem.isThumbnail)) {
    media.unshift({
      id: "thumbnail_only",
      url: thumbnail,
      isThumbnail: true
    });
  }
  return media;
};
var ProductMediaViewContext = (0, import_react4.createContext)(null);
var getView = (searchParams) => {
  const view = searchParams.get("view");
  if (view === "edit") {
    return "edit";
  }
  return "gallery";
};
var ProductMediaView = ({ product }) => {
  const [searchParams, setSearchParams] = useSearchParams();
  const view = getView(searchParams);
  const handleGoToView = (view2) => {
    return () => {
      setSearchParams({ view: view2 });
    };
  };
  return (0, import_jsx_runtime4.jsx)(
    ProductMediaViewContext.Provider,
    {
      value: {
        goToGallery: handleGoToView(
          "gallery"
          /* GALLERY */
        ),
        goToEdit: handleGoToView(
          "edit"
          /* EDIT */
        )
      },
      children: renderView(view, product)
    }
  );
};
var renderView = (view, product) => {
  switch (view) {
    case "gallery":
      return (0, import_jsx_runtime4.jsx)(ProductMediaGallery, { product });
    case "edit":
      return (0, import_jsx_runtime4.jsx)(EditProductMediaForm, { product });
  }
};
var ProductMedia = () => {
  const { id } = useParams();
  const { product, isLoading, isError, error } = useProduct(id);
  const ready = !isLoading && product;
  if (isError) {
    throw error;
  }
  return (0, import_jsx_runtime5.jsx)(RouteFocusModal, { children: ready && (0, import_jsx_runtime5.jsx)(ProductMediaView, { product }) });
};
export {
  ProductMedia as Component
};
//# sourceMappingURL=product-media-NV7MPTFA-WOO5EXKR.js.map
