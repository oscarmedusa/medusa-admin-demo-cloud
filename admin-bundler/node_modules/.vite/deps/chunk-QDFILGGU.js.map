{
  "version": 3,
  "sources": ["../../../../dashboard/dist/chunk-GPBQTNZI.mjs"],
  "sourcesContent": ["// ../../../node_modules/@radix-ui/react-slot/dist/index.mjs\nimport * as React2 from \"react\";\n\n// ../../../node_modules/@radix-ui/react-compose-refs/dist/index.mjs\nimport * as React from \"react\";\nfunction setRef(ref, value) {\n  if (typeof ref === \"function\") {\n    ref(value);\n  } else if (ref !== null && ref !== void 0) {\n    ref.current = value;\n  }\n}\nfunction composeRefs(...refs) {\n  return (node) => refs.forEach((ref) => setRef(ref, node));\n}\nfunction useComposedRefs(...refs) {\n  return React.useCallback(composeRefs(...refs), refs);\n}\n\n// ../../../node_modules/@radix-ui/react-slot/dist/index.mjs\nimport { Fragment, jsx } from \"react/jsx-runtime\";\nvar Slot = React2.forwardRef((props, forwardedRef) => {\n  const { children, ...slotProps } = props;\n  const childrenArray = React2.Children.toArray(children);\n  const slottable = childrenArray.find(isSlottable);\n  if (slottable) {\n    const newElement = slottable.props.children;\n    const newChildren = childrenArray.map((child) => {\n      if (child === slottable) {\n        if (React2.Children.count(newElement) > 1)\n          return React2.Children.only(null);\n        return React2.isValidElement(newElement) ? newElement.props.children : null;\n      } else {\n        return child;\n      }\n    });\n    return /* @__PURE__ */ jsx(SlotClone, { ...slotProps, ref: forwardedRef, children: React2.isValidElement(newElement) ? React2.cloneElement(newElement, void 0, newChildren) : null });\n  }\n  return /* @__PURE__ */ jsx(SlotClone, { ...slotProps, ref: forwardedRef, children });\n});\nSlot.displayName = \"Slot\";\nvar SlotClone = React2.forwardRef((props, forwardedRef) => {\n  const { children, ...slotProps } = props;\n  if (React2.isValidElement(children)) {\n    const childrenRef = getElementRef(children);\n    return React2.cloneElement(children, {\n      ...mergeProps(slotProps, children.props),\n      // @ts-ignore\n      ref: forwardedRef ? composeRefs(forwardedRef, childrenRef) : childrenRef\n    });\n  }\n  return React2.Children.count(children) > 1 ? React2.Children.only(null) : null;\n});\nSlotClone.displayName = \"SlotClone\";\nvar Slottable = ({ children }) => {\n  return /* @__PURE__ */ jsx(Fragment, { children });\n};\nfunction isSlottable(child) {\n  return React2.isValidElement(child) && child.type === Slottable;\n}\nfunction mergeProps(slotProps, childProps) {\n  const overrideProps = { ...childProps };\n  for (const propName in childProps) {\n    const slotPropValue = slotProps[propName];\n    const childPropValue = childProps[propName];\n    const isHandler = /^on[A-Z]/.test(propName);\n    if (isHandler) {\n      if (slotPropValue && childPropValue) {\n        overrideProps[propName] = (...args) => {\n          childPropValue(...args);\n          slotPropValue(...args);\n        };\n      } else if (slotPropValue) {\n        overrideProps[propName] = slotPropValue;\n      }\n    } else if (propName === \"style\") {\n      overrideProps[propName] = { ...slotPropValue, ...childPropValue };\n    } else if (propName === \"className\") {\n      overrideProps[propName] = [slotPropValue, childPropValue].filter(Boolean).join(\" \");\n    }\n  }\n  return { ...slotProps, ...overrideProps };\n}\nfunction getElementRef(element) {\n  let getter = Object.getOwnPropertyDescriptor(element.props, \"ref\")?.get;\n  let mayWarn = getter && \"isReactWarning\" in getter && getter.isReactWarning;\n  if (mayWarn) {\n    return element.ref;\n  }\n  getter = Object.getOwnPropertyDescriptor(element, \"ref\")?.get;\n  mayWarn = getter && \"isReactWarning\" in getter && getter.isReactWarning;\n  if (mayWarn) {\n    return element.props.ref;\n  }\n  return element.props.ref || element.ref;\n}\n\nexport {\n  useComposedRefs,\n  Slot\n};\n"],
  "mappings": "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",
  "names": []
}
